
PubNub_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009540  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000047c  20000000  00009540  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000097c  2000047c  000099bc  0001847c  2**2
                  ALLOC
  3 .stack        00002000  20000df8  0000a338  0001847c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001847c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000184a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003dfc6  00000000  00000000  000184ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061ab  00000000  00000000  000564c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000c58  00000000  00000000  0005c670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00020735  00000000  00000000  0005d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00018ce1  00000000  00000000  0007d9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0008e33a  00000000  00000000  000966de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000fa72  00000000  00000000  00124a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa0  00000000  00000000  0013448a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e28  00000000  00000000  0013542c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002df8 	.word	0x20002df8
       4:	000050d5 	.word	0x000050d5
       8:	000050d1 	.word	0x000050d1
       c:	000050d1 	.word	0x000050d1
	...
      2c:	000050d1 	.word	0x000050d1
	...
      38:	000050d1 	.word	0x000050d1
      3c:	000050d1 	.word	0x000050d1
      40:	000050d1 	.word	0x000050d1
      44:	000050d1 	.word	0x000050d1
      48:	000050d1 	.word	0x000050d1
      4c:	000050d1 	.word	0x000050d1
      50:	00004145 	.word	0x00004145
      54:	000050d1 	.word	0x000050d1
      58:	000050d1 	.word	0x000050d1
      5c:	000050d1 	.word	0x000050d1
      60:	000050d1 	.word	0x000050d1
      64:	00004631 	.word	0x00004631
      68:	00004641 	.word	0x00004641
      6c:	00004651 	.word	0x00004651
      70:	00004661 	.word	0x00004661
      74:	00004671 	.word	0x00004671
      78:	00004681 	.word	0x00004681
      7c:	00003a39 	.word	0x00003a39
      80:	00003a49 	.word	0x00003a49
      84:	00003a59 	.word	0x00003a59
      88:	000050d1 	.word	0x000050d1
      8c:	000050d1 	.word	0x000050d1
      90:	000050d1 	.word	0x000050d1
      94:	000050d1 	.word	0x000050d1
      98:	000050d1 	.word	0x000050d1
      9c:	000050d1 	.word	0x000050d1
      a0:	000050d1 	.word	0x000050d1
      a4:	000050d1 	.word	0x000050d1
      a8:	000050d1 	.word	0x000050d1
      ac:	000050d1 	.word	0x000050d1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	2000047c 	.word	0x2000047c
      d0:	00000000 	.word	0x00000000
      d4:	00009540 	.word	0x00009540

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00009540 	.word	0x00009540
     104:	20000480 	.word	0x20000480
     108:	00009540 	.word	0x00009540
     10c:	00000000 	.word	0x00000000

00000110 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
     110:	b5f0      	push	{r4, r5, r6, r7, lr}
     112:	b083      	sub	sp, #12
     114:	466f      	mov	r7, sp
     116:	71f8      	strb	r0, [r7, #7]
     118:	3707      	adds	r7, #7
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     11a:	4c0b      	ldr	r4, [pc, #44]	; (148 <ssd1306_write_command+0x38>)
     11c:	4e0b      	ldr	r6, [pc, #44]	; (14c <ssd1306_write_command+0x3c>)
     11e:	1c20      	adds	r0, r4, #0
     120:	1c31      	adds	r1, r6, #0
     122:	2201      	movs	r2, #1
     124:	4d0a      	ldr	r5, [pc, #40]	; (150 <ssd1306_write_command+0x40>)
     126:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     128:	2280      	movs	r2, #128	; 0x80
     12a:	05d2      	lsls	r2, r2, #23
     12c:	4b09      	ldr	r3, [pc, #36]	; (154 <ssd1306_write_command+0x44>)
     12e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     130:	1c20      	adds	r0, r4, #0
     132:	1c39      	adds	r1, r7, #0
     134:	2201      	movs	r2, #1
     136:	4b08      	ldr	r3, [pc, #32]	; (158 <ssd1306_write_command+0x48>)
     138:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     13a:	1c20      	adds	r0, r4, #0
     13c:	1c31      	adds	r1, r6, #0
     13e:	2200      	movs	r2, #0
     140:	47a8      	blx	r5
}
     142:	b003      	add	sp, #12
     144:	bdf0      	pop	{r4, r5, r6, r7, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	20000c90 	.word	0x20000c90
     14c:	20000c9c 	.word	0x20000c9c
     150:	00003d11 	.word	0x00003d11
     154:	41004480 	.word	0x41004480
     158:	00003dfd 	.word	0x00003dfd

0000015c <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
     15c:	b530      	push	{r4, r5, lr}
     15e:	b091      	sub	sp, #68	; 0x44
	// Initialize delay routine
	delay_init();
     160:	4b5b      	ldr	r3, [pc, #364]	; (2d0 <ssd1306_init+0x174>)
     162:	4798      	blx	r3
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
     164:	2000      	movs	r0, #0
     166:	4b5b      	ldr	r3, [pc, #364]	; (2d4 <ssd1306_init+0x178>)
     168:	4798      	blx	r3
     16a:	495b      	ldr	r1, [pc, #364]	; (2d8 <ssd1306_init+0x17c>)
     16c:	4b5b      	ldr	r3, [pc, #364]	; (2dc <ssd1306_init+0x180>)
     16e:	4798      	blx	r3
     170:	0083      	lsls	r3, r0, #2
     172:	1818      	adds	r0, r3, r0
     174:	0040      	lsls	r0, r0, #1
     176:	2280      	movs	r2, #128	; 0x80
     178:	0512      	lsls	r2, r2, #20
     17a:	4b59      	ldr	r3, [pc, #356]	; (2e0 <ssd1306_init+0x184>)
     17c:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     17e:	2800      	cmp	r0, #0
     180:	d100      	bne.n	184 <ssd1306_init+0x28>
     182:	e092      	b.n	2aa <ssd1306_init+0x14e>
		SysTick->LOAD = n;
     184:	4b57      	ldr	r3, [pc, #348]	; (2e4 <ssd1306_init+0x188>)
     186:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     188:	2200      	movs	r2, #0
     18a:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18c:	1c19      	adds	r1, r3, #0
     18e:	2280      	movs	r2, #128	; 0x80
     190:	0252      	lsls	r2, r2, #9
     192:	680b      	ldr	r3, [r1, #0]
     194:	4213      	tst	r3, r2
     196:	d0fc      	beq.n	192 <ssd1306_init+0x36>
     198:	e08c      	b.n	2b4 <ssd1306_init+0x158>
     19a:	680b      	ldr	r3, [r1, #0]
     19c:	4213      	tst	r3, r2
     19e:	d0fc      	beq.n	19a <ssd1306_init+0x3e>
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     1a0:	4c51      	ldr	r4, [pc, #324]	; (2e8 <ssd1306_init+0x18c>)
     1a2:	2331      	movs	r3, #49	; 0x31
     1a4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1a6:	2300      	movs	r3, #0
     1a8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1aa:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1ac:	a902      	add	r1, sp, #8
     1ae:	2201      	movs	r2, #1
     1b0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1b2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1b4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1b6:	2031      	movs	r0, #49	; 0x31
     1b8:	4b4c      	ldr	r3, [pc, #304]	; (2ec <ssd1306_init+0x190>)
     1ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1bc:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1be:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1c0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1c2:	2900      	cmp	r1, #0
     1c4:	d103      	bne.n	1ce <ssd1306_init+0x72>
		return &(ports[port_index]->Group[group_index]);
     1c6:	095a      	lsrs	r2, r3, #5
     1c8:	01d2      	lsls	r2, r2, #7
     1ca:	4845      	ldr	r0, [pc, #276]	; (2e0 <ssd1306_init+0x184>)
     1cc:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1ce:	211f      	movs	r1, #31
     1d0:	400b      	ands	r3, r1
     1d2:	2101      	movs	r1, #1
     1d4:	1c08      	adds	r0, r1, #0
     1d6:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1d8:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     1da:	aa02      	add	r2, sp, #8
     1dc:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1de:	2300      	movs	r3, #0
     1e0:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1e2:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1e4:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     1e6:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     1e8:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     1ea:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     1ec:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     1ee:	2124      	movs	r1, #36	; 0x24
     1f0:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     1f2:	9309      	str	r3, [sp, #36]	; 0x24
     1f4:	930a      	str	r3, [sp, #40]	; 0x28
	slave_config.ss_pin = SSD1306_CS_PIN;
	spi_attach_slave(&ssd1306_slave, &slave_config);

	spi_get_config_defaults(&config);

	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
     1f6:	2380      	movs	r3, #128	; 0x80
     1f8:	025b      	lsls	r3, r3, #9
     1fa:	60d3      	str	r3, [r2, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
     1fc:	4b3c      	ldr	r3, [pc, #240]	; (2f0 <ssd1306_init+0x194>)
     1fe:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
     200:	2301      	movs	r3, #1
     202:	425b      	negs	r3, r3
     204:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
     206:	4b3b      	ldr	r3, [pc, #236]	; (2f4 <ssd1306_init+0x198>)
     208:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
     20a:	4b3b      	ldr	r3, [pc, #236]	; (2f8 <ssd1306_init+0x19c>)
     20c:	6353      	str	r3, [r2, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
     20e:	4b32      	ldr	r3, [pc, #200]	; (2d8 <ssd1306_init+0x17c>)
     210:	6193      	str	r3, [r2, #24]

	spi_init(&ssd1306_master, SSD1306_SPI, &config);
     212:	4c3a      	ldr	r4, [pc, #232]	; (2fc <ssd1306_init+0x1a0>)
     214:	1c20      	adds	r0, r4, #0
     216:	493a      	ldr	r1, [pc, #232]	; (300 <ssd1306_init+0x1a4>)
     218:	4b3a      	ldr	r3, [pc, #232]	; (304 <ssd1306_init+0x1a8>)
     21a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     21c:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     21e:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     220:	2b00      	cmp	r3, #0
     222:	d1fc      	bne.n	21e <ssd1306_init+0xc2>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     224:	6811      	ldr	r1, [r2, #0]
     226:	2302      	movs	r3, #2
     228:	430b      	orrs	r3, r1
     22a:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     22c:	ac01      	add	r4, sp, #4
     22e:	2301      	movs	r3, #1
     230:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     232:	2200      	movs	r2, #0
     234:	70a2      	strb	r2, [r4, #2]
	spi_enable(&ssd1306_master);

	struct port_config pin;
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
     236:	7023      	strb	r3, [r4, #0]

	port_pin_set_config(SSD1306_DC_PIN, &pin);
     238:	203e      	movs	r0, #62	; 0x3e
     23a:	1c21      	adds	r1, r4, #0
     23c:	4d2b      	ldr	r5, [pc, #172]	; (2ec <ssd1306_init+0x190>)
     23e:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
     240:	201b      	movs	r0, #27
     242:	1c21      	adds	r1, r4, #0
     244:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     246:	2280      	movs	r2, #128	; 0x80
     248:	0512      	lsls	r2, r2, #20
     24a:	4b25      	ldr	r3, [pc, #148]	; (2e0 <ssd1306_init+0x184>)
     24c:	619a      	str	r2, [r3, #24]

	// Set the reset pin to the default state
	port_pin_set_output_level(SSD1306_RES_PIN, true);

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     24e:	20a8      	movs	r0, #168	; 0xa8
     250:	4c2d      	ldr	r4, [pc, #180]	; (308 <ssd1306_init+0x1ac>)
     252:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
     254:	201f      	movs	r0, #31
     256:	47a0      	blx	r4

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     258:	20d3      	movs	r0, #211	; 0xd3
     25a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
     25c:	2000      	movs	r0, #0
     25e:	47a0      	blx	r4

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
     260:	2040      	movs	r0, #64	; 0x40
     262:	47a0      	blx	r4

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     264:	20a1      	movs	r0, #161	; 0xa1
     266:	47a0      	blx	r4

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     268:	20c8      	movs	r0, #200	; 0xc8
     26a:	47a0      	blx	r4

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     26c:	20da      	movs	r0, #218	; 0xda
     26e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
     270:	2002      	movs	r0, #2
     272:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     274:	2081      	movs	r0, #129	; 0x81
     276:	47a0      	blx	r4
	ssd1306_write_command(contrast);
     278:	208f      	movs	r0, #143	; 0x8f
     27a:	47a0      	blx	r4

	ssd1306_set_contrast(0x8F);

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     27c:	20a4      	movs	r0, #164	; 0xa4
     27e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     280:	20a6      	movs	r0, #166	; 0xa6
     282:	47a0      	blx	r4

	ssd1306_display_invert_disable();

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     284:	20d5      	movs	r0, #213	; 0xd5
     286:	47a0      	blx	r4
	ssd1306_write_command(0x80);
     288:	2080      	movs	r0, #128	; 0x80
     28a:	47a0      	blx	r4

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     28c:	208d      	movs	r0, #141	; 0x8d
     28e:	47a0      	blx	r4
	ssd1306_write_command(0x14);
     290:	2014      	movs	r0, #20
     292:	47a0      	blx	r4

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     294:	20db      	movs	r0, #219	; 0xdb
     296:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     298:	2040      	movs	r0, #64	; 0x40
     29a:	47a0      	blx	r4

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     29c:	20d9      	movs	r0, #217	; 0xd9
     29e:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
     2a0:	20f1      	movs	r0, #241	; 0xf1
     2a2:	47a0      	blx	r4
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     2a4:	20af      	movs	r0, #175	; 0xaf
     2a6:	47a0      	blx	r4
     2a8:	e010      	b.n	2cc <ssd1306_init+0x170>
     2aa:	2280      	movs	r2, #128	; 0x80
     2ac:	0512      	lsls	r2, r2, #20
     2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <ssd1306_init+0x184>)
     2b0:	619a      	str	r2, [r3, #24]
     2b2:	e775      	b.n	1a0 <ssd1306_init+0x44>
     2b4:	2280      	movs	r2, #128	; 0x80
     2b6:	0512      	lsls	r2, r2, #20
     2b8:	4b09      	ldr	r3, [pc, #36]	; (2e0 <ssd1306_init+0x184>)
     2ba:	619a      	str	r2, [r3, #24]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     2bc:	4b09      	ldr	r3, [pc, #36]	; (2e4 <ssd1306_init+0x188>)
     2be:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     2c0:	2200      	movs	r2, #0
     2c2:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2c4:	1c19      	adds	r1, r3, #0
     2c6:	2280      	movs	r2, #128	; 0x80
     2c8:	0252      	lsls	r2, r2, #9
     2ca:	e766      	b.n	19a <ssd1306_init+0x3e>

	ssd1306_display_on();
}
     2cc:	b011      	add	sp, #68	; 0x44
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	00003ec5 	.word	0x00003ec5
     2d4:	00004e89 	.word	0x00004e89
     2d8:	000f4240 	.word	0x000f4240
     2dc:	000059c9 	.word	0x000059c9
     2e0:	41004400 	.word	0x41004400
     2e4:	e000e010 	.word	0xe000e010
     2e8:	20000c9c 	.word	0x20000c9c
     2ec:	000041b1 	.word	0x000041b1
     2f0:	00300002 	.word	0x00300002
     2f4:	00360003 	.word	0x00360003
     2f8:	00370003 	.word	0x00370003
     2fc:	20000c90 	.word	0x20000c90
     300:	42001c00 	.word	0x42001c00
     304:	00003a69 	.word	0x00003a69
     308:	00000111 	.word	0x00000111

0000030c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     30c:	b5f0      	push	{r4, r5, r6, r7, lr}
     30e:	b083      	sub	sp, #12
     310:	466f      	mov	r7, sp
     312:	71f8      	strb	r0, [r7, #7]
     314:	3707      	adds	r7, #7
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     316:	4c0b      	ldr	r4, [pc, #44]	; (344 <ssd1306_write_data+0x38>)
     318:	4e0b      	ldr	r6, [pc, #44]	; (348 <ssd1306_write_data+0x3c>)
     31a:	1c20      	adds	r0, r4, #0
     31c:	1c31      	adds	r1, r6, #0
     31e:	2201      	movs	r2, #1
     320:	4d0a      	ldr	r5, [pc, #40]	; (34c <ssd1306_write_data+0x40>)
     322:	47a8      	blx	r5
     324:	2280      	movs	r2, #128	; 0x80
     326:	05d2      	lsls	r2, r2, #23
     328:	4b09      	ldr	r3, [pc, #36]	; (350 <ssd1306_write_data+0x44>)
     32a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     32c:	1c20      	adds	r0, r4, #0
     32e:	1c39      	adds	r1, r7, #0
     330:	2201      	movs	r2, #1
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <ssd1306_write_data+0x48>)
     334:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     336:	1c20      	adds	r0, r4, #0
     338:	1c31      	adds	r1, r6, #0
     33a:	2200      	movs	r2, #0
     33c:	47a8      	blx	r5
}
     33e:	b003      	add	sp, #12
     340:	bdf0      	pop	{r4, r5, r6, r7, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	20000c90 	.word	0x20000c90
     348:	20000c9c 	.word	0x20000c9c
     34c:	00003d11 	.word	0x00003d11
     350:	41004480 	.word	0x41004480
     354:	00003dfd 	.word	0x00003dfd

00000358 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
     358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     35a:	464f      	mov	r7, r9
     35c:	4646      	mov	r6, r8
     35e:	b4c0      	push	{r6, r7}
     360:	1c07      	adds	r7, r0, #0
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     362:	7803      	ldrb	r3, [r0, #0]
     364:	2b00      	cmp	r3, #0
     366:	d01b      	beq.n	3a0 <ssd1306_write_text+0x48>
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
     368:	4a0f      	ldr	r2, [pc, #60]	; (3a8 <ssd1306_write_text+0x50>)
     36a:	4691      	mov	r9, r2
			for (i = 1; i <= char_ptr[0]; i++) {
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     36c:	4a0f      	ldr	r2, [pc, #60]	; (3ac <ssd1306_write_text+0x54>)
     36e:	4690      	mov	r8, r2

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
				ssd1306_write_data(char_ptr[i]);
     370:	1c16      	adds	r6, r2, #0
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
     372:	2b7e      	cmp	r3, #126	; 0x7e
     374:	d810      	bhi.n	398 <ssd1306_write_text+0x40>
			char_ptr = font_table[*string - 32];
     376:	3b20      	subs	r3, #32
     378:	009b      	lsls	r3, r3, #2
     37a:	464a      	mov	r2, r9
     37c:	589d      	ldr	r5, [r3, r2]
			for (i = 1; i <= char_ptr[0]; i++) {
     37e:	782b      	ldrb	r3, [r5, #0]
     380:	2b00      	cmp	r3, #0
     382:	d007      	beq.n	394 <ssd1306_write_text+0x3c>
     384:	2401      	movs	r4, #1
				ssd1306_write_data(char_ptr[i]);
     386:	5d28      	ldrb	r0, [r5, r4]
     388:	47b0      	blx	r6
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     38a:	3401      	adds	r4, #1
     38c:	b2e4      	uxtb	r4, r4
     38e:	782b      	ldrb	r3, [r5, #0]
     390:	42a3      	cmp	r3, r4
     392:	d2f8      	bcs.n	386 <ssd1306_write_text+0x2e>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     394:	2000      	movs	r0, #0
     396:	47c0      	blx	r8
		}
			string++;
     398:	3701      	adds	r7, #1
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     39a:	783b      	ldrb	r3, [r7, #0]
     39c:	2b00      	cmp	r3, #0
     39e:	d1e8      	bne.n	372 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     3a0:	bc0c      	pop	{r2, r3}
     3a2:	4690      	mov	r8, r2
     3a4:	4699      	mov	r9, r3
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	20000028 	.word	0x20000028
     3ac:	0000030d 	.word	0x0000030d

000003b0 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     3b0:	b530      	push	{r4, r5, lr}
     3b2:	b08d      	sub	sp, #52	; 0x34
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     3b4:	2364      	movs	r3, #100	; 0x64
     3b6:	9300      	str	r3, [sp, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     3b8:	4b22      	ldr	r3, [pc, #136]	; (444 <at30tse_init+0x94>)
     3ba:	9301      	str	r3, [sp, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     3bc:	2300      	movs	r3, #0
     3be:	9302      	str	r3, [sp, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     3c0:	4669      	mov	r1, sp
     3c2:	730b      	strb	r3, [r1, #12]
	config->run_in_standby   = false;
     3c4:	760b      	strb	r3, [r1, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     3c6:	2280      	movs	r2, #128	; 0x80
     3c8:	0392      	lsls	r2, r2, #14
     3ca:	9204      	str	r2, [sp, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     3cc:	2201      	movs	r2, #1
     3ce:	4252      	negs	r2, r2
     3d0:	828a      	strh	r2, [r1, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     3d2:	2224      	movs	r2, #36	; 0x24
     3d4:	548b      	strb	r3, [r1, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     3d6:	930a      	str	r3, [sp, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     3d8:	222c      	movs	r2, #44	; 0x2c
     3da:	548b      	strb	r3, [r1, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     3dc:	222d      	movs	r2, #45	; 0x2d
     3de:	548b      	strb	r3, [r1, r2]
	config->master_scl_low_extend_timeout  = false;
     3e0:	222e      	movs	r2, #46	; 0x2e
     3e2:	548b      	strb	r3, [r1, r2]
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     3e4:	4b18      	ldr	r3, [pc, #96]	; (448 <at30tse_init+0x98>)
     3e6:	466a      	mov	r2, sp
     3e8:	82cb      	strh	r3, [r1, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     3ea:	4b18      	ldr	r3, [pc, #96]	; (44c <at30tse_init+0x9c>)
     3ec:	9307      	str	r3, [sp, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     3ee:	4b18      	ldr	r3, [pc, #96]	; (450 <at30tse_init+0xa0>)
     3f0:	9308      	str	r3, [sp, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     3f2:	4c18      	ldr	r4, [pc, #96]	; (454 <at30tse_init+0xa4>)
     3f4:	1c20      	adds	r0, r4, #0
     3f6:	4918      	ldr	r1, [pc, #96]	; (458 <at30tse_init+0xa8>)
     3f8:	4b18      	ldr	r3, [pc, #96]	; (45c <at30tse_init+0xac>)
     3fa:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3fc:	6824      	ldr	r4, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     3fe:	2207      	movs	r2, #7
     400:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     402:	421a      	tst	r2, r3
     404:	d1fc      	bne.n	400 <at30tse_init+0x50>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     406:	6822      	ldr	r2, [r4, #0]
     408:	2302      	movs	r3, #2
     40a:	4313      	orrs	r3, r2
     40c:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     40e:	4d11      	ldr	r5, [pc, #68]	; (454 <at30tse_init+0xa4>)
     410:	6828      	ldr	r0, [r5, #0]
     412:	4b13      	ldr	r3, [pc, #76]	; (460 <at30tse_init+0xb0>)
     414:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     416:	231f      	movs	r3, #31
     418:	4018      	ands	r0, r3
     41a:	2301      	movs	r3, #1
     41c:	4083      	lsls	r3, r0
     41e:	1c18      	adds	r0, r3, #0
     420:	4b10      	ldr	r3, [pc, #64]	; (464 <at30tse_init+0xb4>)
     422:	6018      	str	r0, [r3, #0]
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     424:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
     426:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     428:	2110      	movs	r1, #16
     42a:	e005      	b.n	438 <at30tse_init+0x88>
		timeout_counter++;
     42c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     42e:	4283      	cmp	r3, r0
     430:	d302      	bcc.n	438 <at30tse_init+0x88>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     432:	2310      	movs	r3, #16
     434:	8363      	strh	r3, [r4, #26]
     436:	e002      	b.n	43e <at30tse_init+0x8e>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     438:	8b62      	ldrh	r2, [r4, #26]
     43a:	420a      	tst	r2, r1
     43c:	d0f6      	beq.n	42c <at30tse_init+0x7c>
	i2c_master_enable(&dev_inst_at30tse75x);
}
     43e:	b00d      	add	sp, #52	; 0x34
     440:	bd30      	pop	{r4, r5, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	00000d48 	.word	0x00000d48
     448:	00002710 	.word	0x00002710
     44c:	00080003 	.word	0x00080003
     450:	00090003 	.word	0x00090003
     454:	20000ca0 	.word	0x20000ca0
     458:	42001000 	.word	0x42001000
     45c:	00000985 	.word	0x00000985
     460:	00004605 	.word	0x00004605
     464:	e000e100 	.word	0xe000e100

00000468 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     46c:	ad07      	add	r5, sp, #28
     46e:	4308      	orrs	r0, r1
     470:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
     472:	2300      	movs	r3, #0
     474:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     476:	a904      	add	r1, sp, #16
     478:	204f      	movs	r0, #79	; 0x4f
     47a:	8008      	strh	r0, [r1, #0]
     47c:	2401      	movs	r4, #1
     47e:	804c      	strh	r4, [r1, #2]
     480:	604d      	str	r5, [r1, #4]
     482:	720b      	strb	r3, [r1, #8]
     484:	724b      	strb	r3, [r1, #9]
     486:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     488:	ac01      	add	r4, sp, #4
     48a:	8020      	strh	r0, [r4, #0]
     48c:	8062      	strh	r2, [r4, #2]
     48e:	9502      	str	r5, [sp, #8]
     490:	7223      	strb	r3, [r4, #8]
     492:	7263      	strb	r3, [r4, #9]
     494:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     496:	4e07      	ldr	r6, [pc, #28]	; (4b4 <at30tse_read_register+0x4c>)
     498:	1c30      	adds	r0, r6, #0
     49a:	4b07      	ldr	r3, [pc, #28]	; (4b8 <at30tse_read_register+0x50>)
     49c:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     49e:	1c30      	adds	r0, r6, #0
     4a0:	1c21      	adds	r1, r4, #0
     4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <at30tse_read_register+0x54>)
     4a4:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     4a6:	7828      	ldrb	r0, [r5, #0]
     4a8:	0200      	lsls	r0, r0, #8
     4aa:	786b      	ldrb	r3, [r5, #1]
     4ac:	4318      	orrs	r0, r3
}
     4ae:	b008      	add	sp, #32
     4b0:	bd70      	pop	{r4, r5, r6, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	20000ca0 	.word	0x20000ca0
     4b8:	00000e65 	.word	0x00000e65
     4bc:	00000e45 	.word	0x00000e45

000004c0 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     4c0:	b510      	push	{r4, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     4c2:	2000      	movs	r0, #0
     4c4:	2100      	movs	r1, #0
     4c6:	2202      	movs	r2, #2
     4c8:	4b2d      	ldr	r3, [pc, #180]	; (580 <at30tse_read_temperature+0xc0>)
     4ca:	4798      	blx	r3
     4cc:	1c01      	adds	r1, r0, #0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
     4ce:	2201      	movs	r2, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     4d0:	0403      	lsls	r3, r0, #16
     4d2:	d502      	bpl.n	4da <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
     4d4:	0440      	lsls	r0, r0, #17
     4d6:	0c41      	lsrs	r1, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
     4d8:	22ff      	movs	r2, #255	; 0xff
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     4da:	4b2a      	ldr	r3, [pc, #168]	; (584 <at30tse_read_temperature+0xc4>)
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	2b01      	cmp	r3, #1
     4e0:	d012      	beq.n	508 <at30tse_read_temperature+0x48>
     4e2:	2b00      	cmp	r3, #0
     4e4:	d004      	beq.n	4f0 <at30tse_read_temperature+0x30>
     4e6:	2b02      	cmp	r3, #2
     4e8:	d01a      	beq.n	520 <at30tse_read_temperature+0x60>
     4ea:	2b03      	cmp	r3, #3
     4ec:	d024      	beq.n	538 <at30tse_read_temperature+0x78>
     4ee:	e02f      	b.n	550 <at30tse_read_temperature+0x90>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
     4f0:	09c9      	lsrs	r1, r1, #7
			temperature = data * sign * 0.5;
     4f2:	b289      	uxth	r1, r1
     4f4:	b252      	sxtb	r2, r2
     4f6:	1c10      	adds	r0, r2, #0
     4f8:	4348      	muls	r0, r1
     4fa:	4b23      	ldr	r3, [pc, #140]	; (588 <at30tse_read_temperature+0xc8>)
     4fc:	4798      	blx	r3
     4fe:	4b17      	ldr	r3, [pc, #92]	; (55c <at30tse_read_temperature+0x9c>)
     500:	4a15      	ldr	r2, [pc, #84]	; (558 <at30tse_read_temperature+0x98>)
     502:	4c22      	ldr	r4, [pc, #136]	; (58c <at30tse_read_temperature+0xcc>)
     504:	47a0      	blx	r4
			break;
     506:	e025      	b.n	554 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
     508:	0989      	lsrs	r1, r1, #6
			temperature = data * sign * 0.25;
     50a:	b289      	uxth	r1, r1
     50c:	b252      	sxtb	r2, r2
     50e:	1c10      	adds	r0, r2, #0
     510:	4348      	muls	r0, r1
     512:	4b1d      	ldr	r3, [pc, #116]	; (588 <at30tse_read_temperature+0xc8>)
     514:	4798      	blx	r3
     516:	4a12      	ldr	r2, [pc, #72]	; (560 <at30tse_read_temperature+0xa0>)
     518:	4b12      	ldr	r3, [pc, #72]	; (564 <at30tse_read_temperature+0xa4>)
     51a:	4c1c      	ldr	r4, [pc, #112]	; (58c <at30tse_read_temperature+0xcc>)
     51c:	47a0      	blx	r4
			break;
     51e:	e019      	b.n	554 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
     520:	0949      	lsrs	r1, r1, #5
			temperature = data * sign * 0.125;
     522:	b289      	uxth	r1, r1
     524:	b252      	sxtb	r2, r2
     526:	1c10      	adds	r0, r2, #0
     528:	4348      	muls	r0, r1
     52a:	4b17      	ldr	r3, [pc, #92]	; (588 <at30tse_read_temperature+0xc8>)
     52c:	4798      	blx	r3
     52e:	4a0e      	ldr	r2, [pc, #56]	; (568 <at30tse_read_temperature+0xa8>)
     530:	4b0e      	ldr	r3, [pc, #56]	; (56c <at30tse_read_temperature+0xac>)
     532:	4c16      	ldr	r4, [pc, #88]	; (58c <at30tse_read_temperature+0xcc>)
     534:	47a0      	blx	r4
			break;
     536:	e00d      	b.n	554 <at30tse_read_temperature+0x94>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
     538:	0909      	lsrs	r1, r1, #4
			temperature = data * sign * 0.0625;
     53a:	b289      	uxth	r1, r1
     53c:	b252      	sxtb	r2, r2
     53e:	1c10      	adds	r0, r2, #0
     540:	4348      	muls	r0, r1
     542:	4b11      	ldr	r3, [pc, #68]	; (588 <at30tse_read_temperature+0xc8>)
     544:	4798      	blx	r3
     546:	4a0a      	ldr	r2, [pc, #40]	; (570 <at30tse_read_temperature+0xb0>)
     548:	4b0a      	ldr	r3, [pc, #40]	; (574 <at30tse_read_temperature+0xb4>)
     54a:	4c10      	ldr	r4, [pc, #64]	; (58c <at30tse_read_temperature+0xcc>)
     54c:	47a0      	blx	r4
			break;
     54e:	e001      	b.n	554 <at30tse_read_temperature+0x94>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
     550:	4809      	ldr	r0, [pc, #36]	; (578 <at30tse_read_temperature+0xb8>)
     552:	490a      	ldr	r1, [pc, #40]	; (57c <at30tse_read_temperature+0xbc>)
			break;
		default:
			break;
	}
	return temperature;
}
     554:	bd10      	pop	{r4, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	00000000 	.word	0x00000000
     55c:	3fe00000 	.word	0x3fe00000
     560:	00000000 	.word	0x00000000
     564:	3fd00000 	.word	0x3fd00000
     568:	00000000 	.word	0x00000000
     56c:	3fc00000 	.word	0x3fc00000
     570:	00000000 	.word	0x00000000
     574:	3fb00000 	.word	0x3fb00000
	...
     580:	00000469 	.word	0x00000469
     584:	20000498 	.word	0x20000498
     588:	00006de5 	.word	0x00006de5
     58c:	000061f5 	.word	0x000061f5

00000590 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     590:	b5f0      	push	{r4, r5, r6, r7, lr}
     592:	465f      	mov	r7, fp
     594:	4656      	mov	r6, sl
     596:	464d      	mov	r5, r9
     598:	4644      	mov	r4, r8
     59a:	b4f0      	push	{r4, r5, r6, r7}
     59c:	b099      	sub	sp, #100	; 0x64
     59e:	1c04      	adds	r4, r0, #0
     5a0:	1c15      	adds	r5, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     5a2:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5a4:	4bb2      	ldr	r3, [pc, #712]	; (870 <adc_init+0x2e0>)
     5a6:	6a18      	ldr	r0, [r3, #32]
     5a8:	2280      	movs	r2, #128	; 0x80
     5aa:	0252      	lsls	r2, r2, #9
     5ac:	4302      	orrs	r2, r0
     5ae:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     5b0:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     5b2:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     5b4:	07da      	lsls	r2, r3, #31
     5b6:	d500      	bpl.n	5ba <adc_init+0x2a>
     5b8:	e1d1      	b.n	95e <adc_init+0x3ce>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     5ba:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     5bc:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     5be:	0799      	lsls	r1, r3, #30
     5c0:	d500      	bpl.n	5c4 <adc_init+0x34>
     5c2:	e1cc      	b.n	95e <adc_init+0x3ce>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     5c4:	786b      	ldrb	r3, [r5, #1]
     5c6:	7123      	strb	r3, [r4, #4]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     5c8:	6822      	ldr	r2, [r4, #0]
     5ca:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     5cc:	782b      	ldrb	r3, [r5, #0]
     5ce:	4668      	mov	r0, sp
     5d0:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     5d2:	201e      	movs	r0, #30
     5d4:	a902      	add	r1, sp, #8
     5d6:	4ba7      	ldr	r3, [pc, #668]	; (874 <adc_init+0x2e4>)
     5d8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     5da:	201e      	movs	r0, #30
     5dc:	4ba6      	ldr	r3, [pc, #664]	; (878 <adc_init+0x2e8>)
     5de:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     5e0:	232c      	movs	r3, #44	; 0x2c
     5e2:	5ceb      	ldrb	r3, [r5, r3]
     5e4:	2b00      	cmp	r3, #0
     5e6:	d042      	beq.n	66e <adc_init+0xde>
		uint8_t offset = config->pin_scan.offset_start_scan;
     5e8:	222b      	movs	r2, #43	; 0x2b
     5ea:	5cae      	ldrb	r6, [r5, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     5ec:	7b29      	ldrb	r1, [r5, #12]
     5ee:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     5f0:	198a      	adds	r2, r1, r6
     5f2:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     5f4:	18d3      	adds	r3, r2, r3
     5f6:	b2db      	uxtb	r3, r3
     5f8:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     5fa:	429a      	cmp	r2, r3
     5fc:	d221      	bcs.n	642 <adc_init+0xb2>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     5fe:	4a9f      	ldr	r2, [pc, #636]	; (87c <adc_init+0x2ec>)
     600:	4693      	mov	fp, r2
     602:	4b9f      	ldr	r3, [pc, #636]	; (880 <adc_init+0x2f0>)
     604:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     606:	270f      	movs	r7, #15
     608:	4037      	ands	r7, r6
     60a:	7b2b      	ldrb	r3, [r5, #12]
     60c:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     60e:	a804      	add	r0, sp, #16
     610:	4659      	mov	r1, fp
     612:	2250      	movs	r2, #80	; 0x50
     614:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     616:	2f13      	cmp	r7, #19
     618:	d80c      	bhi.n	634 <adc_init+0xa4>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     61a:	00bf      	lsls	r7, r7, #2
     61c:	ab04      	add	r3, sp, #16
     61e:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     620:	a903      	add	r1, sp, #12
     622:	2300      	movs	r3, #0
     624:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     626:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     628:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     62a:	2301      	movs	r3, #1
     62c:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     62e:	b2c0      	uxtb	r0, r0
     630:	4a94      	ldr	r2, [pc, #592]	; (884 <adc_init+0x2f4>)
     632:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     634:	3601      	adds	r6, #1
     636:	b2f6      	uxtb	r6, r6
     638:	4640      	mov	r0, r8
     63a:	1983      	adds	r3, r0, r6
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     63c:	b2db      	uxtb	r3, r3
     63e:	4599      	cmp	r9, r3
     640:	d8e1      	bhi.n	606 <adc_init+0x76>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     642:	89ee      	ldrh	r6, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     644:	a804      	add	r0, sp, #16
     646:	498d      	ldr	r1, [pc, #564]	; (87c <adc_init+0x2ec>)
     648:	2250      	movs	r2, #80	; 0x50
     64a:	4b8d      	ldr	r3, [pc, #564]	; (880 <adc_init+0x2f0>)
     64c:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     64e:	2e13      	cmp	r6, #19
     650:	d837      	bhi.n	6c2 <adc_init+0x132>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     652:	00b6      	lsls	r6, r6, #2
     654:	ab04      	add	r3, sp, #16
     656:	58f0      	ldr	r0, [r6, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     658:	a903      	add	r1, sp, #12
     65a:	2300      	movs	r3, #0
     65c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     65e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     660:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     662:	2301      	movs	r3, #1
     664:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     666:	b2c0      	uxtb	r0, r0
     668:	4b86      	ldr	r3, [pc, #536]	; (884 <adc_init+0x2f4>)
     66a:	4798      	blx	r3
     66c:	e029      	b.n	6c2 <adc_init+0x132>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     66e:	7b2e      	ldrb	r6, [r5, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     670:	a804      	add	r0, sp, #16
     672:	4982      	ldr	r1, [pc, #520]	; (87c <adc_init+0x2ec>)
     674:	2250      	movs	r2, #80	; 0x50
     676:	4b82      	ldr	r3, [pc, #520]	; (880 <adc_init+0x2f0>)
     678:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     67a:	2e13      	cmp	r6, #19
     67c:	d80c      	bhi.n	698 <adc_init+0x108>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     67e:	00b6      	lsls	r6, r6, #2
     680:	ab04      	add	r3, sp, #16
     682:	58f0      	ldr	r0, [r6, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     684:	a903      	add	r1, sp, #12
     686:	2300      	movs	r3, #0
     688:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     68a:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     68c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     68e:	2301      	movs	r3, #1
     690:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     692:	b2c0      	uxtb	r0, r0
     694:	4b7b      	ldr	r3, [pc, #492]	; (884 <adc_init+0x2f4>)
     696:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     698:	89ee      	ldrh	r6, [r5, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     69a:	a804      	add	r0, sp, #16
     69c:	4977      	ldr	r1, [pc, #476]	; (87c <adc_init+0x2ec>)
     69e:	2250      	movs	r2, #80	; 0x50
     6a0:	4b77      	ldr	r3, [pc, #476]	; (880 <adc_init+0x2f0>)
     6a2:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     6a4:	2e13      	cmp	r6, #19
     6a6:	d80c      	bhi.n	6c2 <adc_init+0x132>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     6a8:	00b6      	lsls	r6, r6, #2
     6aa:	ab04      	add	r3, sp, #16
     6ac:	58f0      	ldr	r0, [r6, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6ae:	a903      	add	r1, sp, #12
     6b0:	2300      	movs	r3, #0
     6b2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     6b4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6b6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6b8:	2301      	movs	r3, #1
     6ba:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     6bc:	b2c0      	uxtb	r0, r0
     6be:	4b71      	ldr	r3, [pc, #452]	; (884 <adc_init+0x2f4>)
     6c0:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     6c2:	7d6b      	ldrb	r3, [r5, #21]
     6c4:	009b      	lsls	r3, r3, #2
     6c6:	b2db      	uxtb	r3, r3
     6c8:	9901      	ldr	r1, [sp, #4]
     6ca:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     6cc:	7dab      	ldrb	r3, [r5, #22]
     6ce:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     6d0:	786a      	ldrb	r2, [r5, #1]
     6d2:	4313      	orrs	r3, r2
     6d4:	b2db      	uxtb	r3, r3
     6d6:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     6d8:	792b      	ldrb	r3, [r5, #4]
     6da:	2b34      	cmp	r3, #52	; 0x34
     6dc:	d900      	bls.n	6e0 <adc_init+0x150>
     6de:	e13d      	b.n	95c <adc_init+0x3cc>
     6e0:	009b      	lsls	r3, r3, #2
     6e2:	4a69      	ldr	r2, [pc, #420]	; (888 <adc_init+0x2f8>)
     6e4:	58d3      	ldr	r3, [r2, r3]
     6e6:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     6e8:	2102      	movs	r1, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     6ea:	2610      	movs	r6, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     6ec:	2201      	movs	r2, #1
     6ee:	e01a      	b.n	726 <adc_init+0x196>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     6f0:	7c6a      	ldrb	r2, [r5, #17]
		accumulate = config->accumulate_samples;
     6f2:	7c29      	ldrb	r1, [r5, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     6f4:	2610      	movs	r6, #16
     6f6:	e016      	b.n	726 <adc_init+0x196>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     6f8:	2106      	movs	r1, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     6fa:	2610      	movs	r6, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     6fc:	2201      	movs	r2, #1
     6fe:	e012      	b.n	726 <adc_init+0x196>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     700:	2108      	movs	r1, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     702:	2610      	movs	r6, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     704:	2200      	movs	r2, #0
     706:	e00e      	b.n	726 <adc_init+0x196>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     708:	2100      	movs	r1, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     70a:	2630      	movs	r6, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     70c:	2200      	movs	r2, #0
     70e:	e00a      	b.n	726 <adc_init+0x196>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     710:	2100      	movs	r1, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     712:	2620      	movs	r6, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     714:	2200      	movs	r2, #0
     716:	e006      	b.n	726 <adc_init+0x196>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     718:	2100      	movs	r1, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     71a:	2600      	movs	r6, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     71c:	2200      	movs	r2, #0
     71e:	e002      	b.n	726 <adc_init+0x196>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     720:	2104      	movs	r1, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     722:	2610      	movs	r6, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     724:	2202      	movs	r2, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     726:	0112      	lsls	r2, r2, #4
     728:	2370      	movs	r3, #112	; 0x70
     72a:	4013      	ands	r3, r2
     72c:	430b      	orrs	r3, r1
     72e:	9a01      	ldr	r2, [sp, #4]
     730:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     732:	7deb      	ldrb	r3, [r5, #23]
		return STATUS_ERR_INVALID_ARG;
     734:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     736:	2b3f      	cmp	r3, #63	; 0x3f
     738:	d900      	bls.n	73c <adc_init+0x1ac>
     73a:	e110      	b.n	95e <adc_init+0x3ce>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     73c:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     73e:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     740:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     742:	b25b      	sxtb	r3, r3
     744:	2b00      	cmp	r3, #0
     746:	dbfb      	blt.n	740 <adc_init+0x1b0>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     748:	7cea      	ldrb	r2, [r5, #19]
     74a:	886b      	ldrh	r3, [r5, #2]
     74c:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     74e:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     750:	5caa      	ldrb	r2, [r5, r2]
     752:	00d2      	lsls	r2, r2, #3
     754:	4313      	orrs	r3, r2
     756:	7d2a      	ldrb	r2, [r5, #20]
     758:	0092      	lsls	r2, r2, #2
     75a:	4313      	orrs	r3, r2
     75c:	7caa      	ldrb	r2, [r5, #18]
     75e:	0052      	lsls	r2, r2, #1
     760:	4313      	orrs	r3, r2
     762:	4333      	orrs	r3, r6
     764:	9801      	ldr	r0, [sp, #4]
     766:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     768:	7e2b      	ldrb	r3, [r5, #24]
     76a:	2b00      	cmp	r3, #0
     76c:	d101      	bne.n	772 <adc_init+0x1e2>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     76e:	6821      	ldr	r1, [r4, #0]
     770:	e094      	b.n	89c <adc_init+0x30c>
		switch (resolution) {
     772:	2e10      	cmp	r6, #16
     774:	d05b      	beq.n	82e <adc_init+0x29e>
     776:	d802      	bhi.n	77e <adc_init+0x1ee>
     778:	2e00      	cmp	r6, #0
     77a:	d038      	beq.n	7ee <adc_init+0x25e>
     77c:	e7f7      	b.n	76e <adc_init+0x1de>
     77e:	2e20      	cmp	r6, #32
     780:	d019      	beq.n	7b6 <adc_init+0x226>
     782:	2e30      	cmp	r6, #48	; 0x30
     784:	d1f3      	bne.n	76e <adc_init+0x1de>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     786:	7cea      	ldrb	r2, [r5, #19]
     788:	2a00      	cmp	r2, #0
     78a:	d00a      	beq.n	7a2 <adc_init+0x212>
					(config->window.window_lower_value > 127 ||
     78c:	69ea      	ldr	r2, [r5, #28]
     78e:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     790:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     792:	2aff      	cmp	r2, #255	; 0xff
     794:	d900      	bls.n	798 <adc_init+0x208>
     796:	e0e2      	b.n	95e <adc_init+0x3ce>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     798:	6a2a      	ldr	r2, [r5, #32]
     79a:	3280      	adds	r2, #128	; 0x80
     79c:	2aff      	cmp	r2, #255	; 0xff
     79e:	d900      	bls.n	7a2 <adc_init+0x212>
     7a0:	e0dd      	b.n	95e <adc_init+0x3ce>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7a2:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     7a4:	69e9      	ldr	r1, [r5, #28]
     7a6:	29ff      	cmp	r1, #255	; 0xff
     7a8:	dd00      	ble.n	7ac <adc_init+0x21c>
     7aa:	e0d8      	b.n	95e <adc_init+0x3ce>
     7ac:	6a2a      	ldr	r2, [r5, #32]
     7ae:	2aff      	cmp	r2, #255	; 0xff
     7b0:	dd00      	ble.n	7b4 <adc_init+0x224>
     7b2:	e0d4      	b.n	95e <adc_init+0x3ce>
     7b4:	e7db      	b.n	76e <adc_init+0x1de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     7b6:	7cea      	ldrb	r2, [r5, #19]
     7b8:	2a00      	cmp	r2, #0
     7ba:	d00d      	beq.n	7d8 <adc_init+0x248>
					(config->window.window_lower_value > 511 ||
     7bc:	69e8      	ldr	r0, [r5, #28]
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0092      	lsls	r2, r2, #2
     7c2:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7c4:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     7c6:	4a31      	ldr	r2, [pc, #196]	; (88c <adc_init+0x2fc>)
     7c8:	4291      	cmp	r1, r2
     7ca:	d900      	bls.n	7ce <adc_init+0x23e>
     7cc:	e0c7      	b.n	95e <adc_init+0x3ce>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     7ce:	4a30      	ldr	r2, [pc, #192]	; (890 <adc_init+0x300>)
     7d0:	6a29      	ldr	r1, [r5, #32]
     7d2:	4291      	cmp	r1, r2
     7d4:	db00      	blt.n	7d8 <adc_init+0x248>
     7d6:	e0c2      	b.n	95e <adc_init+0x3ce>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7d8:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     7da:	4a2c      	ldr	r2, [pc, #176]	; (88c <adc_init+0x2fc>)
     7dc:	69e9      	ldr	r1, [r5, #28]
     7de:	4291      	cmp	r1, r2
     7e0:	dd00      	ble.n	7e4 <adc_init+0x254>
     7e2:	e0bc      	b.n	95e <adc_init+0x3ce>
     7e4:	6a29      	ldr	r1, [r5, #32]
     7e6:	4291      	cmp	r1, r2
     7e8:	dd00      	ble.n	7ec <adc_init+0x25c>
     7ea:	e0b8      	b.n	95e <adc_init+0x3ce>
     7ec:	e7bf      	b.n	76e <adc_init+0x1de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     7ee:	7cea      	ldrb	r2, [r5, #19]
     7f0:	2a00      	cmp	r2, #0
     7f2:	d011      	beq.n	818 <adc_init+0x288>
					(config->window.window_lower_value > 2047 ||
     7f4:	69ea      	ldr	r2, [r5, #28]
     7f6:	2080      	movs	r0, #128	; 0x80
     7f8:	0100      	lsls	r0, r0, #4
     7fa:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     7fc:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     7fe:	4a25      	ldr	r2, [pc, #148]	; (894 <adc_init+0x304>)
     800:	4291      	cmp	r1, r2
     802:	d900      	bls.n	806 <adc_init+0x276>
     804:	e0ab      	b.n	95e <adc_init+0x3ce>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     806:	6a2a      	ldr	r2, [r5, #32]
     808:	2080      	movs	r0, #128	; 0x80
     80a:	0100      	lsls	r0, r0, #4
     80c:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     80e:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     810:	4a20      	ldr	r2, [pc, #128]	; (894 <adc_init+0x304>)
     812:	4291      	cmp	r1, r2
     814:	d900      	bls.n	818 <adc_init+0x288>
     816:	e0a2      	b.n	95e <adc_init+0x3ce>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     818:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     81a:	4a1e      	ldr	r2, [pc, #120]	; (894 <adc_init+0x304>)
     81c:	69e9      	ldr	r1, [r5, #28]
     81e:	4291      	cmp	r1, r2
     820:	dd00      	ble.n	824 <adc_init+0x294>
     822:	e09c      	b.n	95e <adc_init+0x3ce>
     824:	6a29      	ldr	r1, [r5, #32]
     826:	4291      	cmp	r1, r2
     828:	dd00      	ble.n	82c <adc_init+0x29c>
     82a:	e098      	b.n	95e <adc_init+0x3ce>
     82c:	e79f      	b.n	76e <adc_init+0x1de>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     82e:	7cea      	ldrb	r2, [r5, #19]
     830:	2a00      	cmp	r2, #0
     832:	d011      	beq.n	858 <adc_init+0x2c8>
					(config->window.window_lower_value > 32767 ||
     834:	69ea      	ldr	r2, [r5, #28]
     836:	2080      	movs	r0, #128	; 0x80
     838:	0200      	lsls	r0, r0, #8
     83a:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     83c:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     83e:	4a16      	ldr	r2, [pc, #88]	; (898 <adc_init+0x308>)
     840:	4291      	cmp	r1, r2
     842:	d900      	bls.n	846 <adc_init+0x2b6>
     844:	e08b      	b.n	95e <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     846:	6a2a      	ldr	r2, [r5, #32]
     848:	2080      	movs	r0, #128	; 0x80
     84a:	0200      	lsls	r0, r0, #8
     84c:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     84e:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     850:	4a11      	ldr	r2, [pc, #68]	; (898 <adc_init+0x308>)
     852:	4291      	cmp	r1, r2
     854:	d900      	bls.n	858 <adc_init+0x2c8>
     856:	e082      	b.n	95e <adc_init+0x3ce>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     858:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     85a:	4a0f      	ldr	r2, [pc, #60]	; (898 <adc_init+0x308>)
     85c:	69e9      	ldr	r1, [r5, #28]
     85e:	4291      	cmp	r1, r2
     860:	dd00      	ble.n	864 <adc_init+0x2d4>
     862:	e07c      	b.n	95e <adc_init+0x3ce>
     864:	6a29      	ldr	r1, [r5, #32]
     866:	4291      	cmp	r1, r2
     868:	dd00      	ble.n	86c <adc_init+0x2dc>
     86a:	e078      	b.n	95e <adc_init+0x3ce>
     86c:	e77f      	b.n	76e <adc_init+0x1de>
     86e:	46c0      	nop			; (mov r8, r8)
     870:	40000400 	.word	0x40000400
     874:	00004fa1 	.word	0x00004fa1
     878:	00004f15 	.word	0x00004f15
     87c:	00008920 	.word	0x00008920
     880:	0000725d 	.word	0x0000725d
     884:	0000507d 	.word	0x0000507d
     888:	0000884c 	.word	0x0000884c
     88c:	000003ff 	.word	0x000003ff
     890:	fffffe01 	.word	0xfffffe01
     894:	00000fff 	.word	0x00000fff
     898:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     89c:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     89e:	b252      	sxtb	r2, r2
     8a0:	2a00      	cmp	r2, #0
     8a2:	dbfb      	blt.n	89c <adc_init+0x30c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     8a4:	9a01      	ldr	r2, [sp, #4]
     8a6:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     8a8:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8aa:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     8ac:	b25b      	sxtb	r3, r3
     8ae:	2b00      	cmp	r3, #0
     8b0:	dbfb      	blt.n	8aa <adc_init+0x31a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     8b2:	8bab      	ldrh	r3, [r5, #28]
     8b4:	9801      	ldr	r0, [sp, #4]
     8b6:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     8b8:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8ba:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     8bc:	b25b      	sxtb	r3, r3
     8be:	2b00      	cmp	r3, #0
     8c0:	dbfb      	blt.n	8ba <adc_init+0x32a>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     8c2:	8c2b      	ldrh	r3, [r5, #32]
     8c4:	9901      	ldr	r1, [sp, #4]
     8c6:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     8c8:	232c      	movs	r3, #44	; 0x2c
     8ca:	5ceb      	ldrb	r3, [r5, r3]
	if (inputs_to_scan > 0) {
     8cc:	2b00      	cmp	r3, #0
     8ce:	d004      	beq.n	8da <adc_init+0x34a>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     8d0:	3b01      	subs	r3, #1
     8d2:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     8d4:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     8d6:	2b0f      	cmp	r3, #15
     8d8:	d841      	bhi.n	95e <adc_init+0x3ce>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     8da:	222b      	movs	r2, #43	; 0x2b
     8dc:	5caa      	ldrb	r2, [r5, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     8de:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     8e0:	2a0f      	cmp	r2, #15
     8e2:	d83c      	bhi.n	95e <adc_init+0x3ce>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     8e4:	6821      	ldr	r1, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     8e6:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     8e8:	b240      	sxtb	r0, r0
     8ea:	2800      	cmp	r0, #0
     8ec:	dbfb      	blt.n	8e6 <adc_init+0x356>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     8ee:	89e8      	ldrh	r0, [r5, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     8f0:	7b29      	ldrb	r1, [r5, #12]
			config->gain_factor |
     8f2:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     8f4:	68a8      	ldr	r0, [r5, #8]
     8f6:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     8f8:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     8fa:	430a      	orrs	r2, r1
     8fc:	041b      	lsls	r3, r3, #16
			config->negative_input |
     8fe:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     900:	9901      	ldr	r1, [sp, #4]
     902:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     904:	232a      	movs	r3, #42	; 0x2a
     906:	5ceb      	ldrb	r3, [r5, r3]
     908:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     90a:	230f      	movs	r3, #15
     90c:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     90e:	2324      	movs	r3, #36	; 0x24
     910:	5ceb      	ldrb	r3, [r5, r3]
     912:	2b00      	cmp	r3, #0
     914:	d010      	beq.n	938 <adc_init+0x3a8>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     916:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     918:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     91a:	4a14      	ldr	r2, [pc, #80]	; (96c <adc_init+0x3dc>)
     91c:	4293      	cmp	r3, r2
     91e:	d81e      	bhi.n	95e <adc_init+0x3ce>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     920:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     922:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
     924:	2080      	movs	r0, #128	; 0x80
     926:	0100      	lsls	r0, r0, #4
     928:	1819      	adds	r1, r3, r0
     92a:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     92c:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     92e:	4a0f      	ldr	r2, [pc, #60]	; (96c <adc_init+0x3dc>)
     930:	4291      	cmp	r1, r2
     932:	d814      	bhi.n	95e <adc_init+0x3ce>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     934:	9901      	ldr	r1, [sp, #4]
     936:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     938:	4b0d      	ldr	r3, [pc, #52]	; (970 <adc_init+0x3e0>)
     93a:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     93c:	0152      	lsls	r2, r2, #5
     93e:	23e0      	movs	r3, #224	; 0xe0
     940:	00db      	lsls	r3, r3, #3
     942:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     944:	4b0b      	ldr	r3, [pc, #44]	; (974 <adc_init+0x3e4>)
     946:	6858      	ldr	r0, [r3, #4]
     948:	0141      	lsls	r1, r0, #5
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	0edb      	lsrs	r3, r3, #27
     94e:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     950:	b2db      	uxtb	r3, r3
     952:	4313      	orrs	r3, r2
     954:	9901      	ldr	r1, [sp, #4]
     956:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     958:	2000      	movs	r0, #0
     95a:	e000      	b.n	95e <adc_init+0x3ce>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     95c:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     95e:	b019      	add	sp, #100	; 0x64
     960:	bc3c      	pop	{r2, r3, r4, r5}
     962:	4690      	mov	r8, r2
     964:	4699      	mov	r9, r3
     966:	46a2      	mov	sl, r4
     968:	46ab      	mov	fp, r5
     96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     96c:	00000fff 	.word	0x00000fff
     970:	00806024 	.word	0x00806024
     974:	00806020 	.word	0x00806020

00000978 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     978:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     97a:	2207      	movs	r2, #7
     97c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     97e:	421a      	tst	r2, r3
     980:	d1fc      	bne.n	97c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     982:	4770      	bx	lr

00000984 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     984:	b5f0      	push	{r4, r5, r6, r7, lr}
     986:	4647      	mov	r7, r8
     988:	b480      	push	{r7}
     98a:	b082      	sub	sp, #8
     98c:	1c07      	adds	r7, r0, #0
     98e:	1c0c      	adds	r4, r1, #0
     990:	1c15      	adds	r5, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     992:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     994:	1c08      	adds	r0, r1, #0
     996:	4b66      	ldr	r3, [pc, #408]	; (b30 <i2c_master_init+0x1ac>)
     998:	4798      	blx	r3
     99a:	1c06      	adds	r6, r0, #0
     99c:	4b65      	ldr	r3, [pc, #404]	; (b34 <i2c_master_init+0x1b0>)
     99e:	6a19      	ldr	r1, [r3, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     9a0:	1c82      	adds	r2, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     9a2:	2001      	movs	r0, #1
     9a4:	4090      	lsls	r0, r2
     9a6:	1c02      	adds	r2, r0, #0
     9a8:	430a      	orrs	r2, r1
     9aa:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     9ac:	a901      	add	r1, sp, #4
     9ae:	7b2b      	ldrb	r3, [r5, #12]
     9b0:	700b      	strb	r3, [r1, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9b2:	3614      	adds	r6, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     9b4:	b2f6      	uxtb	r6, r6
     9b6:	1c30      	adds	r0, r6, #0
     9b8:	4b5f      	ldr	r3, [pc, #380]	; (b38 <i2c_master_init+0x1b4>)
     9ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     9bc:	1c30      	adds	r0, r6, #0
     9be:	4b5f      	ldr	r3, [pc, #380]	; (b3c <i2c_master_init+0x1b8>)
     9c0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     9c2:	7b28      	ldrb	r0, [r5, #12]
     9c4:	2100      	movs	r1, #0
     9c6:	4b5e      	ldr	r3, [pc, #376]	; (b40 <i2c_master_init+0x1bc>)
     9c8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     9ca:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     9cc:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     9ce:	079a      	lsls	r2, r3, #30
     9d0:	d500      	bpl.n	9d4 <i2c_master_init+0x50>
     9d2:	e0a9      	b.n	b28 <i2c_master_init+0x1a4>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     9d4:	6823      	ldr	r3, [r4, #0]
		return STATUS_BUSY;
     9d6:	2005      	movs	r0, #5
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     9d8:	07da      	lsls	r2, r3, #31
     9da:	d500      	bpl.n	9de <i2c_master_init+0x5a>
     9dc:	e0a4      	b.n	b28 <i2c_master_init+0x1a4>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     9de:	6838      	ldr	r0, [r7, #0]
     9e0:	4b53      	ldr	r3, [pc, #332]	; (b30 <i2c_master_init+0x1ac>)
     9e2:	4698      	mov	r8, r3
     9e4:	4798      	blx	r3
     9e6:	1c06      	adds	r6, r0, #0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     9e8:	4956      	ldr	r1, [pc, #344]	; (b44 <i2c_master_init+0x1c0>)
     9ea:	4b57      	ldr	r3, [pc, #348]	; (b48 <i2c_master_init+0x1c4>)
     9ec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     9ee:	00b6      	lsls	r6, r6, #2
     9f0:	4b56      	ldr	r3, [pc, #344]	; (b4c <i2c_master_init+0x1c8>)
     9f2:	50f7      	str	r7, [r6, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
     9f4:	2300      	movs	r3, #0
     9f6:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     9f8:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     9fa:	2600      	movs	r6, #0
     9fc:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     9fe:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
     a00:	2225      	movs	r2, #37	; 0x25
     a02:	54be      	strb	r6, [r7, r2]
	module->buffer = NULL;
     a04:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;
     a06:	2314      	movs	r3, #20
     a08:	6023      	str	r3, [r4, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a0a:	683c      	ldr	r4, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     a0c:	1c20      	adds	r0, r4, #0
     a0e:	47c0      	blx	r8
     a10:	4680      	mov	r8, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a12:	2380      	movs	r3, #128	; 0x80
     a14:	466a      	mov	r2, sp
     a16:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a18:	7056      	strb	r6, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a1a:	2301      	movs	r3, #1
     a1c:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     a1e:	70d6      	strb	r6, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
     a20:	69e8      	ldr	r0, [r5, #28]
	uint32_t pad1 = config->pinmux_pad1;
     a22:	6a2e      	ldr	r6, [r5, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
     a24:	2800      	cmp	r0, #0
     a26:	d103      	bne.n	a30 <i2c_master_init+0xac>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     a28:	1c20      	adds	r0, r4, #0
     a2a:	2100      	movs	r1, #0
     a2c:	4b48      	ldr	r3, [pc, #288]	; (b50 <i2c_master_init+0x1cc>)
     a2e:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
     a30:	466b      	mov	r3, sp
     a32:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a34:	2202      	movs	r2, #2
     a36:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     a38:	0c03      	lsrs	r3, r0, #16
     a3a:	b2d8      	uxtb	r0, r3
     a3c:	4669      	mov	r1, sp
     a3e:	4b45      	ldr	r3, [pc, #276]	; (b54 <i2c_master_init+0x1d0>)
     a40:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
     a42:	2e00      	cmp	r6, #0
     a44:	d104      	bne.n	a50 <i2c_master_init+0xcc>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     a46:	1c20      	adds	r0, r4, #0
     a48:	2101      	movs	r1, #1
     a4a:	4b41      	ldr	r3, [pc, #260]	; (b50 <i2c_master_init+0x1cc>)
     a4c:	4798      	blx	r3
     a4e:	1c06      	adds	r6, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
     a50:	466a      	mov	r2, sp
     a52:	7016      	strb	r6, [r2, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     a54:	2302      	movs	r3, #2
     a56:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     a58:	0c36      	lsrs	r6, r6, #16
     a5a:	b2f0      	uxtb	r0, r6
     a5c:	4669      	mov	r1, sp
     a5e:	4b3d      	ldr	r3, [pc, #244]	; (b54 <i2c_master_init+0x1d0>)
     a60:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     a62:	8aab      	ldrh	r3, [r5, #20]
     a64:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
     a66:	8aeb      	ldrh	r3, [r5, #22]
     a68:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a6a:	7e2a      	ldrb	r2, [r5, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     a6c:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a6e:	2a00      	cmp	r2, #0
     a70:	d104      	bne.n	a7c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a72:	4b39      	ldr	r3, [pc, #228]	; (b58 <i2c_master_init+0x1d4>)
     a74:	789b      	ldrb	r3, [r3, #2]
     a76:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
     a78:	0fdb      	lsrs	r3, r3, #31
     a7a:	01db      	lsls	r3, r3, #7
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
     a7c:	692a      	ldr	r2, [r5, #16]
     a7e:	2a00      	cmp	r2, #0
     a80:	d000      	beq.n	a84 <i2c_master_init+0x100>
		tmp_ctrla |= config->start_hold_time;
     a82:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
     a84:	68aa      	ldr	r2, [r5, #8]
     a86:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
     a88:	2224      	movs	r2, #36	; 0x24
     a8a:	5caa      	ldrb	r2, [r5, r2]
     a8c:	2a00      	cmp	r2, #0
     a8e:	d002      	beq.n	a96 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     a90:	2280      	movs	r2, #128	; 0x80
     a92:	05d2      	lsls	r2, r2, #23
     a94:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
     a96:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a98:	2a00      	cmp	r2, #0
     a9a:	d000      	beq.n	a9e <i2c_master_init+0x11a>
		tmp_ctrla |= config->inactive_timeout;
     a9c:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
     a9e:	222c      	movs	r2, #44	; 0x2c
     aa0:	5caa      	ldrb	r2, [r5, r2]
     aa2:	2a00      	cmp	r2, #0
     aa4:	d002      	beq.n	aac <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	0512      	lsls	r2, r2, #20
     aaa:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
     aac:	222d      	movs	r2, #45	; 0x2d
     aae:	5caa      	ldrb	r2, [r5, r2]
     ab0:	2a00      	cmp	r2, #0
     ab2:	d002      	beq.n	aba <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     ab4:	2280      	movs	r2, #128	; 0x80
     ab6:	0412      	lsls	r2, r2, #16
     ab8:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     aba:	222e      	movs	r2, #46	; 0x2e
     abc:	5caa      	ldrb	r2, [r5, r2]
     abe:	2a00      	cmp	r2, #0
     ac0:	d002      	beq.n	ac8 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     ac2:	2280      	movs	r2, #128	; 0x80
     ac4:	03d2      	lsls	r2, r2, #15
     ac6:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     ac8:	6822      	ldr	r2, [r4, #0]
     aca:	4313      	orrs	r3, r2
     acc:	6023      	str	r3, [r4, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ace:	2380      	movs	r3, #128	; 0x80
     ad0:	005b      	lsls	r3, r3, #1
     ad2:	6063      	str	r3, [r4, #4]

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     ad4:	4646      	mov	r6, r8
     ad6:	3614      	adds	r6, #20
     ad8:	b2f6      	uxtb	r6, r6
     ada:	1c30      	adds	r0, r6, #0
     adc:	4b1f      	ldr	r3, [pc, #124]	; (b5c <i2c_master_init+0x1d8>)
     ade:	4798      	blx	r3
     ae0:	21fa      	movs	r1, #250	; 0xfa
     ae2:	00c9      	lsls	r1, r1, #3
     ae4:	682b      	ldr	r3, [r5, #0]
     ae6:	4359      	muls	r1, r3
     ae8:	1e4b      	subs	r3, r1, #1
     aea:	1818      	adds	r0, r3, r0
     aec:	4b1c      	ldr	r3, [pc, #112]	; (b60 <i2c_master_init+0x1dc>)
     aee:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     af0:	1f47      	subs	r7, r0, #5

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     af2:	2fff      	cmp	r7, #255	; 0xff
     af4:	d80d      	bhi.n	b12 <i2c_master_init+0x18e>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     af6:	1c30      	adds	r0, r6, #0
     af8:	4b18      	ldr	r3, [pc, #96]	; (b5c <i2c_master_init+0x1d8>)
     afa:	4798      	blx	r3
     afc:	686b      	ldr	r3, [r5, #4]
     afe:	21fa      	movs	r1, #250	; 0xfa
     b00:	00c9      	lsls	r1, r1, #3
     b02:	4359      	muls	r1, r3
     b04:	1e4b      	subs	r3, r1, #1
     b06:	1818      	adds	r0, r3, r0
     b08:	4b15      	ldr	r3, [pc, #84]	; (b60 <i2c_master_init+0x1dc>)
     b0a:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     b0c:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     b0e:	28ff      	cmp	r0, #255	; 0xff
     b10:	d901      	bls.n	b16 <i2c_master_init+0x192>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     b12:	2040      	movs	r0, #64	; 0x40
     b14:	e008      	b.n	b28 <i2c_master_init+0x1a4>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     b16:	0400      	lsls	r0, r0, #16
     b18:	23ff      	movs	r3, #255	; 0xff
     b1a:	041b      	lsls	r3, r3, #16
     b1c:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     b1e:	23ff      	movs	r3, #255	; 0xff
     b20:	401f      	ands	r7, r3
     b22:	4307      	orrs	r7, r0
     b24:	60e7      	str	r7, [r4, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     b26:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE_I2C_MASTER;

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     b28:	b002      	add	sp, #8
     b2a:	bc04      	pop	{r2}
     b2c:	4690      	mov	r8, r2
     b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b30:	0000458d 	.word	0x0000458d
     b34:	40000400 	.word	0x40000400
     b38:	00004fa1 	.word	0x00004fa1
     b3c:	00004f15 	.word	0x00004f15
     b40:	000043b1 	.word	0x000043b1
     b44:	00000f45 	.word	0x00000f45
     b48:	000045c9 	.word	0x000045c9
     b4c:	20000dc8 	.word	0x20000dc8
     b50:	00004401 	.word	0x00004401
     b54:	0000507d 	.word	0x0000507d
     b58:	41002000 	.word	0x41002000
     b5c:	00004fbd 	.word	0x00004fbd
     b60:	000059c9 	.word	0x000059c9

00000b64 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b64:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     b66:	7e1a      	ldrb	r2, [r3, #24]
     b68:	0791      	lsls	r1, r2, #30
     b6a:	d506      	bpl.n	b7a <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     b6c:	2202      	movs	r2, #2
     b6e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     b70:	8b5b      	ldrh	r3, [r3, #26]
     b72:	079a      	lsls	r2, r3, #30
     b74:	d50b      	bpl.n	b8e <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     b76:	2041      	movs	r0, #65	; 0x41
     b78:	e00c      	b.n	b94 <_i2c_master_address_response+0x30>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     b7a:	8b5a      	ldrh	r2, [r3, #26]
     b7c:	0751      	lsls	r1, r2, #29
     b7e:	d508      	bpl.n	b92 <_i2c_master_address_response+0x2e>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     b80:	6859      	ldr	r1, [r3, #4]
     b82:	22c0      	movs	r2, #192	; 0xc0
     b84:	0292      	lsls	r2, r2, #10
     b86:	430a      	orrs	r2, r1
     b88:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
     b8a:	2018      	movs	r0, #24
     b8c:	e002      	b.n	b94 <_i2c_master_address_response+0x30>
	}

	return STATUS_OK;
     b8e:	2000      	movs	r0, #0
     b90:	e000      	b.n	b94 <_i2c_master_address_response+0x30>
     b92:	2000      	movs	r0, #0
}
     b94:	4770      	bx	lr
     b96:	46c0      	nop			; (mov r8, r8)

00000b98 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     b98:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     b9a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     b9c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     b9e:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     ba0:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     ba2:	e004      	b.n	bae <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     ba4:	3301      	adds	r3, #1
     ba6:	b29b      	uxth	r3, r3
     ba8:	8901      	ldrh	r1, [r0, #8]
     baa:	4299      	cmp	r1, r3
     bac:	d907      	bls.n	bbe <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     bae:	7e11      	ldrb	r1, [r2, #24]
     bb0:	4221      	tst	r1, r4
     bb2:	d106      	bne.n	bc2 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     bb4:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     bb6:	4229      	tst	r1, r5
     bb8:	d0f4      	beq.n	ba4 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
     bba:	2000      	movs	r0, #0
     bbc:	e002      	b.n	bc4 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
     bbe:	2012      	movs	r0, #18
     bc0:	e000      	b.n	bc4 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
     bc2:	2000      	movs	r0, #0
}
     bc4:	bd30      	pop	{r4, r5, pc}
     bc6:	46c0      	nop			; (mov r8, r8)

00000bc8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen.
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     bc8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     bcc:	6862      	ldr	r2, [r4, #4]
     bce:	2380      	movs	r3, #128	; 0x80
     bd0:	02db      	lsls	r3, r3, #11
     bd2:	4313      	orrs	r3, r2
     bd4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     bd6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     bd8:	4b02      	ldr	r3, [pc, #8]	; (be4 <_i2c_master_send_hs_master_code+0x1c>)
     bda:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     bdc:	2301      	movs	r3, #1
     bde:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000b99 	.word	0x00000b99

00000be8 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	465f      	mov	r7, fp
     bec:	4656      	mov	r6, sl
     bee:	464d      	mov	r5, r9
     bf0:	4644      	mov	r4, r8
     bf2:	b4f0      	push	{r4, r5, r6, r7}
     bf4:	b083      	sub	sp, #12
     bf6:	1c06      	adds	r6, r0, #0
     bf8:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     bfa:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     bfc:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     bfe:	682b      	ldr	r3, [r5, #0]
     c00:	011b      	lsls	r3, r3, #4
     c02:	0fdb      	lsrs	r3, r3, #31
     c04:	4699      	mov	r9, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     c06:	7a4b      	ldrb	r3, [r1, #9]
     c08:	2b00      	cmp	r3, #0
     c0a:	d002      	beq.n	c12 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     c0c:	7a89      	ldrb	r1, [r1, #10]
     c0e:	4b4a      	ldr	r3, [pc, #296]	; (d38 <_i2c_master_read_packet+0x150>)
     c10:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c12:	686a      	ldr	r2, [r5, #4]
     c14:	4b49      	ldr	r3, [pc, #292]	; (d3c <_i2c_master_read_packet+0x154>)
     c16:	4013      	ands	r3, r2
     c18:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     c1a:	7a3b      	ldrb	r3, [r7, #8]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d022      	beq.n	c66 <_i2c_master_read_packet+0x7e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c20:	7a7a      	ldrb	r2, [r7, #9]
     c22:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     c24:	883b      	ldrh	r3, [r7, #0]
     c26:	005b      	lsls	r3, r3, #1
     c28:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c2a:	2280      	movs	r2, #128	; 0x80
     c2c:	0212      	lsls	r2, r2, #8
     c2e:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     c30:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     c32:	1c30      	adds	r0, r6, #0
     c34:	4b42      	ldr	r3, [pc, #264]	; (d40 <_i2c_master_read_packet+0x158>)
     c36:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c38:	686a      	ldr	r2, [r5, #4]
     c3a:	4b40      	ldr	r3, [pc, #256]	; (d3c <_i2c_master_read_packet+0x154>)
     c3c:	4013      	ands	r3, r2
     c3e:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     c40:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     c42:	d170      	bne.n	d26 <_i2c_master_read_packet+0x13e>
			tmp_status = _i2c_master_address_response(module);
     c44:	1c30      	adds	r0, r6, #0
     c46:	4b3f      	ldr	r3, [pc, #252]	; (d44 <_i2c_master_read_packet+0x15c>)
     c48:	4798      	blx	r3
     c4a:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     c4c:	d16b      	bne.n	d26 <_i2c_master_read_packet+0x13e>
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c4e:	7a7b      	ldrb	r3, [r7, #9]
     c50:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c52:	2201      	movs	r2, #1
     c54:	4313      	orrs	r3, r2
     c56:	883a      	ldrh	r2, [r7, #0]
     c58:	0a12      	lsrs	r2, r2, #8
     c5a:	2178      	movs	r1, #120	; 0x78
     c5c:	430a      	orrs	r2, r1
     c5e:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     c60:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to “11110 address[9:8] 1”.
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     c62:	626b      	str	r3, [r5, #36]	; 0x24
     c64:	e007      	b.n	c76 <_i2c_master_read_packet+0x8e>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c66:	883a      	ldrh	r2, [r7, #0]
     c68:	0052      	lsls	r2, r2, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     c6a:	7a7b      	ldrb	r3, [r7, #9]
     c6c:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     c6e:	4313      	orrs	r3, r2
     c70:	2201      	movs	r2, #1
     c72:	4313      	orrs	r3, r2
     c74:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c76:	1c30      	adds	r0, r6, #0
     c78:	4b31      	ldr	r3, [pc, #196]	; (d40 <_i2c_master_read_packet+0x158>)
     c7a:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c7c:	686a      	ldr	r2, [r5, #4]
     c7e:	4b2f      	ldr	r3, [pc, #188]	; (d3c <_i2c_master_read_packet+0x154>)
     c80:	4013      	ands	r3, r2
     c82:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     c84:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     c86:	d14e      	bne.n	d26 <_i2c_master_read_packet+0x13e>
		tmp_status = _i2c_master_address_response(module);
     c88:	1c30      	adds	r0, r6, #0
     c8a:	4b2e      	ldr	r3, [pc, #184]	; (d44 <_i2c_master_read_packet+0x15c>)
     c8c:	4798      	blx	r3
     c8e:	9001      	str	r0, [sp, #4]
     c90:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     c92:	d148      	bne.n	d26 <_i2c_master_read_packet+0x13e>
     c94:	3c01      	subs	r4, #1
     c96:	b2a4      	uxth	r4, r4
     c98:	2100      	movs	r1, #0
     c9a:	4688      	mov	r8, r1
		/* Read data buffer. */
		while (tmp_data_length--) {
     c9c:	4a2a      	ldr	r2, [pc, #168]	; (d48 <_i2c_master_read_packet+0x160>)
     c9e:	4693      	mov	fp, r2
     ca0:	e026      	b.n	cf0 <_i2c_master_read_packet+0x108>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     ca2:	8b6b      	ldrh	r3, [r5, #26]
     ca4:	0699      	lsls	r1, r3, #26
     ca6:	d53d      	bpl.n	d24 <_i2c_master_read_packet+0x13c>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     ca8:	464a      	mov	r2, r9
     caa:	2a00      	cmp	r2, #0
     cac:	d102      	bne.n	cb4 <_i2c_master_read_packet+0xcc>
     cae:	2c00      	cmp	r4, #0
     cb0:	d002      	beq.n	cb8 <_i2c_master_read_packet+0xd0>
     cb2:	e009      	b.n	cc8 <_i2c_master_read_packet+0xe0>
					((sclsm_flag) && (tmp_data_length == 1))) {
     cb4:	2c01      	cmp	r4, #1
     cb6:	d107      	bne.n	cc8 <_i2c_master_read_packet+0xe0>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cb8:	686a      	ldr	r2, [r5, #4]
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	02db      	lsls	r3, r3, #11
     cbe:	4313      	orrs	r3, r2
     cc0:	606b      	str	r3, [r5, #4]
     cc2:	3c01      	subs	r4, #1
     cc4:	b2a4      	uxth	r4, r4
     cc6:	e013      	b.n	cf0 <_i2c_master_read_packet+0x108>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     cc8:	1c30      	adds	r0, r6, #0
     cca:	4b20      	ldr	r3, [pc, #128]	; (d4c <_i2c_master_read_packet+0x164>)
     ccc:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     cce:	4643      	mov	r3, r8
     cd0:	3301      	adds	r3, #1
     cd2:	b29b      	uxth	r3, r3
     cd4:	469a      	mov	sl, r3
     cd6:	2328      	movs	r3, #40	; 0x28
     cd8:	5ceb      	ldrb	r3, [r5, r3]
     cda:	6879      	ldr	r1, [r7, #4]
     cdc:	4642      	mov	r2, r8
     cde:	548b      	strb	r3, [r1, r2]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     ce0:	1c30      	adds	r0, r6, #0
     ce2:	4b17      	ldr	r3, [pc, #92]	; (d40 <_i2c_master_read_packet+0x158>)
     ce4:	4798      	blx	r3
     ce6:	3c01      	subs	r4, #1
     ce8:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     cea:	2800      	cmp	r0, #0
     cec:	d103      	bne.n	cf6 <_i2c_master_read_packet+0x10e>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     cee:	46d0      	mov	r8, sl
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     cf0:	455c      	cmp	r4, fp
     cf2:	d1d6      	bne.n	ca2 <_i2c_master_read_packet+0xba>
     cf4:	e001      	b.n	cfa <_i2c_master_read_packet+0x112>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     cf6:	46d0      	mov	r8, sl
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     cf8:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     cfa:	7ab3      	ldrb	r3, [r6, #10]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d007      	beq.n	d10 <_i2c_master_read_packet+0x128>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     d00:	1c30      	adds	r0, r6, #0
     d02:	4b12      	ldr	r3, [pc, #72]	; (d4c <_i2c_master_read_packet+0x164>)
     d04:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     d06:	686a      	ldr	r2, [r5, #4]
     d08:	23c0      	movs	r3, #192	; 0xc0
     d0a:	029b      	lsls	r3, r3, #10
     d0c:	4313      	orrs	r3, r2
     d0e:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     d10:	1c30      	adds	r0, r6, #0
     d12:	4b0e      	ldr	r3, [pc, #56]	; (d4c <_i2c_master_read_packet+0x164>)
     d14:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     d16:	2328      	movs	r3, #40	; 0x28
     d18:	5cea      	ldrb	r2, [r5, r3]
     d1a:	687b      	ldr	r3, [r7, #4]
     d1c:	4641      	mov	r1, r8
     d1e:	545a      	strb	r2, [r3, r1]
     d20:	9b01      	ldr	r3, [sp, #4]
     d22:	e000      	b.n	d26 <_i2c_master_read_packet+0x13e>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     d24:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     d26:	1c18      	adds	r0, r3, #0
     d28:	b003      	add	sp, #12
     d2a:	bc3c      	pop	{r2, r3, r4, r5}
     d2c:	4690      	mov	r8, r2
     d2e:	4699      	mov	r9, r3
     d30:	46a2      	mov	sl, r4
     d32:	46ab      	mov	fp, r5
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	00000bc9 	.word	0x00000bc9
     d3c:	fffbffff 	.word	0xfffbffff
     d40:	00000b99 	.word	0x00000b99
     d44:	00000b65 	.word	0x00000b65
     d48:	0000ffff 	.word	0x0000ffff
     d4c:	00000979 	.word	0x00000979

00000d50 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     d50:	b5f0      	push	{r4, r5, r6, r7, lr}
     d52:	465f      	mov	r7, fp
     d54:	4656      	mov	r6, sl
     d56:	464d      	mov	r5, r9
     d58:	4644      	mov	r4, r8
     d5a:	b4f0      	push	{r4, r5, r6, r7}
     d5c:	b083      	sub	sp, #12
     d5e:	1c06      	adds	r6, r0, #0
     d60:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     d62:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     d64:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     d66:	4b32      	ldr	r3, [pc, #200]	; (e30 <_i2c_master_write_packet+0xe0>)
     d68:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     d6a:	7a7b      	ldrb	r3, [r7, #9]
     d6c:	2b00      	cmp	r3, #0
     d6e:	d003      	beq.n	d78 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     d70:	7ab9      	ldrb	r1, [r7, #10]
     d72:	1c30      	adds	r0, r6, #0
     d74:	4b2f      	ldr	r3, [pc, #188]	; (e34 <_i2c_master_write_packet+0xe4>)
     d76:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d78:	686a      	ldr	r2, [r5, #4]
     d7a:	4b2f      	ldr	r3, [pc, #188]	; (e38 <_i2c_master_write_packet+0xe8>)
     d7c:	4013      	ands	r3, r2
     d7e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     d80:	7a3b      	ldrb	r3, [r7, #8]
     d82:	2b00      	cmp	r3, #0
     d84:	d009      	beq.n	d9a <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d86:	7a7a      	ldrb	r2, [r7, #9]
     d88:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d8a:	883b      	ldrh	r3, [r7, #0]
     d8c:	005b      	lsls	r3, r3, #1
     d8e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     d90:	2280      	movs	r2, #128	; 0x80
     d92:	0212      	lsls	r2, r2, #8
     d94:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d96:	626b      	str	r3, [r5, #36]	; 0x24
     d98:	e005      	b.n	da6 <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     d9a:	7a7a      	ldrb	r2, [r7, #9]
     d9c:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     d9e:	883b      	ldrh	r3, [r7, #0]
     da0:	005b      	lsls	r3, r3, #1
     da2:	4313      	orrs	r3, r2
     da4:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     da6:	1c30      	adds	r0, r6, #0
     da8:	4b24      	ldr	r3, [pc, #144]	; (e3c <_i2c_master_write_packet+0xec>)
     daa:	4798      	blx	r3
     dac:	1c03      	adds	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     dae:	2b00      	cmp	r3, #0
     db0:	d136      	bne.n	e20 <_i2c_master_write_packet+0xd0>
		tmp_status = _i2c_master_address_response(module);
     db2:	1c30      	adds	r0, r6, #0
     db4:	4b22      	ldr	r3, [pc, #136]	; (e40 <_i2c_master_write_packet+0xf0>)
     db6:	4798      	blx	r3
     db8:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     dba:	2800      	cmp	r0, #0
     dbc:	d130      	bne.n	e20 <_i2c_master_write_packet+0xd0>
     dbe:	46a0      	mov	r8, r4
     dc0:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     dc2:	2320      	movs	r3, #32
     dc4:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     dc6:	4a1a      	ldr	r2, [pc, #104]	; (e30 <_i2c_master_write_packet+0xe0>)
     dc8:	4693      	mov	fp, r2
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     dca:	4b1c      	ldr	r3, [pc, #112]	; (e3c <_i2c_master_write_packet+0xec>)
     dcc:	469a      	mov	sl, r3
     dce:	e011      	b.n	df4 <_i2c_master_write_packet+0xa4>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     dd0:	8b6b      	ldrh	r3, [r5, #26]
     dd2:	464a      	mov	r2, r9
     dd4:	4213      	tst	r3, r2
     dd6:	d022      	beq.n	e1e <_i2c_master_write_packet+0xce>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     dd8:	1c30      	adds	r0, r6, #0
     dda:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	5d1a      	ldrb	r2, [r3, r4]
     de0:	2328      	movs	r3, #40	; 0x28
     de2:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     de4:	1c30      	adds	r0, r6, #0
     de6:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     de8:	2800      	cmp	r0, #0
     dea:	d106      	bne.n	dfa <_i2c_master_write_packet+0xaa>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     dec:	8b6b      	ldrh	r3, [r5, #26]
     dee:	3401      	adds	r4, #1
     df0:	075a      	lsls	r2, r3, #29
     df2:	d404      	bmi.n	dfe <_i2c_master_write_packet+0xae>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     df4:	4544      	cmp	r4, r8
     df6:	d1eb      	bne.n	dd0 <_i2c_master_write_packet+0x80>
     df8:	e003      	b.n	e02 <_i2c_master_write_packet+0xb2>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     dfa:	9001      	str	r0, [sp, #4]
     dfc:	e001      	b.n	e02 <_i2c_master_write_packet+0xb2>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     dfe:	231e      	movs	r3, #30
     e00:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     e02:	7ab3      	ldrb	r3, [r6, #10]
     e04:	9801      	ldr	r0, [sp, #4]
     e06:	2b00      	cmp	r3, #0
     e08:	d00a      	beq.n	e20 <_i2c_master_write_packet+0xd0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     e0a:	1c30      	adds	r0, r6, #0
     e0c:	4b08      	ldr	r3, [pc, #32]	; (e30 <_i2c_master_write_packet+0xe0>)
     e0e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     e10:	686a      	ldr	r2, [r5, #4]
     e12:	23c0      	movs	r3, #192	; 0xc0
     e14:	029b      	lsls	r3, r3, #10
     e16:	4313      	orrs	r3, r2
     e18:	606b      	str	r3, [r5, #4]
     e1a:	9801      	ldr	r0, [sp, #4]
     e1c:	e000      	b.n	e20 <_i2c_master_write_packet+0xd0>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     e1e:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     e20:	b003      	add	sp, #12
     e22:	bc3c      	pop	{r2, r3, r4, r5}
     e24:	4690      	mov	r8, r2
     e26:	4699      	mov	r9, r3
     e28:	46a2      	mov	sl, r4
     e2a:	46ab      	mov	fp, r5
     e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00000979 	.word	0x00000979
     e34:	00000bc9 	.word	0x00000bc9
     e38:	fffbffff 	.word	0xfffbffff
     e3c:	00000b99 	.word	0x00000b99
     e40:	00000b65 	.word	0x00000b65

00000e44 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e44:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     e46:	8b82      	ldrh	r2, [r0, #28]
     e48:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e4a:	2305      	movs	r3, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
     e4c:	2a00      	cmp	r2, #0
     e4e:	d104      	bne.n	e5a <i2c_master_read_packet_wait+0x16>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     e50:	2301      	movs	r3, #1
     e52:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     e54:	4b02      	ldr	r3, [pc, #8]	; (e60 <i2c_master_read_packet_wait+0x1c>)
     e56:	4798      	blx	r3
     e58:	1c03      	adds	r3, r0, #0
}
     e5a:	1c18      	adds	r0, r3, #0
     e5c:	bd08      	pop	{r3, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	00000be9 	.word	0x00000be9

00000e64 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     e64:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     e66:	8b82      	ldrh	r2, [r0, #28]
     e68:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e6a:	2305      	movs	r3, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     e6c:	2a00      	cmp	r2, #0
     e6e:	d104      	bne.n	e7a <i2c_master_write_packet_wait_no_stop+0x16>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     e70:	2300      	movs	r3, #0
     e72:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     e74:	4b02      	ldr	r3, [pc, #8]	; (e80 <i2c_master_write_packet_wait_no_stop+0x1c>)
     e76:	4798      	blx	r3
     e78:	1c03      	adds	r3, r0, #0
}
     e7a:	1c18      	adds	r0, r3, #0
     e7c:	bd08      	pop	{r3, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	00000d51 	.word	0x00000d51

00000e84 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     e84:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     e86:	2207      	movs	r2, #7
     e88:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     e8a:	421a      	tst	r2, r3
     e8c:	d1fc      	bne.n	e88 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     e8e:	4770      	bx	lr

00000e90 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     e94:	6805      	ldr	r5, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     e96:	682b      	ldr	r3, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     e98:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     e9a:	8b82      	ldrh	r2, [r0, #28]
     e9c:	1ab6      	subs	r6, r6, r2
     e9e:	b2b6      	uxth	r6, r6

	module->buffer_remaining--;
     ea0:	8b82      	ldrh	r2, [r0, #28]
     ea2:	3a01      	subs	r2, #1
     ea4:	b292      	uxth	r2, r2
     ea6:	8382      	strh	r2, [r0, #28]

	if (sclsm_flag) {
     ea8:	011a      	lsls	r2, r3, #4
     eaa:	d509      	bpl.n	ec0 <_i2c_master_read+0x30>
		if (module->buffer_remaining == 1) {
     eac:	8b83      	ldrh	r3, [r0, #28]
     eae:	b29b      	uxth	r3, r3
     eb0:	2b01      	cmp	r3, #1
     eb2:	d10e      	bne.n	ed2 <_i2c_master_read+0x42>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     eb4:	686a      	ldr	r2, [r5, #4]
     eb6:	2380      	movs	r3, #128	; 0x80
     eb8:	02db      	lsls	r3, r3, #11
     eba:	4313      	orrs	r3, r2
     ebc:	606b      	str	r3, [r5, #4]
     ebe:	e008      	b.n	ed2 <_i2c_master_read+0x42>
		}
	} else {
		if (module->buffer_remaining == 0) {
     ec0:	8b83      	ldrh	r3, [r0, #28]
     ec2:	b29b      	uxth	r3, r3
     ec4:	2b00      	cmp	r3, #0
     ec6:	d104      	bne.n	ed2 <_i2c_master_read+0x42>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     ec8:	686a      	ldr	r2, [r5, #4]
     eca:	2380      	movs	r3, #128	; 0x80
     ecc:	02db      	lsls	r3, r3, #11
     ece:	4313      	orrs	r3, r2
     ed0:	606b      	str	r3, [r5, #4]
		}
	}

	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     ed2:	1c20      	adds	r0, r4, #0
     ed4:	4b0b      	ldr	r3, [pc, #44]	; (f04 <_i2c_master_read+0x74>)
     ed6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     ed8:	6a23      	ldr	r3, [r4, #32]
     eda:	199e      	adds	r6, r3, r6
     edc:	2328      	movs	r3, #40	; 0x28
     ede:	5ceb      	ldrb	r3, [r5, r3]
     ee0:	b2db      	uxtb	r3, r3
     ee2:	7033      	strb	r3, [r6, #0]

	if (module->buffer_remaining == 0) {
     ee4:	8ba3      	ldrh	r3, [r4, #28]
     ee6:	b29b      	uxth	r3, r3
     ee8:	2b00      	cmp	r3, #0
     eea:	d10a      	bne.n	f02 <_i2c_master_read+0x72>
		if (module->send_stop) {
     eec:	7aa3      	ldrb	r3, [r4, #10]
     eee:	2b00      	cmp	r3, #0
     ef0:	d007      	beq.n	f02 <_i2c_master_read+0x72>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     ef2:	1c20      	adds	r0, r4, #0
     ef4:	4b03      	ldr	r3, [pc, #12]	; (f04 <_i2c_master_read+0x74>)
     ef6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     ef8:	686a      	ldr	r2, [r5, #4]
     efa:	23c0      	movs	r3, #192	; 0xc0
     efc:	029b      	lsls	r3, r3, #10
     efe:	4313      	orrs	r3, r2
     f00:	606b      	str	r3, [r5, #4]
		}
	}
}
     f02:	bd70      	pop	{r4, r5, r6, pc}
     f04:	00000e85 	.word	0x00000e85

00000f08 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f0c:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     f0e:	8b6b      	ldrh	r3, [r5, #26]
     f10:	075a      	lsls	r2, r3, #29
     f12:	d503      	bpl.n	f1c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     f14:	221e      	movs	r2, #30
     f16:	2325      	movs	r3, #37	; 0x25
     f18:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
     f1a:	e00f      	b.n	f3c <_i2c_master_write+0x34>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     f1c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     f1e:	8b83      	ldrh	r3, [r0, #28]
     f20:	1af6      	subs	r6, r6, r3
     f22:	b2b6      	uxth	r6, r6

	module->buffer_remaining--;
     f24:	8b83      	ldrh	r3, [r0, #28]
     f26:	3b01      	subs	r3, #1
     f28:	b29b      	uxth	r3, r3
     f2a:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <_i2c_master_write+0x38>)
     f2e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     f30:	6a23      	ldr	r3, [r4, #32]
     f32:	199e      	adds	r6, r3, r6
     f34:	7832      	ldrb	r2, [r6, #0]
     f36:	b2d2      	uxtb	r2, r2
     f38:	2328      	movs	r3, #40	; 0x28
     f3a:	54ea      	strb	r2, [r5, r3]
}
     f3c:	bd70      	pop	{r4, r5, r6, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000e85 	.word	0x00000e85

00000f44 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     f44:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     f46:	0080      	lsls	r0, r0, #2
     f48:	4b6b      	ldr	r3, [pc, #428]	; (10f8 <_i2c_master_interrupt_handler+0x1b4>)
     f4a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     f4c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     f4e:	682b      	ldr	r3, [r5, #0]
     f50:	011b      	lsls	r3, r3, #4
     f52:	0fd9      	lsrs	r1, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     f54:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     f56:	7e26      	ldrb	r6, [r4, #24]
     f58:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     f5a:	8b63      	ldrh	r3, [r4, #26]
     f5c:	b29b      	uxth	r3, r3
     f5e:	2b00      	cmp	r3, #0
     f60:	d135      	bne.n	fce <_i2c_master_interrupt_handler+0x8a>
     f62:	8ba3      	ldrh	r3, [r4, #28]
     f64:	b29b      	uxth	r3, r3
     f66:	2b00      	cmp	r3, #0
     f68:	d031      	beq.n	fce <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     f6a:	7e2b      	ldrb	r3, [r5, #24]
     f6c:	07da      	lsls	r2, r3, #31
     f6e:	d508      	bpl.n	f82 <_i2c_master_interrupt_handler+0x3e>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     f70:	2301      	movs	r3, #1
     f72:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     f74:	8b6b      	ldrh	r3, [r5, #26]
     f76:	079a      	lsls	r2, r3, #30
     f78:	d516      	bpl.n	fa8 <_i2c_master_interrupt_handler+0x64>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     f7a:	2241      	movs	r2, #65	; 0x41
     f7c:	2325      	movs	r3, #37	; 0x25
     f7e:	54e2      	strb	r2, [r4, r3]
     f80:	e012      	b.n	fa8 <_i2c_master_interrupt_handler+0x64>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     f82:	8b6b      	ldrh	r3, [r5, #26]
     f84:	075a      	lsls	r2, r3, #29
     f86:	d50f      	bpl.n	fa8 <_i2c_master_interrupt_handler+0x64>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
     f88:	2218      	movs	r2, #24
     f8a:	2325      	movs	r3, #37	; 0x25
     f8c:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
     f8e:	2300      	movs	r3, #0
     f90:	83a3      	strh	r3, [r4, #28]

		if (module->send_stop) {
     f92:	7aa3      	ldrb	r3, [r4, #10]
     f94:	2b00      	cmp	r3, #0
     f96:	d007      	beq.n	fa8 <_i2c_master_interrupt_handler+0x64>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     f98:	1c20      	adds	r0, r4, #0
     f9a:	4b58      	ldr	r3, [pc, #352]	; (10fc <_i2c_master_interrupt_handler+0x1b8>)
     f9c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     f9e:	686a      	ldr	r2, [r5, #4]
     fa0:	23c0      	movs	r3, #192	; 0xc0
     fa2:	029b      	lsls	r3, r3, #10
     fa4:	4313      	orrs	r3, r2
     fa6:	606b      	str	r3, [r5, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
     fa8:	8ba3      	ldrh	r3, [r4, #28]
     faa:	b29b      	uxth	r3, r3
     fac:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     fae:	2325      	movs	r3, #37	; 0x25
     fb0:	5ce3      	ldrb	r3, [r4, r3]
     fb2:	2b05      	cmp	r3, #5
     fb4:	d153      	bne.n	105e <_i2c_master_interrupt_handler+0x11a>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     fb6:	2324      	movs	r3, #36	; 0x24
     fb8:	5ce3      	ldrb	r3, [r4, r3]
     fba:	2b00      	cmp	r3, #0
     fbc:	d103      	bne.n	fc6 <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
     fbe:	1c20      	adds	r0, r4, #0
     fc0:	4b4f      	ldr	r3, [pc, #316]	; (1100 <_i2c_master_interrupt_handler+0x1bc>)
     fc2:	4798      	blx	r3
     fc4:	e04b      	b.n	105e <_i2c_master_interrupt_handler+0x11a>
		} else {
			_i2c_master_read(module);
     fc6:	1c20      	adds	r0, r4, #0
     fc8:	4b4e      	ldr	r3, [pc, #312]	; (1104 <_i2c_master_interrupt_handler+0x1c0>)
     fca:	4798      	blx	r3
     fcc:	e047      	b.n	105e <_i2c_master_interrupt_handler+0x11a>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     fce:	8b62      	ldrh	r2, [r4, #26]
     fd0:	b292      	uxth	r2, r2
     fd2:	2a00      	cmp	r2, #0
     fd4:	d023      	beq.n	101e <_i2c_master_interrupt_handler+0xda>
     fd6:	8ba3      	ldrh	r3, [r4, #28]
     fd8:	b29b      	uxth	r3, r3
     fda:	2b00      	cmp	r3, #0
     fdc:	d11f      	bne.n	101e <_i2c_master_interrupt_handler+0xda>
			(module->status == STATUS_BUSY) &&
     fde:	2325      	movs	r3, #37	; 0x25
     fe0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     fe2:	2b05      	cmp	r3, #5
     fe4:	d11b      	bne.n	101e <_i2c_master_interrupt_handler+0xda>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     fe6:	2324      	movs	r3, #36	; 0x24
     fe8:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
     fea:	2b00      	cmp	r3, #0
     fec:	d117      	bne.n	101e <_i2c_master_interrupt_handler+0xda>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     fee:	2303      	movs	r3, #3
     ff0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     ff2:	2300      	movs	r3, #0
     ff4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     ff6:	2325      	movs	r3, #37	; 0x25
     ff8:	2200      	movs	r2, #0
     ffa:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
     ffc:	7aa3      	ldrb	r3, [r4, #10]
     ffe:	2b00      	cmp	r3, #0
    1000:	d007      	beq.n	1012 <_i2c_master_interrupt_handler+0xce>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1002:	1c20      	adds	r0, r4, #0
    1004:	4b3d      	ldr	r3, [pc, #244]	; (10fc <_i2c_master_interrupt_handler+0x1b8>)
    1006:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1008:	686a      	ldr	r2, [r5, #4]
    100a:	23c0      	movs	r3, #192	; 0xc0
    100c:	029b      	lsls	r3, r3, #10
    100e:	4313      	orrs	r3, r2
    1010:	606b      	str	r3, [r5, #4]
		}
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1012:	07f3      	lsls	r3, r6, #31
    1014:	d523      	bpl.n	105e <_i2c_master_interrupt_handler+0x11a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1016:	68e3      	ldr	r3, [r4, #12]
    1018:	1c20      	adds	r0, r4, #0
    101a:	4798      	blx	r3
    101c:	e01f      	b.n	105e <_i2c_master_interrupt_handler+0x11a>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    101e:	8b62      	ldrh	r2, [r4, #26]
    1020:	b292      	uxth	r2, r2
    1022:	2a00      	cmp	r2, #0
    1024:	d01b      	beq.n	105e <_i2c_master_interrupt_handler+0x11a>
    1026:	8ba3      	ldrh	r3, [r4, #28]
    1028:	b29b      	uxth	r3, r3
    102a:	2b00      	cmp	r3, #0
    102c:	d017      	beq.n	105e <_i2c_master_interrupt_handler+0x11a>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    102e:	8b6b      	ldrh	r3, [r5, #26]
    1030:	069a      	lsls	r2, r3, #26
    1032:	d409      	bmi.n	1048 <_i2c_master_interrupt_handler+0x104>
    1034:	2900      	cmp	r1, #0
    1036:	d003      	beq.n	1040 <_i2c_master_interrupt_handler+0xfc>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1038:	8ba3      	ldrh	r3, [r4, #28]
    103a:	b29b      	uxth	r3, r3
    103c:	2b01      	cmp	r3, #1
    103e:	d003      	beq.n	1048 <_i2c_master_interrupt_handler+0x104>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1040:	2241      	movs	r2, #65	; 0x41
    1042:	2325      	movs	r3, #37	; 0x25
    1044:	54e2      	strb	r2, [r4, r3]
    1046:	e00a      	b.n	105e <_i2c_master_interrupt_handler+0x11a>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1048:	2324      	movs	r3, #36	; 0x24
    104a:	5ce3      	ldrb	r3, [r4, r3]
    104c:	2b00      	cmp	r3, #0
    104e:	d103      	bne.n	1058 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_write(module);
    1050:	1c20      	adds	r0, r4, #0
    1052:	4b2b      	ldr	r3, [pc, #172]	; (1100 <_i2c_master_interrupt_handler+0x1bc>)
    1054:	4798      	blx	r3
    1056:	e002      	b.n	105e <_i2c_master_interrupt_handler+0x11a>
		} else {
			_i2c_master_read(module);
    1058:	1c20      	adds	r0, r4, #0
    105a:	4b2a      	ldr	r3, [pc, #168]	; (1104 <_i2c_master_interrupt_handler+0x1c0>)
    105c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    105e:	8b63      	ldrh	r3, [r4, #26]
    1060:	b29b      	uxth	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	d025      	beq.n	10b2 <_i2c_master_interrupt_handler+0x16e>
    1066:	8ba3      	ldrh	r3, [r4, #28]
    1068:	b29b      	uxth	r3, r3
    106a:	2b00      	cmp	r3, #0
    106c:	d121      	bne.n	10b2 <_i2c_master_interrupt_handler+0x16e>
			(module->status == STATUS_BUSY) &&
    106e:	2325      	movs	r3, #37	; 0x25
    1070:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1072:	2b05      	cmp	r3, #5
    1074:	d11d      	bne.n	10b2 <_i2c_master_interrupt_handler+0x16e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1076:	2324      	movs	r3, #36	; 0x24
    1078:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    107a:	2b01      	cmp	r3, #1
    107c:	d119      	bne.n	10b2 <_i2c_master_interrupt_handler+0x16e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {

		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    107e:	2303      	movs	r3, #3
    1080:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    1082:	2300      	movs	r3, #0
    1084:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1086:	2325      	movs	r3, #37	; 0x25
    1088:	2200      	movs	r2, #0
    108a:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    108c:	07b3      	lsls	r3, r6, #30
    108e:	d507      	bpl.n	10a0 <_i2c_master_interrupt_handler+0x15c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1090:	2324      	movs	r3, #36	; 0x24
    1092:	5ce3      	ldrb	r3, [r4, r3]
    1094:	2b01      	cmp	r3, #1
    1096:	d103      	bne.n	10a0 <_i2c_master_interrupt_handler+0x15c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1098:	6923      	ldr	r3, [r4, #16]
    109a:	1c20      	adds	r0, r4, #0
    109c:	4798      	blx	r3
    109e:	e008      	b.n	10b2 <_i2c_master_interrupt_handler+0x16e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    10a0:	07f2      	lsls	r2, r6, #31
    10a2:	d506      	bpl.n	10b2 <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    10a4:	2324      	movs	r3, #36	; 0x24
    10a6:	5ce3      	ldrb	r3, [r4, r3]
    10a8:	2b00      	cmp	r3, #0
    10aa:	d102      	bne.n	10b2 <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    10ac:	68e3      	ldr	r3, [r4, #12]
    10ae:	1c20      	adds	r0, r4, #0
    10b0:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    10b2:	2325      	movs	r3, #37	; 0x25
    10b4:	5ce3      	ldrb	r3, [r4, r3]
    10b6:	2b05      	cmp	r3, #5
    10b8:	d01c      	beq.n	10f4 <_i2c_master_interrupt_handler+0x1b0>
    10ba:	2325      	movs	r3, #37	; 0x25
    10bc:	5ce3      	ldrb	r3, [r4, r3]
    10be:	2b00      	cmp	r3, #0
    10c0:	d018      	beq.n	10f4 <_i2c_master_interrupt_handler+0x1b0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    10c2:	2303      	movs	r3, #3
    10c4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    10c6:	2300      	movs	r3, #0
    10c8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    10ca:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    10cc:	2325      	movs	r3, #37	; 0x25
    10ce:	5ce3      	ldrb	r3, [r4, r3]
    10d0:	2b41      	cmp	r3, #65	; 0x41
    10d2:	d00a      	beq.n	10ea <_i2c_master_interrupt_handler+0x1a6>
    10d4:	7aa3      	ldrb	r3, [r4, #10]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d007      	beq.n	10ea <_i2c_master_interrupt_handler+0x1a6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    10da:	1c20      	adds	r0, r4, #0
    10dc:	4b07      	ldr	r3, [pc, #28]	; (10fc <_i2c_master_interrupt_handler+0x1b8>)
    10de:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    10e0:	686a      	ldr	r2, [r5, #4]
    10e2:	23e0      	movs	r3, #224	; 0xe0
    10e4:	02db      	lsls	r3, r3, #11
    10e6:	4313      	orrs	r3, r2
    10e8:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    10ea:	0773      	lsls	r3, r6, #29
    10ec:	d502      	bpl.n	10f4 <_i2c_master_interrupt_handler+0x1b0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    10ee:	6963      	ldr	r3, [r4, #20]
    10f0:	1c20      	adds	r0, r4, #0
    10f2:	4798      	blx	r3
		}
	}
}
    10f4:	bd70      	pop	{r4, r5, r6, pc}
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	20000dc8 	.word	0x20000dc8
    10fc:	00000e85 	.word	0x00000e85
    1100:	00000f09 	.word	0x00000f09
    1104:	00000e91 	.word	0x00000e91

00001108 <find_string_start>:
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    int i;
    for (i = len-1; i > 0; i--) {
    1108:	3901      	subs	r1, #1
    110a:	2900      	cmp	r1, #0
    110c:	dd17      	ble.n	113e <find_string_start+0x36>
        if (buf[i] == '"') {
    110e:	1c0a      	adds	r2, r1, #0
    1110:	5c43      	ldrb	r3, [r0, r1]
    1112:	2b22      	cmp	r3, #34	; 0x22
    1114:	d10d      	bne.n	1132 <find_string_start+0x2a>
    1116:	e003      	b.n	1120 <find_string_start+0x18>
    1118:	1c0a      	adds	r2, r1, #0
    111a:	5c43      	ldrb	r3, [r0, r1]
    111c:	2b22      	cmp	r3, #34	; 0x22
    111e:	d108      	bne.n	1132 <find_string_start+0x2a>
            return (buf[i-1] == ',') ? i : -1;
    1120:	1882      	adds	r2, r0, r2
    1122:	3a01      	subs	r2, #1
    1124:	7813      	ldrb	r3, [r2, #0]
    1126:	1c08      	adds	r0, r1, #0
    1128:	2b2c      	cmp	r3, #44	; 0x2c
    112a:	d00a      	beq.n	1142 <find_string_start+0x3a>
    112c:	2001      	movs	r0, #1
    112e:	4240      	negs	r0, r0
    1130:	e007      	b.n	1142 <find_string_start+0x3a>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    int i;
    for (i = len-1; i > 0; i--) {
    1132:	3901      	subs	r1, #1
    1134:	2900      	cmp	r1, #0
    1136:	d1ef      	bne.n	1118 <find_string_start+0x10>
        if (buf[i] == '"') {
            return (buf[i-1] == ',') ? i : -1;
	}
    }
    return -1;
    1138:	2001      	movs	r0, #1
    113a:	4240      	negs	r0, r0
    113c:	e001      	b.n	1142 <find_string_start+0x3a>
    113e:	2001      	movs	r0, #1
    1140:	4240      	negs	r0, r0
}
    1142:	4770      	bx	lr

00001144 <handle_start_connect>:



/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    1144:	b510      	push	{r4, lr}
    1146:	1c04      	adds	r4, r0, #0
static void handle_transaction(pubnub_t *pb);


static bool valid_ctx_prt(pubnub_t const *pb)
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    1148:	4b24      	ldr	r3, [pc, #144]	; (11dc <handle_start_connect+0x98>)
    114a:	4298      	cmp	r0, r3
    114c:	d33e      	bcc.n	11cc <handle_start_connect+0x88>
    114e:	22dc      	movs	r2, #220	; 0xdc
    1150:	00d2      	lsls	r2, r2, #3
    1152:	189b      	adds	r3, r3, r2
    1154:	4298      	cmp	r0, r3
    1156:	d239      	bcs.n	11cc <handle_start_connect+0x88>
    1158:	e033      	b.n	11c2 <handle_start_connect+0x7e>

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    115a:	4821      	ldr	r0, [pc, #132]	; (11e0 <handle_start_connect+0x9c>)
    115c:	212a      	movs	r1, #42	; 0x2a
    115e:	4a21      	ldr	r2, [pc, #132]	; (11e4 <handle_start_connect+0xa0>)
    1160:	4b21      	ldr	r3, [pc, #132]	; (11e8 <handle_start_connect+0xa4>)
    1162:	4c22      	ldr	r4, [pc, #136]	; (11ec <handle_start_connect+0xa8>)
    1164:	47a0      	blx	r4
	
	if(pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    1166:	2b00      	cmp	r3, #0
    1168:	d121      	bne.n	11ae <handle_start_connect+0x6a>
    116a:	2353      	movs	r3, #83	; 0x53
    116c:	56e3      	ldrsb	r3, [r4, r3]
    116e:	2b00      	cmp	r3, #0
    1170:	dc1d      	bgt.n	11ae <handle_start_connect+0x6a>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    1172:	2002      	movs	r0, #2
    1174:	2101      	movs	r1, #1
    1176:	2200      	movs	r2, #0
    1178:	4b1d      	ldr	r3, [pc, #116]	; (11f0 <handle_start_connect+0xac>)
    117a:	4798      	blx	r3
    117c:	2353      	movs	r3, #83	; 0x53
    117e:	54e0      	strb	r0, [r4, r3]
    1180:	2800      	cmp	r0, #0
    1182:	da03      	bge.n	118c <handle_start_connect+0x48>
			printf("failed to create TCP client socket error!\r\n");
    1184:	481b      	ldr	r0, [pc, #108]	; (11f4 <handle_start_connect+0xb0>)
    1186:	4b1c      	ldr	r3, [pc, #112]	; (11f8 <handle_start_connect+0xb4>)
    1188:	4798      	blx	r3
			return;
    118a:	e025      	b.n	11d8 <handle_start_connect+0x94>
		}
		
		if(pubnub_origin_addr.sin_addr.s_addr <= 0) {
    118c:	4b1b      	ldr	r3, [pc, #108]	; (11fc <handle_start_connect+0xb8>)
    118e:	685b      	ldr	r3, [r3, #4]
    1190:	2b00      	cmp	r3, #0
    1192:	d10c      	bne.n	11ae <handle_start_connect+0x6a>
			pubnub_origin_addr.sin_family = AF_INET;
    1194:	4b19      	ldr	r3, [pc, #100]	; (11fc <handle_start_connect+0xb8>)
    1196:	2202      	movs	r2, #2
    1198:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    119a:	22a0      	movs	r2, #160	; 0xa0
    119c:	01d2      	lsls	r2, r2, #7
    119e:	805a      	strh	r2, [r3, #2]
		
			pb->state = PS_WAIT_DNS;
    11a0:	2201      	movs	r2, #1
    11a2:	2352      	movs	r3, #82	; 0x52
    11a4:	54e2      	strb	r2, [r4, r3]
			gethostbyname(PUBNUB_ORIGIN);
    11a6:	4816      	ldr	r0, [pc, #88]	; (1200 <handle_start_connect+0xbc>)
    11a8:	4b16      	ldr	r3, [pc, #88]	; (1204 <handle_start_connect+0xc0>)
    11aa:	4798      	blx	r3
			return;
    11ac:	e014      	b.n	11d8 <handle_start_connect+0x94>
		}
	}

	connect(pb->tcp_socket, &pubnub_origin_addr, sizeof(struct sockaddr_in));
    11ae:	2353      	movs	r3, #83	; 0x53
    11b0:	56e0      	ldrsb	r0, [r4, r3]
    11b2:	4912      	ldr	r1, [pc, #72]	; (11fc <handle_start_connect+0xb8>)
    11b4:	2210      	movs	r2, #16
    11b6:	4b14      	ldr	r3, [pc, #80]	; (1208 <handle_start_connect+0xc4>)
    11b8:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    11ba:	2202      	movs	r2, #2
    11bc:	2352      	movs	r3, #82	; 0x52
    11be:	54e2      	strb	r2, [r4, r3]
    11c0:	e00a      	b.n	11d8 <handle_start_connect+0x94>

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    11c2:	2352      	movs	r3, #82	; 0x52
    11c4:	5cc3      	ldrb	r3, [r0, r3]
    11c6:	2b02      	cmp	r3, #2
    11c8:	d9cd      	bls.n	1166 <handle_start_connect+0x22>
    11ca:	e7c6      	b.n	115a <handle_start_connect+0x16>


/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
    11cc:	4804      	ldr	r0, [pc, #16]	; (11e0 <handle_start_connect+0x9c>)
    11ce:	2129      	movs	r1, #41	; 0x29
    11d0:	4a04      	ldr	r2, [pc, #16]	; (11e4 <handle_start_connect+0xa0>)
    11d2:	4b0e      	ldr	r3, [pc, #56]	; (120c <handle_start_connect+0xc8>)
    11d4:	4c05      	ldr	r4, [pc, #20]	; (11ec <handle_start_connect+0xa8>)
    11d6:	47a0      	blx	r4
		}
	}

	connect(pb->tcp_socket, &pubnub_origin_addr, sizeof(struct sockaddr_in));
	pb->state = PS_WAIT_CONNECT;
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	2000049c 	.word	0x2000049c
    11e0:	000089b8 	.word	0x000089b8
    11e4:	0000898c 	.word	0x0000898c
    11e8:	000089c8 	.word	0x000089c8
    11ec:	000071a5 	.word	0x000071a5
    11f0:	00003775 	.word	0x00003775
    11f4:	00008a20 	.word	0x00008a20
    11f8:	00007379 	.word	0x00007379
    11fc:	20000cc8 	.word	0x20000cc8
    1200:	00008a4c 	.word	0x00008a4c
    1204:	000039ad 	.word	0x000039ad
    1208:	000037ed 	.word	0x000037ed
    120c:	00008a60 	.word	0x00008a60

00001210 <handle_transaction>:
    return split_array(reply + p->msg_ofs) ? 0 : -1;
}


static void handle_transaction(pubnub_t *pb)
{
    1210:	b530      	push	{r4, r5, lr}
    1212:	b0c1      	sub	sp, #260	; 0x104
    1214:	1c04      	adds	r4, r0, #0
	if(pb->state == PS_WAIT_SEND) {
    1216:	2352      	movs	r3, #82	; 0x52
    1218:	5cc3      	ldrb	r3, [r0, r3]
    121a:	2b03      	cmp	r3, #3
    121c:	d118      	bne.n	1250 <handle_transaction+0x40>
		char buf[256] = { 0, };			
    121e:	4668      	mov	r0, sp
    1220:	2100      	movs	r1, #0
    1222:	2280      	movs	r2, #128	; 0x80
    1224:	0052      	lsls	r2, r2, #1
    1226:	4b12      	ldr	r3, [pc, #72]	; (1270 <handle_transaction+0x60>)
    1228:	4798      	blx	r3
		sprintf( buf, "GET %s HTTP/1.1\r\nHost: %s\r\nUser-Agent: PubNub-WINC1500\r\nConnection: Keep-Alive\r\n\r\n", pb->http_buf.url, PUBNUB_ORIGIN);
    122a:	1c22      	adds	r2, r4, #0
    122c:	3254      	adds	r2, #84	; 0x54
    122e:	4668      	mov	r0, sp
    1230:	4910      	ldr	r1, [pc, #64]	; (1274 <handle_transaction+0x64>)
    1232:	4b11      	ldr	r3, [pc, #68]	; (1278 <handle_transaction+0x68>)
    1234:	4d11      	ldr	r5, [pc, #68]	; (127c <handle_transaction+0x6c>)
    1236:	47a8      	blx	r5
		send(pb->tcp_socket, buf, strlen(buf), 0);
    1238:	4668      	mov	r0, sp
    123a:	4b11      	ldr	r3, [pc, #68]	; (1280 <handle_transaction+0x70>)
    123c:	4798      	blx	r3
    123e:	2353      	movs	r3, #83	; 0x53
    1240:	56e3      	ldrsb	r3, [r4, r3]
    1242:	b282      	uxth	r2, r0
    1244:	1c18      	adds	r0, r3, #0
    1246:	4669      	mov	r1, sp
    1248:	2300      	movs	r3, #0
    124a:	4c0e      	ldr	r4, [pc, #56]	; (1284 <handle_transaction+0x74>)
    124c:	47a0      	blx	r4
    124e:	e00d      	b.n	126c <handle_transaction+0x5c>
		//printf("buf = %s", buf);
	}
	else if(pb->state == PS_WAIT_RECV) {
    1250:	2b04      	cmp	r3, #4
    1252:	d10b      	bne.n	126c <handle_transaction+0x5c>
		printf("hadle_transaction. wait recv\r\n");
    1254:	480c      	ldr	r0, [pc, #48]	; (1288 <handle_transaction+0x78>)
    1256:	4b0d      	ldr	r3, [pc, #52]	; (128c <handle_transaction+0x7c>)
    1258:	4798      	blx	r3
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    125a:	2353      	movs	r3, #83	; 0x53
    125c:	56e0      	ldrsb	r0, [r4, r3]
    125e:	1c21      	adds	r1, r4, #0
    1260:	3154      	adds	r1, #84	; 0x54
    1262:	2280      	movs	r2, #128	; 0x80
    1264:	0052      	lsls	r2, r2, #1
    1266:	4b0a      	ldr	r3, [pc, #40]	; (1290 <handle_transaction+0x80>)
    1268:	4c0a      	ldr	r4, [pc, #40]	; (1294 <handle_transaction+0x84>)
    126a:	47a0      	blx	r4
	}
	else if(pb->state == PS_RECV) {
		
	}
}
    126c:	b041      	add	sp, #260	; 0x104
    126e:	bd30      	pop	{r4, r5, pc}
    1270:	0000726f 	.word	0x0000726f
    1274:	00008a74 	.word	0x00008a74
    1278:	00008a4c 	.word	0x00008a4c
    127c:	00007511 	.word	0x00007511
    1280:	00007579 	.word	0x00007579
    1284:	0000384d 	.word	0x0000384d
    1288:	00008ac8 	.word	0x00008ac8
    128c:	00007379 	.word	0x00007379
    1290:	00007530 	.word	0x00007530
    1294:	000038c5 	.word	0x000038c5

00001298 <pubnub_get_ctx>:
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
}

pubnub_t *pubnub_get_ctx(uint8_t index)
{
    1298:	b510      	push	{r4, lr}
	assert(index < PUBNUB_CTX_MAX);
    129a:	2801      	cmp	r0, #1
    129c:	d905      	bls.n	12aa <pubnub_get_ctx+0x12>
    129e:	4806      	ldr	r0, [pc, #24]	; (12b8 <pubnub_get_ctx+0x20>)
    12a0:	211e      	movs	r1, #30
    12a2:	4a06      	ldr	r2, [pc, #24]	; (12bc <pubnub_get_ctx+0x24>)
    12a4:	4b06      	ldr	r3, [pc, #24]	; (12c0 <pubnub_get_ctx+0x28>)
    12a6:	4c07      	ldr	r4, [pc, #28]	; (12c4 <pubnub_get_ctx+0x2c>)
    12a8:	47a0      	blx	r4
	return m_aCtx + index;
    12aa:	23dc      	movs	r3, #220	; 0xdc
    12ac:	009b      	lsls	r3, r3, #2
    12ae:	4358      	muls	r0, r3
    12b0:	4b05      	ldr	r3, [pc, #20]	; (12c8 <pubnub_get_ctx+0x30>)
    12b2:	1818      	adds	r0, r3, r0
}
    12b4:	bd10      	pop	{r4, pc}
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	000089b8 	.word	0x000089b8
    12bc:	00008970 	.word	0x00008970
    12c0:	00008ae8 	.word	0x00008ae8
    12c4:	000071a5 	.word	0x000071a5
    12c8:	2000049c 	.word	0x2000049c

000012cc <handle_dns_found>:
	pb->state = PS_WAIT_CONNECT;
}


void handle_dns_found(char const *name, uint32_t hostip)
{
    12cc:	b538      	push	{r3, r4, r5, lr}
    12ce:	1c0c      	adds	r4, r1, #0
	pubnub_t *pb;
	
	if( 0 != strcmp(name, PUBNUB_ORIGIN) ) {
    12d0:	490c      	ldr	r1, [pc, #48]	; (1304 <handle_dns_found+0x38>)
    12d2:	4b0d      	ldr	r3, [pc, #52]	; (1308 <handle_dns_found+0x3c>)
    12d4:	4798      	blx	r3
    12d6:	2800      	cmp	r0, #0
    12d8:	d112      	bne.n	1300 <handle_dns_found+0x34>
		return;
	}
	
	pubnub_origin_addr.sin_addr.s_addr = hostip;
    12da:	4b0c      	ldr	r3, [pc, #48]	; (130c <handle_dns_found+0x40>)
    12dc:	605c      	str	r4, [r3, #4]
	
	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    12de:	4c0c      	ldr	r4, [pc, #48]	; (1310 <handle_dns_found+0x44>)
    12e0:	23dc      	movs	r3, #220	; 0xdc
    12e2:	00db      	lsls	r3, r3, #3
    12e4:	18e5      	adds	r5, r4, r3
    12e6:	1c23      	adds	r3, r4, #0
    12e8:	3352      	adds	r3, #82	; 0x52
		if(pb->state == PS_WAIT_DNS) {
    12ea:	781b      	ldrb	r3, [r3, #0]
    12ec:	2b01      	cmp	r3, #1
    12ee:	d102      	bne.n	12f6 <handle_dns_found+0x2a>
			handle_start_connect(pb);
    12f0:	1c20      	adds	r0, r4, #0
    12f2:	4b08      	ldr	r3, [pc, #32]	; (1314 <handle_dns_found+0x48>)
    12f4:	4798      	blx	r3
		return;
	}
	
	pubnub_origin_addr.sin_addr.s_addr = hostip;
	
	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    12f6:	23dc      	movs	r3, #220	; 0xdc
    12f8:	009b      	lsls	r3, r3, #2
    12fa:	18e4      	adds	r4, r4, r3
    12fc:	42ac      	cmp	r4, r5
    12fe:	d1f2      	bne.n	12e6 <handle_dns_found+0x1a>
		if(pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
    1300:	bd38      	pop	{r3, r4, r5, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	00008a4c 	.word	0x00008a4c
    1308:	00007555 	.word	0x00007555
    130c:	20000cc8 	.word	0x20000cc8
    1310:	2000049c 	.word	0x2000049c
    1314:	00001145 	.word	0x00001145

00001318 <handle_tcpip>:
		}
	}
}

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    1318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    131a:	464f      	mov	r7, r9
    131c:	4646      	mov	r6, r8
    131e:	b4c0      	push	{r6, r7}
    1320:	1c06      	adds	r6, r0, #0
    1322:	1c15      	adds	r5, r2, #0
	switch (u8Msg) {
    1324:	2906      	cmp	r1, #6
    1326:	d05a      	beq.n	13de <handle_tcpip+0xc6>
    1328:	2907      	cmp	r1, #7
    132a:	d037      	beq.n	139c <handle_tcpip+0x84>
    132c:	2905      	cmp	r1, #5
    132e:	d000      	beq.n	1332 <handle_tcpip+0x1a>
    1330:	e1a9      	b.n	1686 <handle_tcpip+0x36e>
    1332:	4cb6      	ldr	r4, [pc, #728]	; (160c <handle_tcpip+0x2f4>)

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    1334:	23dc      	movs	r3, #220	; 0xdc
    1336:	00db      	lsls	r3, r3, #3
    1338:	18e2      	adds	r2, r4, r3
    133a:	1c23      	adds	r3, r4, #0
    133c:	3352      	adds	r3, #82	; 0x52
		if(pb->state == PS_WAIT_CONNECT && pb->tcp_socket == sock) {
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	2b02      	cmp	r3, #2
    1342:	d105      	bne.n	1350 <handle_tcpip+0x38>
    1344:	1c23      	adds	r3, r4, #0
    1346:	3353      	adds	r3, #83	; 0x53
    1348:	781b      	ldrb	r3, [r3, #0]
    134a:	b25b      	sxtb	r3, r3
    134c:	42b3      	cmp	r3, r6
    134e:	d005      	beq.n	135c <handle_tcpip+0x44>

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    1350:	21dc      	movs	r1, #220	; 0xdc
    1352:	0089      	lsls	r1, r1, #2
    1354:	1864      	adds	r4, r4, r1
    1356:	4294      	cmp	r4, r2
    1358:	d1ef      	bne.n	133a <handle_tcpip+0x22>
    135a:	e002      	b.n	1362 <handle_tcpip+0x4a>
		if(pb->state == PS_WAIT_CONNECT && pb->tcp_socket == sock) {
			break;
		}
	}
			
	if(pb != NULL) {
    135c:	2c00      	cmp	r4, #0
    135e:	d100      	bne.n	1362 <handle_tcpip+0x4a>
    1360:	e191      	b.n	1686 <handle_tcpip+0x36e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    1362:	2d00      	cmp	r5, #0
    1364:	d00c      	beq.n	1380 <handle_tcpip+0x68>
    1366:	786b      	ldrb	r3, [r5, #1]
    1368:	2b7f      	cmp	r3, #127	; 0x7f
    136a:	d809      	bhi.n	1380 <handle_tcpip+0x68>
			printf("m2m_wifi_socket_connect : connect success!\r\n");
    136c:	48a8      	ldr	r0, [pc, #672]	; (1610 <handle_tcpip+0x2f8>)
    136e:	4ba9      	ldr	r3, [pc, #676]	; (1614 <handle_tcpip+0x2fc>)
    1370:	4798      	blx	r3
			pb->state = PS_WAIT_SEND;
    1372:	2203      	movs	r2, #3
    1374:	2352      	movs	r3, #82	; 0x52
    1376:	54e2      	strb	r2, [r4, r3]

			handle_transaction(pb);
    1378:	1c20      	adds	r0, r4, #0
    137a:	4ba7      	ldr	r3, [pc, #668]	; (1618 <handle_tcpip+0x300>)
    137c:	4798      	blx	r3
    137e:	e182      	b.n	1686 <handle_tcpip+0x36e>
		} else {
			printf("m2m_wifi_socket_connect : connect error!\r\n");
    1380:	48a6      	ldr	r0, [pc, #664]	; (161c <handle_tcpip+0x304>)
    1382:	4ba4      	ldr	r3, [pc, #656]	; (1614 <handle_tcpip+0x2fc>)
    1384:	4798      	blx	r3
			close(pb->tcp_socket);
    1386:	2353      	movs	r3, #83	; 0x53
    1388:	56e0      	ldrsb	r0, [r4, r3]
    138a:	4ba5      	ldr	r3, [pc, #660]	; (1620 <handle_tcpip+0x308>)
    138c:	4798      	blx	r3
			
			pb->state = PS_IDLE;
    138e:	2200      	movs	r2, #0
    1390:	2352      	movs	r3, #82	; 0x52
    1392:	54e2      	strb	r2, [r4, r3]
			pb->last_result = PNR_IO_ERROR;
    1394:	2202      	movs	r2, #2
    1396:	2350      	movs	r3, #80	; 0x50
    1398:	54e2      	strb	r2, [r4, r3]
    139a:	e174      	b.n	1686 <handle_tcpip+0x36e>
			handle_tcpip_connect(sock, u8Msg, pvMsg);
		}
		break;
		case SOCKET_MSG_SEND:
		{
			printf("m2m_wifi_socket_send : send success!\r\n");
    139c:	48a1      	ldr	r0, [pc, #644]	; (1624 <handle_tcpip+0x30c>)
    139e:	4b9d      	ldr	r3, [pc, #628]	; (1614 <handle_tcpip+0x2fc>)
    13a0:	4798      	blx	r3

static void handle_tcpip_send(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    13a2:	489a      	ldr	r0, [pc, #616]	; (160c <handle_tcpip+0x2f4>)
    13a4:	23dc      	movs	r3, #220	; 0xdc
    13a6:	00db      	lsls	r3, r3, #3
    13a8:	18c1      	adds	r1, r0, r3
    13aa:	1c02      	adds	r2, r0, #0
    13ac:	3252      	adds	r2, #82	; 0x52
		if(pb->state == PS_WAIT_SEND && pb->tcp_socket == sock) {
    13ae:	7812      	ldrb	r2, [r2, #0]
    13b0:	2a03      	cmp	r2, #3
    13b2:	d105      	bne.n	13c0 <handle_tcpip+0xa8>
    13b4:	1c02      	adds	r2, r0, #0
    13b6:	3253      	adds	r2, #83	; 0x53
    13b8:	7812      	ldrb	r2, [r2, #0]
    13ba:	b252      	sxtb	r2, r2
    13bc:	42b2      	cmp	r2, r6
    13be:	d005      	beq.n	13cc <handle_tcpip+0xb4>

static void handle_tcpip_send(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    13c0:	22dc      	movs	r2, #220	; 0xdc
    13c2:	0092      	lsls	r2, r2, #2
    13c4:	1880      	adds	r0, r0, r2
    13c6:	4288      	cmp	r0, r1
    13c8:	d1ef      	bne.n	13aa <handle_tcpip+0x92>
    13ca:	e002      	b.n	13d2 <handle_tcpip+0xba>
		if(pb->state == PS_WAIT_SEND && pb->tcp_socket == sock) {
			break;
		}
	}
	
	if(pb != NULL) {
    13cc:	2800      	cmp	r0, #0
    13ce:	d100      	bne.n	13d2 <handle_tcpip+0xba>
    13d0:	e159      	b.n	1686 <handle_tcpip+0x36e>
		pb->state = PS_WAIT_RECV;
    13d2:	2104      	movs	r1, #4
    13d4:	2252      	movs	r2, #82	; 0x52
    13d6:	5481      	strb	r1, [r0, r2]
		handle_transaction(pb);
    13d8:	4b8f      	ldr	r3, [pc, #572]	; (1618 <handle_tcpip+0x300>)
    13da:	4798      	blx	r3
    13dc:	e153      	b.n	1686 <handle_tcpip+0x36e>
		}
		break;
		case SOCKET_MSG_RECV:
		{
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    13de:	2a00      	cmp	r2, #0
    13e0:	d007      	beq.n	13f2 <handle_tcpip+0xda>
    13e2:	2104      	movs	r1, #4
    13e4:	5e53      	ldrsh	r3, [r2, r1]
    13e6:	2b00      	cmp	r3, #0
    13e8:	dd03      	ble.n	13f2 <handle_tcpip+0xda>
				printf("m2m_wifi_socket_recv : recv success!\r\n");
    13ea:	488f      	ldr	r0, [pc, #572]	; (1628 <handle_tcpip+0x310>)
    13ec:	4b89      	ldr	r3, [pc, #548]	; (1614 <handle_tcpip+0x2fc>)
    13ee:	4798      	blx	r3
    13f0:	e002      	b.n	13f8 <handle_tcpip+0xe0>
				//printf("m2m_wifi_socket_recv msg length %d:\n", pstrRecv->s16BufferSize);
				//printf("m2m_wifi_socket_recv msg remaining length %d\n", pstrRecv->u16RemainingSize);
				//printf("m2m_wifi_socket_recv msg :\r\n");
				//printf("%s\n", pstrRecv->pu8Buffer);
			} else {
				printf("m2m_wifi_socket_recv : recv error!\r\n");
    13f2:	488e      	ldr	r0, [pc, #568]	; (162c <handle_tcpip+0x314>)
    13f4:	4b87      	ldr	r3, [pc, #540]	; (1614 <handle_tcpip+0x2fc>)
    13f6:	4798      	blx	r3

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    13f8:	4c84      	ldr	r4, [pc, #528]	; (160c <handle_tcpip+0x2f4>)
    13fa:	21dc      	movs	r1, #220	; 0xdc
    13fc:	00c9      	lsls	r1, r1, #3
    13fe:	1862      	adds	r2, r4, r1
    1400:	1c23      	adds	r3, r4, #0
    1402:	3352      	adds	r3, #82	; 0x52
		if(pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
    1404:	781b      	ldrb	r3, [r3, #0]
    1406:	2b04      	cmp	r3, #4
    1408:	d105      	bne.n	1416 <handle_tcpip+0xfe>
    140a:	1c23      	adds	r3, r4, #0
    140c:	3353      	adds	r3, #83	; 0x53
    140e:	781b      	ldrb	r3, [r3, #0]
    1410:	b25b      	sxtb	r3, r3
    1412:	42b3      	cmp	r3, r6
    1414:	d005      	beq.n	1422 <handle_tcpip+0x10a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for(pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    1416:	23dc      	movs	r3, #220	; 0xdc
    1418:	009b      	lsls	r3, r3, #2
    141a:	18e4      	adds	r4, r4, r3
    141c:	4294      	cmp	r4, r2
    141e:	d1ef      	bne.n	1400 <handle_tcpip+0xe8>
    1420:	e002      	b.n	1428 <handle_tcpip+0x110>
		if(pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
		}
	}
	
	if(pb != NULL) {	
    1422:	2c00      	cmp	r4, #0
    1424:	d100      	bne.n	1428 <handle_tcpip+0x110>
    1426:	e12e      	b.n	1686 <handle_tcpip+0x36e>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
		
		if(pstrRecv->s16BufferSize <= 0) {
    1428:	88aa      	ldrh	r2, [r5, #4]
    142a:	b213      	sxth	r3, r2
    142c:	2b00      	cmp	r3, #0
    142e:	dc0a      	bgt.n	1446 <handle_tcpip+0x12e>
			close(pb->tcp_socket);
    1430:	2353      	movs	r3, #83	; 0x53
    1432:	56e0      	ldrsb	r0, [r4, r3]
    1434:	4b7a      	ldr	r3, [pc, #488]	; (1620 <handle_tcpip+0x308>)
    1436:	4798      	blx	r3

			pb->state = PS_IDLE;			
    1438:	2200      	movs	r2, #0
    143a:	2352      	movs	r3, #82	; 0x52
    143c:	54e2      	strb	r2, [r4, r3]
			pb->last_result = PNR_IO_ERROR;
    143e:	2202      	movs	r2, #2
    1440:	2350      	movs	r3, #80	; 0x50
    1442:	54e2      	strb	r2, [r4, r3]
    1444:	e11f      	b.n	1686 <handle_tcpip+0x36e>
			return;
		}
		
		if(pb->trans == PBTT_PUBLISH) {
    1446:	2351      	movs	r3, #81	; 0x51
    1448:	5ce3      	ldrb	r3, [r4, r3]
    144a:	2b02      	cmp	r3, #2
    144c:	d108      	bne.n	1460 <handle_tcpip+0x148>
			//printf("m2m_wifi_socket_recv PBTT_PUBLISH msg :\r\n");
			//printf("%s\n", pstrRecv->pu8Buffer);
			
			if(pstrRecv->u16RemainingSize == 0) {
    144e:	88eb      	ldrh	r3, [r5, #6]
    1450:	2b00      	cmp	r3, #0
    1452:	d000      	beq.n	1456 <handle_tcpip+0x13e>
    1454:	e117      	b.n	1686 <handle_tcpip+0x36e>
				//close(pb->tcp_socket);
				pb->last_result = PNR_OK;
    1456:	2250      	movs	r2, #80	; 0x50
    1458:	54a3      	strb	r3, [r4, r2]
				pb->state = PS_IDLE;
    145a:	2252      	movs	r2, #82	; 0x52
    145c:	54a3      	strb	r3, [r4, r2]
    145e:	e112      	b.n	1686 <handle_tcpip+0x36e>
			}
			return;
		}
		
		if(pstrRecv->u16RemainingSize > 0) {
    1460:	88eb      	ldrh	r3, [r5, #6]
    1462:	2b00      	cmp	r3, #0
    1464:	d01d      	beq.n	14a2 <handle_tcpip+0x18a>
			pb->state = PS_WAIT_RECV;
    1466:	2204      	movs	r2, #4
    1468:	2352      	movs	r3, #82	; 0x52
    146a:	54e2      	strb	r2, [r4, r3]
			
			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, "Content-Length: ") + 16;
    146c:	6828      	ldr	r0, [r5, #0]
    146e:	4970      	ldr	r1, [pc, #448]	; (1630 <handle_tcpip+0x318>)
    1470:	4f70      	ldr	r7, [pc, #448]	; (1634 <handle_tcpip+0x31c>)
    1472:	47b8      	blx	r7
    1474:	3010      	adds	r0, #16
			pb->http_content_len = atoi(length);
    1476:	4b70      	ldr	r3, [pc, #448]	; (1638 <handle_tcpip+0x320>)
    1478:	4798      	blx	r3
    147a:	26ae      	movs	r6, #174	; 0xae
    147c:	0076      	lsls	r6, r6, #1
    147e:	51a0      	str	r0, [r4, r6]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
    1480:	88ea      	ldrh	r2, [r5, #6]
    1482:	23b0      	movs	r3, #176	; 0xb0
    1484:	005b      	lsls	r3, r3, #1
    1486:	50e2      	str	r2, [r4, r3]
			//printf("Content-Length = %d\r\n", pb->http_content_len);
		
			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, "[");
    1488:	6828      	ldr	r0, [r5, #0]
    148a:	496c      	ldr	r1, [pc, #432]	; (163c <handle_tcpip+0x324>)
    148c:	47b8      	blx	r7
    148e:	1c01      	adds	r1, r0, #0
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
    1490:	2266      	movs	r2, #102	; 0x66
    1492:	32ff      	adds	r2, #255	; 0xff
    1494:	18a0      	adds	r0, r4, r2
    1496:	88eb      	ldrh	r3, [r5, #6]
    1498:	59a2      	ldr	r2, [r4, r6]
    149a:	1ad2      	subs	r2, r2, r3
    149c:	4b68      	ldr	r3, [pc, #416]	; (1640 <handle_tcpip+0x328>)
    149e:	4798      	blx	r3
    14a0:	e0f1      	b.n	1686 <handle_tcpip+0x36e>
			//printf("http_reply = %s\r\n", pb->http_reply);
		}
		else if(pstrRecv->u16RemainingSize == 0) {
			//printf("http_content_remaining_len = %d\r\n", pb->http_content_remaining_len);
			
			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
    14a2:	23ae      	movs	r3, #174	; 0xae
    14a4:	005b      	lsls	r3, r3, #1
    14a6:	58e0      	ldr	r0, [r4, r3]
    14a8:	23b0      	movs	r3, #176	; 0xb0
    14aa:	005b      	lsls	r3, r3, #1
    14ac:	58e3      	ldr	r3, [r4, r3]
    14ae:	1ac0      	subs	r0, r0, r3
    14b0:	1820      	adds	r0, r4, r0
    14b2:	3066      	adds	r0, #102	; 0x66
    14b4:	30ff      	adds	r0, #255	; 0xff
    14b6:	b212      	sxth	r2, r2
    14b8:	6829      	ldr	r1, [r5, #0]
    14ba:	4b61      	ldr	r3, [pc, #388]	; (1640 <handle_tcpip+0x328>)
    14bc:	4798      	blx	r3
			printf("http_reply = %s\r\n", pb->http_reply);
    14be:	2366      	movs	r3, #102	; 0x66
    14c0:	33ff      	adds	r3, #255	; 0xff
    14c2:	18e5      	adds	r5, r4, r3
    14c4:	485f      	ldr	r0, [pc, #380]	; (1644 <handle_tcpip+0x32c>)
    14c6:	1c29      	adds	r1, r5, #0
    14c8:	4b5f      	ldr	r3, [pc, #380]	; (1648 <handle_tcpip+0x330>)
    14ca:	4798      	blx	r3
}

static int parse_subscribe_response(pubnub_t *p)
{
    char *reply = p->http_reply;
    int replylen = strlen(reply);
    14cc:	1c28      	adds	r0, r5, #0
    14ce:	4b5f      	ldr	r3, [pc, #380]	; (164c <handle_tcpip+0x334>)
    14d0:	4798      	blx	r3
    14d2:	1c07      	adds	r7, r0, #0
    if (reply[replylen-1] != ']' && replylen > 2) {
    14d4:	182b      	adds	r3, r5, r0
    14d6:	3b01      	subs	r3, #1
    14d8:	781b      	ldrb	r3, [r3, #0]
    14da:	2b5d      	cmp	r3, #93	; 0x5d
    14dc:	d002      	beq.n	14e4 <handle_tcpip+0x1cc>
    14de:	2802      	cmp	r0, #2
    14e0:	dd00      	ble.n	14e4 <handle_tcpip+0x1cc>
        replylen -= 2; // XXX: this seems required by Manxiang
    14e2:	1e87      	subs	r7, r0, #2
    }
    if ((reply[0] != '[') || (reply[replylen-1] != ']') || (reply[replylen-2] != '"')) {
    14e4:	2366      	movs	r3, #102	; 0x66
    14e6:	33ff      	adds	r3, #255	; 0xff
    14e8:	5ce3      	ldrb	r3, [r4, r3]
    14ea:	2b5b      	cmp	r3, #91	; 0x5b
    14ec:	d000      	beq.n	14f0 <handle_tcpip+0x1d8>
    14ee:	e0bc      	b.n	166a <handle_tcpip+0x352>
    14f0:	19eb      	adds	r3, r5, r7
    14f2:	3b01      	subs	r3, #1
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	2b5d      	cmp	r3, #93	; 0x5d
    14f8:	d000      	beq.n	14fc <handle_tcpip+0x1e4>
    14fa:	e0b6      	b.n	166a <handle_tcpip+0x352>
    14fc:	1ebb      	subs	r3, r7, #2
    14fe:	195b      	adds	r3, r3, r5
    1500:	4699      	mov	r9, r3
    1502:	781b      	ldrb	r3, [r3, #0]
    1504:	2b22      	cmp	r3, #34	; 0x22
    1506:	d000      	beq.n	150a <handle_tcpip+0x1f2>
    1508:	e0af      	b.n	166a <handle_tcpip+0x352>
        return -1;
    }

    /* Extract the last argument. */
    int i = find_string_start(reply, replylen-2);
    150a:	1eb9      	subs	r1, r7, #2
    150c:	4688      	mov	r8, r1
    150e:	1c28      	adds	r0, r5, #0
    1510:	4b4f      	ldr	r3, [pc, #316]	; (1650 <handle_tcpip+0x338>)
    1512:	4798      	blx	r3
    1514:	1e06      	subs	r6, r0, #0
    if (i < 0) {
    1516:	da00      	bge.n	151a <handle_tcpip+0x202>
    1518:	e0a7      	b.n	166a <handle_tcpip+0x352>
        return -1;
    }
    reply[replylen - 2] = 0;
    151a:	2300      	movs	r3, #0
    151c:	464a      	mov	r2, r9
    151e:	7013      	strb	r3, [r2, #0]

    /* Now, the last argument may either be a timetoken or a channel list. */
    if (reply[i-2] == '"') {
    1520:	1e83      	subs	r3, r0, #2
    1522:	195b      	adds	r3, r3, r5
    1524:	469c      	mov	ip, r3
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	2b22      	cmp	r3, #34	; 0x22
    152a:	d123      	bne.n	1574 <handle_tcpip+0x25c>
        int k;
        /* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
        p->chan_ofs = i+1;
    152c:	1c43      	adds	r3, r0, #1
    152e:	4a49      	ldr	r2, [pc, #292]	; (1654 <handle_tcpip+0x33c>)
    1530:	52a3      	strh	r3, [r4, r2]
        p->chan_end = replylen - 1;
    1532:	1e7a      	subs	r2, r7, #1
    1534:	b292      	uxth	r2, r2
    1536:	21db      	movs	r1, #219	; 0xdb
    1538:	0089      	lsls	r1, r1, #2
    153a:	5262      	strh	r2, [r4, r1]
        for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    153c:	3a01      	subs	r2, #1
    153e:	b29b      	uxth	r3, r3
    1540:	429a      	cmp	r2, r3
    1542:	dd0d      	ble.n	1560 <handle_tcpip+0x248>
    1544:	18ab      	adds	r3, r5, r2
            if (reply[k] == ',') {
                reply[k] = 0;
    1546:	2100      	movs	r1, #0
    1548:	4689      	mov	r9, r1
        int k;
        /* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
        p->chan_ofs = i+1;
        p->chan_end = replylen - 1;
        for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    154a:	4f42      	ldr	r7, [pc, #264]	; (1654 <handle_tcpip+0x33c>)
            if (reply[k] == ',') {
    154c:	7819      	ldrb	r1, [r3, #0]
    154e:	292c      	cmp	r1, #44	; 0x2c
    1550:	d101      	bne.n	1556 <handle_tcpip+0x23e>
                reply[k] = 0;
    1552:	4649      	mov	r1, r9
    1554:	7019      	strb	r1, [r3, #0]
        int k;
        /* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
        p->chan_ofs = i+1;
        p->chan_end = replylen - 1;
        for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    1556:	3a01      	subs	r2, #1
    1558:	3b01      	subs	r3, #1
    155a:	5be0      	ldrh	r0, [r4, r7]
    155c:	4282      	cmp	r2, r0
    155e:	dcf5      	bgt.n	154c <handle_tcpip+0x234>
                reply[k] = 0;
	    }
	}

        /* ... and look for timetoken again. */
	reply[i-2] = 0;
    1560:	2300      	movs	r3, #0
    1562:	4662      	mov	r2, ip
    1564:	7013      	strb	r3, [r2, #0]
        i = find_string_start(reply, i-2);
    1566:	1eb1      	subs	r1, r6, #2
    1568:	1c28      	adds	r0, r5, #0
    156a:	4b39      	ldr	r3, [pc, #228]	; (1650 <handle_tcpip+0x338>)
    156c:	4798      	blx	r3
    156e:	1e06      	subs	r6, r0, #0
        if (i < 0) {
    1570:	da06      	bge.n	1580 <handle_tcpip+0x268>
    1572:	e07a      	b.n	166a <handle_tcpip+0x352>
            return -1;
        }
    } 
    else {
        p->chan_ofs = 0;
    1574:	2300      	movs	r3, #0
    1576:	4a37      	ldr	r2, [pc, #220]	; (1654 <handle_tcpip+0x33c>)
    1578:	52a3      	strh	r3, [r4, r2]
        p->chan_end = 0;
    157a:	22db      	movs	r2, #219	; 0xdb
    157c:	0092      	lsls	r2, r2, #2
    157e:	52a3      	strh	r3, [r4, r2]
     * [[1,2,3],"5678"]
     * [[1,2,3],"5678","a,b,c"]
     *          ^-- here */

    /* Setup timetoken. */
    if (replylen-2 - (i+1) >= sizeof p->timetoken) {
    1580:	43f3      	mvns	r3, r6
    1582:	4443      	add	r3, r8
    1584:	2b3f      	cmp	r3, #63	; 0x3f
    1586:	d870      	bhi.n	166a <handle_tcpip+0x352>
        return -1;
    }
    strcpy(p->timetoken, reply + i+1);
    1588:	1c20      	adds	r0, r4, #0
    158a:	3010      	adds	r0, #16
    158c:	1c71      	adds	r1, r6, #1
    158e:	1869      	adds	r1, r5, r1
    1590:	4b31      	ldr	r3, [pc, #196]	; (1658 <handle_tcpip+0x340>)
    1592:	4798      	blx	r3
    reply[i-2] = 0; // terminate the [] message array (before the ]!)
    1594:	19ad      	adds	r5, r5, r6
    1596:	3d02      	subs	r5, #2
    1598:	2300      	movs	r3, #0
    159a:	702b      	strb	r3, [r5, #0]

    /* Set up the message list - offset, length and NUL-characters splitting
     * the messages. */
    p->msg_ofs = 2;
    159c:	2202      	movs	r2, #2
    159e:	4b2f      	ldr	r3, [pc, #188]	; (165c <handle_tcpip+0x344>)
    15a0:	52e2      	strh	r2, [r4, r3]
    p->msg_end = i-2;
    15a2:	3e02      	subs	r6, #2
    15a4:	23da      	movs	r3, #218	; 0xda
    15a6:	009b      	lsls	r3, r3, #2
    15a8:	52e6      	strh	r6, [r4, r3]

    return split_array(reply + p->msg_ofs) ? 0 : -1;
    15aa:	2368      	movs	r3, #104	; 0x68
    15ac:	33ff      	adds	r3, #255	; 0xff
    15ae:	18e2      	adds	r2, r4, r3
{
    bool escaped = false;
    bool in_string = false;
    int bracket_level = 0;

    for (; *buf != '\0'; ++buf) {
    15b0:	2368      	movs	r3, #104	; 0x68
    15b2:	33ff      	adds	r3, #255	; 0xff
    15b4:	5ce3      	ldrb	r3, [r4, r3]
    15b6:	2b00      	cmp	r3, #0
    15b8:	d057      	beq.n	166a <handle_tcpip+0x352>
 */
static bool split_array(char *buf)
{
    bool escaped = false;
    bool in_string = false;
    int bracket_level = 0;
    15ba:	2600      	movs	r6, #0
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    bool escaped = false;
    bool in_string = false;
    15bc:	2000      	movs	r0, #0
/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    bool escaped = false;
    15be:	2100      	movs	r1, #0
    bool in_string = false;
    int bracket_level = 0;

    for (; *buf != '\0'; ++buf) {
        if (escaped) {
            escaped = false;
    15c0:	2500      	movs	r5, #0
        } 
	else if ('"' == *buf) {
	    in_string = !in_string;
    15c2:	2701      	movs	r7, #1
    bool escaped = false;
    bool in_string = false;
    int bracket_level = 0;

    for (; *buf != '\0'; ++buf) {
        if (escaped) {
    15c4:	2900      	cmp	r1, #0
    15c6:	d14b      	bne.n	1660 <handle_tcpip+0x348>
            escaped = false;
        } 
	else if ('"' == *buf) {
    15c8:	2b22      	cmp	r3, #34	; 0x22
    15ca:	d102      	bne.n	15d2 <handle_tcpip+0x2ba>
	    in_string = !in_string;
    15cc:	4078      	eors	r0, r7
    15ce:	b2c0      	uxtb	r0, r0
    15d0:	e047      	b.n	1662 <handle_tcpip+0x34a>
	}
	else if (in_string) {
    15d2:	2800      	cmp	r0, #0
    15d4:	d005      	beq.n	15e2 <handle_tcpip+0x2ca>
	    escaped = ('\\' == *buf);
    15d6:	1c19      	adds	r1, r3, #0
    15d8:	395c      	subs	r1, #92	; 0x5c
    15da:	424b      	negs	r3, r1
    15dc:	4159      	adcs	r1, r3
    15de:	b2c9      	uxtb	r1, r1
    15e0:	e03f      	b.n	1662 <handle_tcpip+0x34a>
        }
	else {
            switch (*buf) {
    15e2:	2b5d      	cmp	r3, #93	; 0x5d
    15e4:	d00c      	beq.n	1600 <handle_tcpip+0x2e8>
    15e6:	d804      	bhi.n	15f2 <handle_tcpip+0x2da>
    15e8:	2b2c      	cmp	r3, #44	; 0x2c
    15ea:	d00b      	beq.n	1604 <handle_tcpip+0x2ec>
    15ec:	2b5b      	cmp	r3, #91	; 0x5b
    15ee:	d005      	beq.n	15fc <handle_tcpip+0x2e4>
    15f0:	e037      	b.n	1662 <handle_tcpip+0x34a>
    15f2:	2b7b      	cmp	r3, #123	; 0x7b
    15f4:	d002      	beq.n	15fc <handle_tcpip+0x2e4>
    15f6:	2b7d      	cmp	r3, #125	; 0x7d
    15f8:	d002      	beq.n	1600 <handle_tcpip+0x2e8>
    15fa:	e032      	b.n	1662 <handle_tcpip+0x34a>
	    case '[': case '{': bracket_level++; break;
    15fc:	3601      	adds	r6, #1
    15fe:	e030      	b.n	1662 <handle_tcpip+0x34a>
	    case ']': case '}': bracket_level--; break;
    1600:	3e01      	subs	r6, #1
    1602:	e02e      	b.n	1662 <handle_tcpip+0x34a>
                /* if at root, split! */
	    case ',': if (bracket_level == 0) *buf = '\0'; break;
    1604:	2e00      	cmp	r6, #0
    1606:	d12c      	bne.n	1662 <handle_tcpip+0x34a>
    1608:	7015      	strb	r5, [r2, #0]
    160a:	e02a      	b.n	1662 <handle_tcpip+0x34a>
    160c:	2000049c 	.word	0x2000049c
    1610:	00008b00 	.word	0x00008b00
    1614:	00007379 	.word	0x00007379
    1618:	00001211 	.word	0x00001211
    161c:	00008b2c 	.word	0x00008b2c
    1620:	00003949 	.word	0x00003949
    1624:	00008b58 	.word	0x00008b58
    1628:	00008b80 	.word	0x00008b80
    162c:	00008ba8 	.word	0x00008ba8
    1630:	00008bcc 	.word	0x00008bcc
    1634:	00001db1 	.word	0x00001db1
    1638:	000071e1 	.word	0x000071e1
    163c:	00008be0 	.word	0x00008be0
    1640:	0000725d 	.word	0x0000725d
    1644:	00008be4 	.word	0x00008be4
    1648:	00007281 	.word	0x00007281
    164c:	00007579 	.word	0x00007579
    1650:	00001109 	.word	0x00001109
    1654:	0000036a 	.word	0x0000036a
    1658:	00007569 	.word	0x00007569
    165c:	00000366 	.word	0x00000366
    bool in_string = false;
    int bracket_level = 0;

    for (; *buf != '\0'; ++buf) {
        if (escaped) {
            escaped = false;
    1660:	1c29      	adds	r1, r5, #0
{
    bool escaped = false;
    bool in_string = false;
    int bracket_level = 0;

    for (; *buf != '\0'; ++buf) {
    1662:	3201      	adds	r2, #1
    1664:	7813      	ldrb	r3, [r2, #0]
    1666:	2b00      	cmp	r3, #0
    1668:	d1ac      	bne.n	15c4 <handle_tcpip+0x2ac>
			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
			printf("http_reply = %s\r\n", pb->http_reply);
			
			parse_subscribe_response(pb);
			
			printf("timetoken = %s\r\n", pb->timetoken);
    166a:	1c21      	adds	r1, r4, #0
    166c:	3110      	adds	r1, #16
    166e:	4808      	ldr	r0, [pc, #32]	; (1690 <handle_tcpip+0x378>)
    1670:	4b08      	ldr	r3, [pc, #32]	; (1694 <handle_tcpip+0x37c>)
    1672:	4798      	blx	r3

			close(pb->tcp_socket);
    1674:	2353      	movs	r3, #83	; 0x53
    1676:	56e0      	ldrsb	r0, [r4, r3]
    1678:	4b07      	ldr	r3, [pc, #28]	; (1698 <handle_tcpip+0x380>)
    167a:	4798      	blx	r3
			
			pb->last_result = PNR_OK;
    167c:	2300      	movs	r3, #0
    167e:	2250      	movs	r2, #80	; 0x50
    1680:	54a3      	strb	r3, [r4, r2]
			pb->state = PS_IDLE;
    1682:	2252      	movs	r2, #82	; 0x52
    1684:	54a3      	strb	r3, [r4, r2]

		default:
		break;
	}

}
    1686:	bc0c      	pop	{r2, r3}
    1688:	4690      	mov	r8, r2
    168a:	4699      	mov	r9, r3
    168c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	00008bf8 	.word	0x00008bf8
    1694:	00007281 	.word	0x00007281
    1698:	00003949 	.word	0x00003949

0000169c <pubnub_init>:


/** Init the PubNub Client API
*/
void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
    169c:	b510      	push	{r4, lr}
static void handle_transaction(pubnub_t *pb);


static bool valid_ctx_prt(pubnub_t const *pb)
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    169e:	4b10      	ldr	r3, [pc, #64]	; (16e0 <pubnub_init+0x44>)
    16a0:	4298      	cmp	r0, r3
    16a2:	d315      	bcc.n	16d0 <pubnub_init+0x34>
    16a4:	24dc      	movs	r4, #220	; 0xdc
    16a6:	00e4      	lsls	r4, r4, #3
    16a8:	191b      	adds	r3, r3, r4
    16aa:	4298      	cmp	r0, r3
    16ac:	d210      	bcs.n	16d0 <pubnub_init+0x34>
*/
void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
	assert(valid_ctx_prt(pb));
	
	pb->publish_key = publish_key;
    16ae:	6001      	str	r1, [r0, #0]
	pb->subscribe_key = subscribe_key;
    16b0:	6042      	str	r2, [r0, #4]
	pb->timetoken[0] = '0';
    16b2:	2330      	movs	r3, #48	; 0x30
    16b4:	7403      	strb	r3, [r0, #16]
	pb->timetoken[1] = '\0';
    16b6:	2300      	movs	r3, #0
    16b8:	7443      	strb	r3, [r0, #17]
	pb->uuid = pb->auth = NULL;
    16ba:	60c3      	str	r3, [r0, #12]
    16bc:	6083      	str	r3, [r0, #8]
	pb->tcp_socket = -1;
    16be:	21ff      	movs	r1, #255	; 0xff
    16c0:	2253      	movs	r2, #83	; 0x53
    16c2:	5481      	strb	r1, [r0, r2]
	pb->state = PS_IDLE;
    16c4:	2252      	movs	r2, #82	; 0x52
    16c6:	5483      	strb	r3, [r0, r2]
	pb->last_result = PNR_IO_ERROR;
    16c8:	2202      	movs	r2, #2
    16ca:	2350      	movs	r3, #80	; 0x50
    16cc:	54c2      	strb	r2, [r0, r3]
    16ce:	e006      	b.n	16de <pubnub_init+0x42>

/** Init the PubNub Client API
*/
void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
	assert(valid_ctx_prt(pb));
    16d0:	4804      	ldr	r0, [pc, #16]	; (16e4 <pubnub_init+0x48>)
    16d2:	216c      	movs	r1, #108	; 0x6c
    16d4:	31ff      	adds	r1, #255	; 0xff
    16d6:	4a04      	ldr	r2, [pc, #16]	; (16e8 <pubnub_init+0x4c>)
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <pubnub_init+0x50>)
    16da:	4c05      	ldr	r4, [pc, #20]	; (16f0 <pubnub_init+0x54>)
    16dc:	47a0      	blx	r4
	pb->timetoken[1] = '\0';
	pb->uuid = pb->auth = NULL;
	pb->tcp_socket = -1;
	pb->state = PS_IDLE;
	pb->last_result = PNR_IO_ERROR;
}
    16de:	bd10      	pop	{r4, pc}
    16e0:	2000049c 	.word	0x2000049c
    16e4:	000089b8 	.word	0x000089b8
    16e8:	00008cd4 	.word	0x00008cd4
    16ec:	00008a60 	.word	0x00008a60
    16f0:	000071a5 	.word	0x000071a5

000016f4 <pubnub_publish>:


bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f6:	464f      	mov	r7, r9
    16f8:	4646      	mov	r6, r8
    16fa:	b4c0      	push	{r6, r7}
    16fc:	b085      	sub	sp, #20
    16fe:	1c06      	adds	r6, r0, #0
    1700:	1c14      	adds	r4, r2, #0
static void handle_transaction(pubnub_t *pb);


static bool valid_ctx_prt(pubnub_t const *pb)
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    1702:	4b4a      	ldr	r3, [pc, #296]	; (182c <pubnub_publish+0x138>)
    1704:	4298      	cmp	r0, r3
    1706:	d200      	bcs.n	170a <pubnub_publish+0x16>
    1708:	e082      	b.n	1810 <pubnub_publish+0x11c>
    170a:	22dc      	movs	r2, #220	; 0xdc
    170c:	00d2      	lsls	r2, r2, #3
    170e:	189b      	adds	r3, r3, r2
    1710:	4298      	cmp	r0, r3
    1712:	d27d      	bcs.n	1810 <pubnub_publish+0x11c>
    1714:	e076      	b.n	1804 <pubnub_publish+0x110>
	
	if(pb->state != PS_IDLE) {
		return false;
	}
	
	pb->trans = PBTT_PUBLISH;
    1716:	2202      	movs	r2, #2
    1718:	2351      	movs	r3, #81	; 0x51
    171a:	54f2      	strb	r2, [r6, r3]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    171c:	1c30      	adds	r0, r6, #0
    171e:	3054      	adds	r0, #84	; 0x54
    1720:	6873      	ldr	r3, [r6, #4]
    1722:	9300      	str	r3, [sp, #0]
    1724:	9101      	str	r1, [sp, #4]
    1726:	2180      	movs	r1, #128	; 0x80
    1728:	0049      	lsls	r1, r1, #1
    172a:	4a41      	ldr	r2, [pc, #260]	; (1830 <pubnub_publish+0x13c>)
    172c:	6833      	ldr	r3, [r6, #0]
    172e:	4d41      	ldr	r5, [pc, #260]	; (1834 <pubnub_publish+0x140>)
    1730:	47a8      	blx	r5
    1732:	23ac      	movs	r3, #172	; 0xac
    1734:	005b      	lsls	r3, r3, #1
    1736:	50f0      	str	r0, [r6, r3]
	
	const char *pmessage = message;
	
	while(pmessage[0]) {
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    1738:	493f      	ldr	r1, [pc, #252]	; (1838 <pubnub_publish+0x144>)
    173a:	4688      	mov	r8, r1
    173c:	4f3f      	ldr	r7, [pc, #252]	; (183c <pubnub_publish+0x148>)
			if(okspan > sizeof(pb->http_buf.url)-1 - pb->http_buf_len) {
				pb->http_buf_len = 0;
				return false;
			}
			
			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    173e:	4a40      	ldr	r2, [pc, #256]	; (1840 <pubnub_publish+0x14c>)
    1740:	4691      	mov	r9, r2
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
	
	const char *pmessage = message;
	
	while(pmessage[0]) {
    1742:	e04b      	b.n	17dc <pubnub_publish+0xe8>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    1744:	1c20      	adds	r0, r4, #0
    1746:	4641      	mov	r1, r8
    1748:	47b8      	blx	r7
    174a:	1e05      	subs	r5, r0, #0
		if(okspan > 0) {
    174c:	d067      	beq.n	181e <pubnub_publish+0x12a>
			if(okspan > sizeof(pb->http_buf.url)-1 - pb->http_buf_len) {
    174e:	23ac      	movs	r3, #172	; 0xac
    1750:	005b      	lsls	r3, r3, #1
    1752:	58f0      	ldr	r0, [r6, r3]
    1754:	23ff      	movs	r3, #255	; 0xff
    1756:	1a1b      	subs	r3, r3, r0
    1758:	429d      	cmp	r5, r3
    175a:	d905      	bls.n	1768 <pubnub_publish+0x74>
				pb->http_buf_len = 0;
    175c:	2200      	movs	r2, #0
    175e:	23ac      	movs	r3, #172	; 0xac
    1760:	005b      	lsls	r3, r3, #1
    1762:	50f2      	str	r2, [r6, r3]
				return false;
    1764:	2000      	movs	r0, #0
    1766:	e05c      	b.n	1822 <pubnub_publish+0x12e>
			}
			
			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    1768:	1830      	adds	r0, r6, r0
    176a:	3054      	adds	r0, #84	; 0x54
    176c:	1c21      	adds	r1, r4, #0
    176e:	1c2a      	adds	r2, r5, #0
    1770:	47c8      	blx	r9
			pb->http_buf_len += okspan;
    1772:	22ac      	movs	r2, #172	; 0xac
    1774:	0052      	lsls	r2, r2, #1
    1776:	58b1      	ldr	r1, [r6, r2]
    1778:	186b      	adds	r3, r5, r1
    177a:	50b3      	str	r3, [r6, r2]
			pb->http_buf.url[pb->http_buf_len] = 0;
    177c:	18f3      	adds	r3, r6, r3
    177e:	3350      	adds	r3, #80	; 0x50
    1780:	2200      	movs	r2, #0
    1782:	711a      	strb	r2, [r3, #4]
			pmessage += okspan;
    1784:	1964      	adds	r4, r4, r5
		}
		
		if(pmessage[0]) {
    1786:	7823      	ldrb	r3, [r4, #0]
    1788:	2b00      	cmp	r3, #0
    178a:	d027      	beq.n	17dc <pubnub_publish+0xe8>
			/* %-encode a non-ok character. */
			char enc[4] = {'%',};
    178c:	2200      	movs	r2, #0
    178e:	9203      	str	r2, [sp, #12]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    1790:	4a2c      	ldr	r2, [pc, #176]	; (1844 <pubnub_publish+0x150>)
    1792:	0919      	lsrs	r1, r3, #4
    1794:	5c50      	ldrb	r0, [r2, r1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    1796:	210f      	movs	r1, #15
    1798:	400b      	ands	r3, r1
    179a:	5cd5      	ldrb	r5, [r2, r3]
			if(3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    179c:	23ac      	movs	r3, #172	; 0xac
    179e:	005b      	lsls	r3, r3, #1
    17a0:	58f3      	ldr	r3, [r6, r3]
    17a2:	22ff      	movs	r2, #255	; 0xff
    17a4:	1ad2      	subs	r2, r2, r3
    17a6:	2a02      	cmp	r2, #2
    17a8:	d805      	bhi.n	17b6 <pubnub_publish+0xc2>
				pb->http_buf_len = 0;
    17aa:	2200      	movs	r2, #0
    17ac:	23ac      	movs	r3, #172	; 0xac
    17ae:	005b      	lsls	r3, r3, #1
    17b0:	50f2      	str	r2, [r6, r3]
				return false;
    17b2:	2000      	movs	r0, #0
    17b4:	e035      	b.n	1822 <pubnub_publish+0x12e>
			}
			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    17b6:	a903      	add	r1, sp, #12
    17b8:	2225      	movs	r2, #37	; 0x25
    17ba:	700a      	strb	r2, [r1, #0]
    17bc:	466a      	mov	r2, sp
    17be:	7350      	strb	r0, [r2, #13]
    17c0:	466a      	mov	r2, sp
    17c2:	7395      	strb	r5, [r2, #14]
    17c4:	18f3      	adds	r3, r6, r3
    17c6:	1c18      	adds	r0, r3, #0
    17c8:	3054      	adds	r0, #84	; 0x54
    17ca:	2204      	movs	r2, #4
    17cc:	4b1c      	ldr	r3, [pc, #112]	; (1840 <pubnub_publish+0x14c>)
    17ce:	4798      	blx	r3
			pb->http_buf_len += 3;
    17d0:	23ac      	movs	r3, #172	; 0xac
    17d2:	005b      	lsls	r3, r3, #1
    17d4:	58f2      	ldr	r2, [r6, r3]
    17d6:	3203      	adds	r2, #3
    17d8:	50f2      	str	r2, [r6, r3]
			++pmessage;
    17da:	3401      	adds	r4, #1
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
	
	const char *pmessage = message;
	
	while(pmessage[0]) {
    17dc:	7823      	ldrb	r3, [r4, #0]
    17de:	2b00      	cmp	r3, #0
    17e0:	d1b0      	bne.n	1744 <pubnub_publish+0x50>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}
	
	if(pb->last_result == PNR_OK) {
    17e2:	2350      	movs	r3, #80	; 0x50
    17e4:	5cf3      	ldrb	r3, [r6, r3]
    17e6:	2b00      	cmp	r3, #0
    17e8:	d107      	bne.n	17fa <pubnub_publish+0x106>
		pb->state = PS_WAIT_SEND;
    17ea:	2203      	movs	r2, #3
    17ec:	2352      	movs	r3, #82	; 0x52
    17ee:	54f2      	strb	r2, [r6, r3]
		handle_transaction(pb);
    17f0:	1c30      	adds	r0, r6, #0
    17f2:	4b15      	ldr	r3, [pc, #84]	; (1848 <pubnub_publish+0x154>)
    17f4:	4798      	blx	r3
	}
	else
		handle_start_connect(pb);
	
	return true;
    17f6:	2001      	movs	r0, #1
    17f8:	e013      	b.n	1822 <pubnub_publish+0x12e>
	if(pb->last_result == PNR_OK) {
		pb->state = PS_WAIT_SEND;
		handle_transaction(pb);
	}
	else
		handle_start_connect(pb);
    17fa:	1c30      	adds	r0, r6, #0
    17fc:	4b13      	ldr	r3, [pc, #76]	; (184c <pubnub_publish+0x158>)
    17fe:	4798      	blx	r3
	
	return true;
    1800:	2001      	movs	r0, #1
    1802:	e00e      	b.n	1822 <pubnub_publish+0x12e>

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->state != PS_IDLE) {
    1804:	2352      	movs	r3, #82	; 0x52
    1806:	5cc3      	ldrb	r3, [r0, r3]
		return false;
    1808:	2000      	movs	r0, #0

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->state != PS_IDLE) {
    180a:	2b00      	cmp	r3, #0
    180c:	d109      	bne.n	1822 <pubnub_publish+0x12e>
    180e:	e782      	b.n	1716 <pubnub_publish+0x22>
}


bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
	assert(valid_ctx_prt(pb));
    1810:	480f      	ldr	r0, [pc, #60]	; (1850 <pubnub_publish+0x15c>)
    1812:	21bd      	movs	r1, #189	; 0xbd
    1814:	0049      	lsls	r1, r1, #1
    1816:	4a0f      	ldr	r2, [pc, #60]	; (1854 <pubnub_publish+0x160>)
    1818:	4b0f      	ldr	r3, [pc, #60]	; (1858 <pubnub_publish+0x164>)
    181a:	4c10      	ldr	r4, [pc, #64]	; (185c <pubnub_publish+0x168>)
    181c:	47a0      	blx	r4
			pb->http_buf_len += okspan;
			pb->http_buf.url[pb->http_buf_len] = 0;
			pmessage += okspan;
		}
		
		if(pmessage[0]) {
    181e:	7823      	ldrb	r3, [r4, #0]
    1820:	e7b4      	b.n	178c <pubnub_publish+0x98>
	}
	else
		handle_start_connect(pb);
	
	return true;
};
    1822:	b005      	add	sp, #20
    1824:	bc0c      	pop	{r2, r3}
    1826:	4690      	mov	r8, r2
    1828:	4699      	mov	r9, r3
    182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    182c:	2000049c 	.word	0x2000049c
    1830:	00008c0c 	.word	0x00008c0c
    1834:	000074ad 	.word	0x000074ad
    1838:	00008c24 	.word	0x00008c24
    183c:	00007587 	.word	0x00007587
    1840:	0000725d 	.word	0x0000725d
    1844:	00008c70 	.word	0x00008c70
    1848:	00001211 	.word	0x00001211
    184c:	00001145 	.word	0x00001145
    1850:	000089b8 	.word	0x000089b8
    1854:	00008ce0 	.word	0x00008ce0
    1858:	00008a60 	.word	0x00008a60
    185c:	000071a5 	.word	0x000071a5

00001860 <pubnub_subscribe>:


bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    1860:	b5f0      	push	{r4, r5, r6, r7, lr}
    1862:	4647      	mov	r7, r8
    1864:	b480      	push	{r7}
    1866:	b08a      	sub	sp, #40	; 0x28
    1868:	1c04      	adds	r4, r0, #0
    186a:	1c0d      	adds	r5, r1, #0
static void handle_transaction(pubnub_t *pb);


static bool valid_ctx_prt(pubnub_t const *pb)
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    186c:	4b3e      	ldr	r3, [pc, #248]	; (1968 <pubnub_subscribe+0x108>)
    186e:	4298      	cmp	r0, r3
    1870:	d364      	bcc.n	193c <pubnub_subscribe+0xdc>
    1872:	22dc      	movs	r2, #220	; 0xdc
    1874:	00d2      	lsls	r2, r2, #3
    1876:	189b      	adds	r3, r3, r2
    1878:	4298      	cmp	r0, r3
    187a:	d25f      	bcs.n	193c <pubnub_subscribe+0xdc>
    187c:	e058      	b.n	1930 <pubnub_subscribe+0xd0>
	
	if(pb->state != PS_IDLE) {
		return false;
	}
	
	pb->trans = PBTT_SUBSCRIBE;
    187e:	2201      	movs	r2, #1
    1880:	2351      	movs	r3, #81	; 0x51
    1882:	54e2      	strb	r2, [r4, r3]
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
    1884:	2366      	movs	r3, #102	; 0x66
    1886:	33ff      	adds	r3, #255	; 0xff
    1888:	18e0      	adds	r0, r4, r3
    188a:	2100      	movs	r1, #0
    188c:	2280      	movs	r2, #128	; 0x80
    188e:	0092      	lsls	r2, r2, #2
    1890:	4b36      	ldr	r3, [pc, #216]	; (196c <pubnub_subscribe+0x10c>)
    1892:	4798      	blx	r3
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    1894:	1c20      	adds	r0, r4, #0
    1896:	3054      	adds	r0, #84	; 0x54
    1898:	6862      	ldr	r2, [r4, #4]
    189a:	4694      	mov	ip, r2
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
    189c:	2310      	movs	r3, #16
    189e:	191b      	adds	r3, r3, r4
    18a0:	4698      	mov	r8, r3
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    18a2:	68a2      	ldr	r2, [r4, #8]
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    18a4:	2a00      	cmp	r2, #0
    18a6:	d150      	bne.n	194a <pubnub_subscribe+0xea>
    18a8:	4931      	ldr	r1, [pc, #196]	; (1970 <pubnub_subscribe+0x110>)
    18aa:	1c0e      	adds	r6, r1, #0
    18ac:	1c0b      	adds	r3, r1, #0
    18ae:	1c0f      	adds	r7, r1, #0
    18b0:	1c0a      	adds	r2, r1, #0
    18b2:	e017      	b.n	18e4 <pubnub_subscribe+0x84>
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    18b4:	68e3      	ldr	r3, [r4, #12]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d14c      	bne.n	1954 <pubnub_subscribe+0xf4>
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    18ba:	2a00      	cmp	r2, #0
    18bc:	d007      	beq.n	18ce <pubnub_subscribe+0x6e>
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    18be:	1e19      	subs	r1, r3, #0
    18c0:	d10b      	bne.n	18da <pubnub_subscribe+0x7a>
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    18c2:	1c13      	adds	r3, r2, #0
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    18c4:	492a      	ldr	r1, [pc, #168]	; (1970 <pubnub_subscribe+0x110>)
    18c6:	1c0e      	adds	r6, r1, #0
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    18c8:	4f2a      	ldr	r7, [pc, #168]	; (1974 <pubnub_subscribe+0x114>)
    18ca:	1c0a      	adds	r2, r1, #0
    18cc:	e00a      	b.n	18e4 <pubnub_subscribe+0x84>
    18ce:	1c13      	adds	r3, r2, #0
    18d0:	4927      	ldr	r1, [pc, #156]	; (1970 <pubnub_subscribe+0x110>)
    18d2:	1c0e      	adds	r6, r1, #0
    18d4:	4f27      	ldr	r7, [pc, #156]	; (1974 <pubnub_subscribe+0x114>)
    18d6:	1c0a      	adds	r2, r1, #0
    18d8:	e004      	b.n	18e4 <pubnub_subscribe+0x84>
    18da:	1c13      	adds	r3, r2, #0
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    18dc:	1c0a      	adds	r2, r1, #0
    18de:	4924      	ldr	r1, [pc, #144]	; (1970 <pubnub_subscribe+0x110>)
    18e0:	1c0e      	adds	r6, r1, #0
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    18e2:	4f24      	ldr	r7, [pc, #144]	; (1974 <pubnub_subscribe+0x114>)
    18e4:	9500      	str	r5, [sp, #0]
    18e6:	4645      	mov	r5, r8
    18e8:	9501      	str	r5, [sp, #4]
    18ea:	9702      	str	r7, [sp, #8]
    18ec:	9303      	str	r3, [sp, #12]
    18ee:	9604      	str	r6, [sp, #16]
    18f0:	9105      	str	r1, [sp, #20]
    18f2:	9206      	str	r2, [sp, #24]
    18f4:	4b1e      	ldr	r3, [pc, #120]	; (1970 <pubnub_subscribe+0x110>)
    18f6:	9307      	str	r3, [sp, #28]
    18f8:	4b1f      	ldr	r3, [pc, #124]	; (1978 <pubnub_subscribe+0x118>)
    18fa:	9308      	str	r3, [sp, #32]
    18fc:	2180      	movs	r1, #128	; 0x80
    18fe:	0049      	lsls	r1, r1, #1
    1900:	4a1e      	ldr	r2, [pc, #120]	; (197c <pubnub_subscribe+0x11c>)
    1902:	4663      	mov	r3, ip
    1904:	4d1e      	ldr	r5, [pc, #120]	; (1980 <pubnub_subscribe+0x120>)
    1906:	47a8      	blx	r5
    1908:	23ac      	movs	r3, #172	; 0xac
    190a:	005b      	lsls	r3, r3, #1
    190c:	50e0      	str	r0, [r4, r3]
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
	 "", "0.1");
	
	if(pb->last_result == PNR_OK) {
    190e:	2350      	movs	r3, #80	; 0x50
    1910:	5ce3      	ldrb	r3, [r4, r3]
    1912:	2b00      	cmp	r3, #0
    1914:	d107      	bne.n	1926 <pubnub_subscribe+0xc6>
		pb->state = PS_WAIT_SEND;
    1916:	2203      	movs	r2, #3
    1918:	2352      	movs	r3, #82	; 0x52
    191a:	54e2      	strb	r2, [r4, r3]
		handle_transaction(pb);
    191c:	1c20      	adds	r0, r4, #0
    191e:	4b19      	ldr	r3, [pc, #100]	; (1984 <pubnub_subscribe+0x124>)
    1920:	4798      	blx	r3
	}
	else
		handle_start_connect(pb);
	
	return true;
    1922:	2001      	movs	r0, #1
    1924:	e01c      	b.n	1960 <pubnub_subscribe+0x100>
	if(pb->last_result == PNR_OK) {
		pb->state = PS_WAIT_SEND;
		handle_transaction(pb);
	}
	else
		handle_start_connect(pb);
    1926:	1c20      	adds	r0, r4, #0
    1928:	4b17      	ldr	r3, [pc, #92]	; (1988 <pubnub_subscribe+0x128>)
    192a:	4798      	blx	r3
	
	return true;
    192c:	2001      	movs	r0, #1
    192e:	e017      	b.n	1960 <pubnub_subscribe+0x100>

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->state != PS_IDLE) {
    1930:	2352      	movs	r3, #82	; 0x52
    1932:	5cc3      	ldrb	r3, [r0, r3]
		return false;
    1934:	2000      	movs	r0, #0

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->state != PS_IDLE) {
    1936:	2b00      	cmp	r3, #0
    1938:	d112      	bne.n	1960 <pubnub_subscribe+0x100>
    193a:	e7a0      	b.n	187e <pubnub_subscribe+0x1e>
};


bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
	assert(valid_ctx_prt(pb));
    193c:	4813      	ldr	r0, [pc, #76]	; (198c <pubnub_subscribe+0x12c>)
    193e:	21d8      	movs	r1, #216	; 0xd8
    1940:	0049      	lsls	r1, r1, #1
    1942:	4a13      	ldr	r2, [pc, #76]	; (1990 <pubnub_subscribe+0x130>)
    1944:	4b13      	ldr	r3, [pc, #76]	; (1994 <pubnub_subscribe+0x134>)
    1946:	4c14      	ldr	r4, [pc, #80]	; (1998 <pubnub_subscribe+0x138>)
    1948:	47a0      	blx	r4
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
    194a:	68e3      	ldr	r3, [r4, #12]
    194c:	2b00      	cmp	r3, #0
    194e:	d0b1      	beq.n	18b4 <pubnub_subscribe+0x54>
	
	pb->trans = PBTT_SUBSCRIBE;
	
	memset(pb->http_reply, NULL, PUBNUB_REPLY_MAXLEN);	
	
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    1950:	4e12      	ldr	r6, [pc, #72]	; (199c <pubnub_subscribe+0x13c>)
    1952:	e000      	b.n	1956 <pubnub_subscribe+0xf6>
    1954:	4e06      	ldr	r6, [pc, #24]	; (1970 <pubnub_subscribe+0x110>)
	 "/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
	 pb->subscribe_key, channel, pb->timetoken,
	 pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
	 pb->uuid && pb->auth ? "&" : "",
	 pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    1956:	1c13      	adds	r3, r2, #0
    1958:	68e2      	ldr	r2, [r4, #12]
    195a:	4911      	ldr	r1, [pc, #68]	; (19a0 <pubnub_subscribe+0x140>)
    195c:	4f05      	ldr	r7, [pc, #20]	; (1974 <pubnub_subscribe+0x114>)
    195e:	e7c1      	b.n	18e4 <pubnub_subscribe+0x84>
	}
	else
		handle_start_connect(pb);
	
	return true;
};
    1960:	b00a      	add	sp, #40	; 0x28
    1962:	bc04      	pop	{r2}
    1964:	4690      	mov	r8, r2
    1966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1968:	2000049c 	.word	0x2000049c
    196c:	0000726f 	.word	0x0000726f
    1970:	00008f34 	.word	0x00008f34
    1974:	00008c84 	.word	0x00008c84
    1978:	00008cd0 	.word	0x00008cd0
    197c:	00008c98 	.word	0x00008c98
    1980:	000074ad 	.word	0x000074ad
    1984:	00001211 	.word	0x00001211
    1988:	00001145 	.word	0x00001145
    198c:	000089b8 	.word	0x000089b8
    1990:	000089a4 	.word	0x000089a4
    1994:	00008a60 	.word	0x00008a60
    1998:	000071a5 	.word	0x000071a5
    199c:	00008c94 	.word	0x00008c94
    19a0:	00008c8c 	.word	0x00008c8c

000019a4 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    19a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19a6:	1c04      	adds	r4, r0, #0
static void handle_transaction(pubnub_t *pb);


static bool valid_ctx_prt(pubnub_t const *pb)
{
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    19a8:	4b15      	ldr	r3, [pc, #84]	; (1a00 <pubnub_get+0x5c>)
    19aa:	4298      	cmp	r0, r3
    19ac:	d31f      	bcc.n	19ee <pubnub_get+0x4a>
    19ae:	22dc      	movs	r2, #220	; 0xdc
    19b0:	00d2      	lsls	r2, r2, #3
    19b2:	189b      	adds	r3, r3, r2
    19b4:	4298      	cmp	r0, r3
    19b6:	d21a      	bcs.n	19ee <pubnub_get+0x4a>
    19b8:	e010      	b.n	19dc <pubnub_get+0x38>
char const *pubnub_get(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->msg_ofs < pb->msg_end) {
		char const *rslt = pb->http_reply + pb->msg_ofs;
    19ba:	19a5      	adds	r5, r4, r6
    19bc:	3566      	adds	r5, #102	; 0x66
    19be:	35ff      	adds	r5, #255	; 0xff
		pb->msg_ofs += strlen(rslt);
    19c0:	1c28      	adds	r0, r5, #0
    19c2:	4b10      	ldr	r3, [pc, #64]	; (1a04 <pubnub_get+0x60>)
    19c4:	4798      	blx	r3
    19c6:	1833      	adds	r3, r6, r0
    19c8:	b29b      	uxth	r3, r3
		
		if(pb->msg_ofs++ <= pb->msg_end) {
    19ca:	1c59      	adds	r1, r3, #1
    19cc:	4a0e      	ldr	r2, [pc, #56]	; (1a08 <pubnub_get+0x64>)
    19ce:	52a1      	strh	r1, [r4, r2]
			return rslt;
		}
	}
	
	return NULL;
    19d0:	2000      	movs	r0, #0
    19d2:	429f      	cmp	r7, r3
    19d4:	4140      	adcs	r0, r0
    19d6:	4240      	negs	r0, r0
    19d8:	4028      	ands	r0, r5
    19da:	e00f      	b.n	19fc <pubnub_get+0x58>

char const *pubnub_get(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->msg_ofs < pb->msg_end) {
    19dc:	4b0a      	ldr	r3, [pc, #40]	; (1a08 <pubnub_get+0x64>)
    19de:	5ac6      	ldrh	r6, [r0, r3]
    19e0:	23da      	movs	r3, #218	; 0xda
    19e2:	009b      	lsls	r3, r3, #2
    19e4:	5ac7      	ldrh	r7, [r0, r3]
		if(pb->msg_ofs++ <= pb->msg_end) {
			return rslt;
		}
	}
	
	return NULL;
    19e6:	2000      	movs	r0, #0

char const *pubnub_get(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
	
	if(pb->msg_ofs < pb->msg_end) {
    19e8:	42be      	cmp	r6, r7
    19ea:	d207      	bcs.n	19fc <pubnub_get+0x58>
    19ec:	e7e5      	b.n	19ba <pubnub_get+0x16>
	return true;
};

char const *pubnub_get(pubnub_t *pb)
{
	assert(valid_ctx_prt(pb));
    19ee:	4807      	ldr	r0, [pc, #28]	; (1a0c <pubnub_get+0x68>)
    19f0:	21e7      	movs	r1, #231	; 0xe7
    19f2:	0049      	lsls	r1, r1, #1
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <pubnub_get+0x6c>)
    19f6:	4b07      	ldr	r3, [pc, #28]	; (1a14 <pubnub_get+0x70>)
    19f8:	4c07      	ldr	r4, [pc, #28]	; (1a18 <pubnub_get+0x74>)
    19fa:	47a0      	blx	r4
			return rslt;
		}
	}
	
	return NULL;
}
    19fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	2000049c 	.word	0x2000049c
    1a04:	00007579 	.word	0x00007579
    1a08:	00000366 	.word	0x00000366
    1a0c:	000089b8 	.word	0x000089b8
    1a10:	00008980 	.word	0x00008980
    1a14:	00008a60 	.word	0x00008a60
    1a18:	000071a5 	.word	0x000071a5

00001a1c <chip_isr>:
#include "asf.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1a1c:	b508      	push	{r3, lr}
	if (gpfIsr) {
    1a1e:	4b03      	ldr	r3, [pc, #12]	; (1a2c <chip_isr+0x10>)
    1a20:	681b      	ldr	r3, [r3, #0]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d000      	beq.n	1a28 <chip_isr+0xc>
		gpfIsr();
    1a26:	4798      	blx	r3
	}
}
    1a28:	bd08      	pop	{r3, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	20000b7c 	.word	0x20000b7c

00001a30 <nm_bsp_sleep>:
 *	@author	M.S.M
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1a30:	b538      	push	{r3, r4, r5, lr}
	while (u32TimeMsec--) {
    1a32:	2800      	cmp	r0, #0
    1a34:	d006      	beq.n	1a44 <nm_bsp_sleep+0x14>
    1a36:	1c04      	adds	r4, r0, #0
		delay_ms(1);
    1a38:	4d03      	ldr	r5, [pc, #12]	; (1a48 <nm_bsp_sleep+0x18>)
    1a3a:	2001      	movs	r0, #1
    1a3c:	47a8      	blx	r5
    1a3e:	3c01      	subs	r4, #1
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1a40:	2c00      	cmp	r4, #0
    1a42:	d1fa      	bne.n	1a3a <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    1a44:	bd38      	pop	{r3, r4, r5, pc}
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	00003f01 	.word	0x00003f01

00001a4c <nm_bsp_reset>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
void nm_bsp_reset(void)
{
    1a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a4e:	4c07      	ldr	r4, [pc, #28]	; (1a6c <nm_bsp_reset+0x20>)
    1a50:	2720      	movs	r7, #32
    1a52:	6167      	str	r7, [r4, #20]
    1a54:	2640      	movs	r6, #64	; 0x40
    1a56:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, false);
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, false);
	nm_bsp_sleep(100);
    1a58:	2064      	movs	r0, #100	; 0x64
    1a5a:	4d05      	ldr	r5, [pc, #20]	; (1a70 <nm_bsp_reset+0x24>)
    1a5c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a5e:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WIFI_M2M_CHIP_ENABLE_PIN, true);
	nm_bsp_sleep(10);
    1a60:	200a      	movs	r0, #10
    1a62:	47a8      	blx	r5
    1a64:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WIFI_M2M_RESET_PIN, true);
	nm_bsp_sleep(100);
    1a66:	2064      	movs	r0, #100	; 0x64
    1a68:	47a8      	blx	r5
}
    1a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a6c:	41004480 	.word	0x41004480
    1a70:	00001a31 	.word	0x00001a31

00001a74 <nm_bsp_init>:
 *	@author	M.S.M
 *	@date	11 July 2012
 *	@version	1.0
 */
sint8 nm_bsp_init(void)
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1a78:	2300      	movs	r3, #0
    1a7a:	4a0e      	ldr	r2, [pc, #56]	; (1ab4 <nm_bsp_init+0x40>)
    1a7c:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1a7e:	ac01      	add	r4, sp, #4
    1a80:	2501      	movs	r5, #1
    1a82:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1a84:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1a86:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WIFI_M2M_RESET_PIN, &pin_conf);
    1a88:	2026      	movs	r0, #38	; 0x26
    1a8a:	1c21      	adds	r1, r4, #0
    1a8c:	4e0a      	ldr	r6, [pc, #40]	; (1ab8 <nm_bsp_init+0x44>)
    1a8e:	47b0      	blx	r6
	port_pin_set_config(CONF_WIFI_M2M_CHIP_ENABLE_PIN, &pin_conf);
    1a90:	2025      	movs	r0, #37	; 0x25
    1a92:	1c21      	adds	r1, r4, #0
    1a94:	47b0      	blx	r6
	port_pin_set_config(CONF_WIFI_M2M_WAKE_PIN, &pin_conf);
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	1c21      	adds	r1, r4, #0
    1a9a:	47b0      	blx	r6
	gpfIsr = NULL;

	init_chip_pins();

	/* Initialize the delay driver. */
	delay_init();
    1a9c:	4b07      	ldr	r3, [pc, #28]	; (1abc <nm_bsp_init+0x48>)
    1a9e:	4798      	blx	r3

	nm_bsp_reset();
    1aa0:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <nm_bsp_init+0x4c>)
    1aa2:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    1aa4:	4b07      	ldr	r3, [pc, #28]	; (1ac4 <nm_bsp_init+0x50>)
    1aa6:	701d      	strb	r5, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1aa8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1aac:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    1aae:	2000      	movs	r0, #0
    1ab0:	b002      	add	sp, #8
    1ab2:	bd70      	pop	{r4, r5, r6, pc}
    1ab4:	20000b7c 	.word	0x20000b7c
    1ab8:	000041b1 	.word	0x000041b1
    1abc:	00003ec5 	.word	0x00003ec5
    1ac0:	00001a4d 	.word	0x00001a4d
    1ac4:	2000040c 	.word	0x2000040c

00001ac8 <nm_bsp_register_isr>:
 *	@date	28 OCT 2013
 *	@sa		tpfNmBspIsr
 *	@version	1.0
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1ac8:	b500      	push	{lr}
    1aca:	b085      	sub	sp, #20
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1acc:	4b0d      	ldr	r3, [pc, #52]	; (1b04 <nm_bsp_register_isr+0x3c>)
    1ace:	6018      	str	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
	config->gpio_pin_mux        = 0;
    1ad0:	a901      	add	r1, sp, #4
    1ad2:	2300      	movs	r3, #0
    1ad4:	604b      	str	r3, [r1, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1ad6:	2201      	movs	r2, #1
    1ad8:	720a      	strb	r2, [r1, #8]
	config->wake_if_sleeping    = true;
    1ada:	724a      	strb	r2, [r1, #9]
	config->filter_input_signal = false;
    1adc:	728b      	strb	r3, [r1, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1ade:	2302      	movs	r3, #2
    1ae0:	72cb      	strb	r3, [r1, #11]

	extint_chan_get_config_defaults(&config_extint_chan);
	config_extint_chan.gpio_pin = CONF_WIFI_M2M_INT_PIN;
    1ae2:	2324      	movs	r3, #36	; 0x24
    1ae4:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WIFI_M2M_INT_MUX;
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;

	extint_chan_set_config(CONF_WIFI_M2M_INT_EIC, &config_extint_chan);
    1ae6:	2004      	movs	r0, #4
    1ae8:	4b07      	ldr	r3, [pc, #28]	; (1b08 <nm_bsp_register_isr+0x40>)
    1aea:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WIFI_M2M_INT_EIC,
    1aec:	4807      	ldr	r0, [pc, #28]	; (1b0c <nm_bsp_register_isr+0x44>)
    1aee:	2104      	movs	r1, #4
    1af0:	2200      	movs	r2, #0
    1af2:	4b07      	ldr	r3, [pc, #28]	; (1b10 <nm_bsp_register_isr+0x48>)
    1af4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WIFI_M2M_INT_EIC,
    1af6:	2004      	movs	r0, #4
    1af8:	2100      	movs	r1, #0
    1afa:	4b06      	ldr	r3, [pc, #24]	; (1b14 <nm_bsp_register_isr+0x4c>)
    1afc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1afe:	b005      	add	sp, #20
    1b00:	bd00      	pop	{pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	20000b7c 	.word	0x20000b7c
    1b08:	0000405d 	.word	0x0000405d
    1b0c:	00001a1d 	.word	0x00001a1d
    1b10:	000040d5 	.word	0x000040d5
    1b14:	00004105 	.word	0x00004105

00001b18 <nm_bsp_interrupt_ctrl>:
 *	@author	M.S.M
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1b18:	b508      	push	{r3, lr}
	if (u8Enable) {
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d004      	beq.n	1b28 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WIFI_M2M_INT_EIC,
    1b1e:	2004      	movs	r0, #4
    1b20:	2100      	movs	r1, #0
    1b22:	4b04      	ldr	r3, [pc, #16]	; (1b34 <nm_bsp_interrupt_ctrl+0x1c>)
    1b24:	4798      	blx	r3
    1b26:	e003      	b.n	1b30 <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WIFI_M2M_INT_EIC,
    1b28:	2004      	movs	r0, #4
    1b2a:	2100      	movs	r1, #0
    1b2c:	4b02      	ldr	r3, [pc, #8]	; (1b38 <nm_bsp_interrupt_ctrl+0x20>)
    1b2e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1b30:	bd08      	pop	{r3, pc}
    1b32:	46c0      	nop			; (mov r8, r8)
    1b34:	00004105 	.word	0x00004105
    1b38:	00004125 	.word	0x00004125

00001b3c <nm_bus_init>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
sint8 nm_bus_init(void *pvInitValue)
{
    1b3c:	b510      	push	{r4, lr}
    1b3e:	b090      	sub	sp, #64	; 0x40
		struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1b40:	4c29      	ldr	r4, [pc, #164]	; (1be8 <nm_bus_init+0xac>)
    1b42:	2305      	movs	r3, #5
    1b44:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1b46:	2300      	movs	r3, #0
    1b48:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1b4a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1b4c:	a901      	add	r1, sp, #4
    1b4e:	2201      	movs	r2, #1
    1b50:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1b52:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1b54:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1b56:	2005      	movs	r0, #5
    1b58:	4b24      	ldr	r3, [pc, #144]	; (1bec <nm_bus_init+0xb0>)
    1b5a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1b5c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b5e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b60:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b62:	2900      	cmp	r1, #0
    1b64:	d103      	bne.n	1b6e <nm_bus_init+0x32>
		return &(ports[port_index]->Group[group_index]);
    1b66:	095a      	lsrs	r2, r3, #5
    1b68:	01d2      	lsls	r2, r2, #7
    1b6a:	4821      	ldr	r0, [pc, #132]	; (1bf0 <nm_bus_init+0xb4>)
    1b6c:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b6e:	211f      	movs	r1, #31
    1b70:	400b      	ands	r3, r1
    1b72:	2101      	movs	r1, #1
    1b74:	1c08      	adds	r0, r1, #0
    1b76:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b78:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1b7a:	aa02      	add	r2, sp, #8
    1b7c:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1b7e:	2300      	movs	r3, #0
    1b80:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1b82:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1b84:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
    1b86:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
    1b88:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1b8a:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1b8c:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1b8e:	2124      	movs	r1, #36	; 0x24
    1b90:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1b92:	9309      	str	r3, [sp, #36]	; 0x24
    1b94:	930a      	str	r3, [sp, #40]	; 0x28
	slave_config.ss_pin = CONF_WIFI_M2M_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WIFI_M2M_SPI_SERCOM_MUX;
    1b96:	2380      	movs	r3, #128	; 0x80
    1b98:	025b      	lsls	r3, r3, #9
    1b9a:	60d3      	str	r3, [r2, #12]
	config.pinmux_pad0 = CONF_WIFI_M2M_SPI_PINMUX_PAD0;
    1b9c:	4b15      	ldr	r3, [pc, #84]	; (1bf4 <nm_bus_init+0xb8>)
    1b9e:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = CONF_WIFI_M2M_SPI_PINMUX_PAD1;
    1ba0:	2301      	movs	r3, #1
    1ba2:	425b      	negs	r3, r3
    1ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WIFI_M2M_SPI_PINMUX_PAD2;
    1ba6:	4b14      	ldr	r3, [pc, #80]	; (1bf8 <nm_bus_init+0xbc>)
    1ba8:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = CONF_WIFI_M2M_SPI_PINMUX_PAD3;
    1baa:	4b14      	ldr	r3, [pc, #80]	; (1bfc <nm_bus_init+0xc0>)
    1bac:	6353      	str	r3, [r2, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WIFI_M2M_SPI_BAUDRATE;
    1bae:	4b14      	ldr	r3, [pc, #80]	; (1c00 <nm_bus_init+0xc4>)
    1bb0:	6193      	str	r3, [r2, #24]
	if (spi_init(&master, CONF_WIFI_M2M_SPI_MODULE, &config) != STATUS_OK) {
    1bb2:	4814      	ldr	r0, [pc, #80]	; (1c04 <nm_bus_init+0xc8>)
    1bb4:	4914      	ldr	r1, [pc, #80]	; (1c08 <nm_bus_init+0xcc>)
    1bb6:	4b15      	ldr	r3, [pc, #84]	; (1c0c <nm_bus_init+0xd0>)
    1bb8:	4798      	blx	r3
    1bba:	2800      	cmp	r0, #0
    1bbc:	d10f      	bne.n	1bde <nm_bus_init+0xa2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1bbe:	4b11      	ldr	r3, [pc, #68]	; (1c04 <nm_bus_init+0xc8>)
    1bc0:	681a      	ldr	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1bc2:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d1fc      	bne.n	1bc2 <nm_bus_init+0x86>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1bc8:	6811      	ldr	r1, [r2, #0]
    1bca:	2302      	movs	r3, #2
    1bcc:	430b      	orrs	r3, r1
    1bce:	6013      	str	r3, [r2, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1bd0:	4b0f      	ldr	r3, [pc, #60]	; (1c10 <nm_bus_init+0xd4>)
    1bd2:	4798      	blx	r3
	nm_bsp_sleep(1);
    1bd4:	2001      	movs	r0, #1
    1bd6:	4b0f      	ldr	r3, [pc, #60]	; (1c14 <nm_bus_init+0xd8>)
    1bd8:	4798      	blx	r3
#endif
	return result;
    1bda:	2000      	movs	r0, #0
    1bdc:	e000      	b.n	1be0 <nm_bus_init+0xa4>
	config.pinmux_pad3 = CONF_WIFI_M2M_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WIFI_M2M_SPI_BAUDRATE;
	if (spi_init(&master, CONF_WIFI_M2M_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
    1bde:	20fa      	movs	r0, #250	; 0xfa
    1be0:	b240      	sxtb	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
    1be2:	b010      	add	sp, #64	; 0x40
    1be4:	bd10      	pop	{r4, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	20000cd8 	.word	0x20000cd8
    1bec:	000041b1 	.word	0x000041b1
    1bf0:	41004400 	.word	0x41004400
    1bf4:	00040003 	.word	0x00040003
    1bf8:	00060003 	.word	0x00060003
    1bfc:	00070003 	.word	0x00070003
    1c00:	00989680 	.word	0x00989680
    1c04:	20000cdc 	.word	0x20000cdc
    1c08:	42000800 	.word	0x42000800
    1c0c:	00003a69 	.word	0x00003a69
    1c10:	00001a4d 	.word	0x00001a4d
    1c14:	00001a31 	.word	0x00001a31

00001c18 <nm_bus_ioctl>:
*	@date	28 oct 2013
*	@note	For SPI only, it's important to be able to send/receive at the same time
*	@version	1.0
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1c18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c1a:	465f      	mov	r7, fp
    1c1c:	4656      	mov	r6, sl
    1c1e:	464d      	mov	r5, r9
    1c20:	4644      	mov	r4, r8
    1c22:	b4f0      	push	{r4, r5, r6, r7}
    1c24:	b087      	sub	sp, #28
	sint8 s8Ret = 0;
	switch(u8Cmd)
    1c26:	2803      	cmp	r0, #3
    1c28:	d16c      	bne.n	1d04 <nm_bus_ioctl+0xec>
		}
		break;
#elif defined USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1c2a:	680e      	ldr	r6, [r1, #0]
    1c2c:	684d      	ldr	r5, [r1, #4]
    1c2e:	890f      	ldrh	r7, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
    1c30:	2200      	movs	r2, #0
    1c32:	466b      	mov	r3, sp
    1c34:	75da      	strb	r2, [r3, #23]
    1c36:	3317      	adds	r3, #23
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
    1c38:	2e00      	cmp	r6, #0
    1c3a:	d005      	beq.n	1c48 <nm_bus_ioctl+0x30>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
    1c3c:	2d00      	cmp	r5, #0
    1c3e:	d15f      	bne.n	1d00 <nm_bus_ioctl+0xe8>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
    1c40:	2401      	movs	r4, #1
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1c42:	9502      	str	r5, [sp, #8]
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
    1c44:	1c1d      	adds	r5, r3, #0
    1c46:	e004      	b.n	1c52 <nm_bus_ioctl+0x3a>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1c48:	2400      	movs	r4, #0
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
    1c4a:	2001      	movs	r0, #1
    1c4c:	9002      	str	r0, [sp, #8]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
    1c4e:	466e      	mov	r6, sp
    1c50:	3617      	adds	r6, #23
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
    1c52:	4831      	ldr	r0, [pc, #196]	; (1d18 <nm_bus_ioctl+0x100>)
    1c54:	4931      	ldr	r1, [pc, #196]	; (1d1c <nm_bus_ioctl+0x104>)
    1c56:	2201      	movs	r2, #1
    1c58:	4b31      	ldr	r3, [pc, #196]	; (1d20 <nm_bus_ioctl+0x108>)
    1c5a:	4798      	blx	r3

	while (u16Sz) {
    1c5c:	2f00      	cmp	r7, #0
    1c5e:	d042      	beq.n	1ce6 <nm_bus_ioctl+0xce>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c60:	4b2d      	ldr	r3, [pc, #180]	; (1d18 <nm_bus_ioctl+0x100>)
    1c62:	469a      	mov	sl, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c64:	2101      	movs	r1, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c66:	2204      	movs	r2, #4
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1c68:	2000      	movs	r0, #0
    1c6a:	4684      	mov	ip, r0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1c6c:	2304      	movs	r3, #4
    1c6e:	4699      	mov	r9, r3
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    1c70:	201e      	movs	r0, #30
    1c72:	4680      	mov	r8, r0
			;
		*pu8Miso = rxd_data;
			
		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
    1c74:	4263      	negs	r3, r4
    1c76:	4163      	adcs	r3, r4
    1c78:	9303      	str	r3, [sp, #12]
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
    1c7a:	7834      	ldrb	r4, [r6, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1c7c:	4650      	mov	r0, sl
    1c7e:	6803      	ldr	r3, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1c80:	7e18      	ldrb	r0, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    1c82:	4208      	tst	r0, r1
    1c84:	d0fc      	beq.n	1c80 <nm_bus_ioctl+0x68>
    1c86:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1c88:	4208      	tst	r0, r1
    1c8a:	d0fc      	beq.n	1c86 <nm_bus_ioctl+0x6e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1c8c:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c8e:	7e18      	ldrb	r0, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    1c90:	4210      	tst	r0, r2
    1c92:	d0fc      	beq.n	1c8e <nm_bus_ioctl+0x76>
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1c94:	4820      	ldr	r0, [pc, #128]	; (1d18 <nm_bus_ioctl+0x100>)
    1c96:	7984      	ldrb	r4, [r0, #6]
    1c98:	9501      	str	r5, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1c9a:	7e18      	ldrb	r0, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1c9c:	4210      	tst	r0, r2
    1c9e:	d0fc      	beq.n	1c9a <nm_bus_ioctl+0x82>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1ca0:	8b5d      	ldrh	r5, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1ca2:	4660      	mov	r0, ip

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1ca4:	4215      	tst	r5, r2
    1ca6:	d005      	beq.n	1cb4 <nm_bus_ioctl+0x9c>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    1ca8:	8b58      	ldrh	r0, [r3, #26]
    1caa:	464d      	mov	r5, r9
    1cac:	4328      	orrs	r0, r5
    1cae:	b280      	uxth	r0, r0
    1cb0:	8358      	strh	r0, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    1cb2:	4640      	mov	r0, r8
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1cb4:	2c01      	cmp	r4, #1
    1cb6:	d104      	bne.n	1cc2 <nm_bus_ioctl+0xaa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1cb8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1cba:	05ed      	lsls	r5, r5, #23
    1cbc:	0ded      	lsrs	r5, r5, #23
    1cbe:	46ab      	mov	fp, r5
    1cc0:	e002      	b.n	1cc8 <nm_bus_ioctl+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1cc2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    1cc4:	b2ed      	uxtb	r5, r5
    1cc6:	46ab      	mov	fp, r5
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1cc8:	2800      	cmp	r0, #0
    1cca:	d1e6      	bne.n	1c9a <nm_bus_ioctl+0x82>
    1ccc:	9d01      	ldr	r5, [sp, #4]
			;
		*pu8Miso = rxd_data;
    1cce:	4658      	mov	r0, fp
    1cd0:	7028      	strb	r0, [r5, #0]
			
		u16Sz--;
    1cd2:	3f01      	subs	r7, #1
    1cd4:	b2bf      	uxth	r7, r7
		if (!u8SkipMiso)
			pu8Miso++;
    1cd6:	9b03      	ldr	r3, [sp, #12]
    1cd8:	18ed      	adds	r5, r5, r3
		if (!u8SkipMosi)
			pu8Mosi++;
    1cda:	9c02      	ldr	r4, [sp, #8]
    1cdc:	4263      	negs	r3, r4
    1cde:	4163      	adcs	r3, r4
    1ce0:	18f6      	adds	r6, r6, r3
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    1ce2:	2f00      	cmp	r7, #0
    1ce4:	d1c9      	bne.n	1c7a <nm_bus_ioctl+0x62>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ce6:	4b0c      	ldr	r3, [pc, #48]	; (1d18 <nm_bus_ioctl+0x100>)
    1ce8:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1cea:	2202      	movs	r2, #2
    1cec:	7e0b      	ldrb	r3, [r1, #24]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    1cee:	4213      	tst	r3, r2
    1cf0:	d0fc      	beq.n	1cec <nm_bus_ioctl+0xd4>
		;

	spi_select_slave(&master, &slave_inst, false);
    1cf2:	4809      	ldr	r0, [pc, #36]	; (1d18 <nm_bus_ioctl+0x100>)
    1cf4:	4909      	ldr	r1, [pc, #36]	; (1d1c <nm_bus_ioctl+0x104>)
    1cf6:	2200      	movs	r2, #0
    1cf8:	4b09      	ldr	r3, [pc, #36]	; (1d20 <nm_bus_ioctl+0x108>)
    1cfa:	4798      	blx	r3

	return M2M_SUCCESS;
    1cfc:	2000      	movs	r0, #0
    1cfe:	e002      	b.n	1d06 <nm_bus_ioctl+0xee>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
    1d00:	20fa      	movs	r0, #250	; 0xfa
#elif defined USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
    1d02:	e000      	b.n	1d06 <nm_bus_ioctl+0xee>
#endif
		default:
			s8Ret = -1;
    1d04:	20ff      	movs	r0, #255	; 0xff
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
    1d06:	b240      	sxtb	r0, r0
}
    1d08:	b007      	add	sp, #28
    1d0a:	bc3c      	pop	{r2, r3, r4, r5}
    1d0c:	4690      	mov	r8, r2
    1d0e:	4699      	mov	r9, r3
    1d10:	46a2      	mov	sl, r4
    1d12:	46ab      	mov	fp, r5
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	20000cdc 	.word	0x20000cdc
    1d1c:	20000cd8 	.word	0x20000cd8
    1d20:	00003d11 	.word	0x00003d11

00001d24 <nm_bus_deinit>:
*	@version	1.0
*/
sint8 nm_bus_deinit(void)
{
	return 0;
}
    1d24:	2000      	movs	r0, #0
    1d26:	4770      	bx	lr

00001d28 <m2m_memcpy>:
 */
#include "common\include\nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1d28:	2a00      	cmp	r2, #0
    1d2a:	d006      	beq.n	1d3a <m2m_memcpy+0x12>
    1d2c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1d2e:	780b      	ldrb	r3, [r1, #0]
    1d30:	7003      	strb	r3, [r0, #0]
		pDst++;
    1d32:	3001      	adds	r0, #1
		pSrc++;
    1d34:	3101      	adds	r1, #1
	}while(--sz);
    1d36:	4290      	cmp	r0, r2
    1d38:	d1f9      	bne.n	1d2e <m2m_memcpy+0x6>
}
    1d3a:	4770      	bx	lr

00001d3c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1d3c:	2a00      	cmp	r2, #0
    1d3e:	d004      	beq.n	1d4a <m2m_memset+0xe>
    1d40:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1d42:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1d44:	3001      	adds	r0, #1
	}while(--sz);
    1d46:	4290      	cmp	r0, r2
    1d48:	d1fb      	bne.n	1d42 <m2m_memset+0x6>
}
    1d4a:	4770      	bx	lr

00001d4c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1d4c:	1c03      	adds	r3, r0, #0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1d4e:	7802      	ldrb	r2, [r0, #0]
    1d50:	2a00      	cmp	r2, #0
    1d52:	d007      	beq.n	1d64 <m2m_strlen+0x18>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
    1d54:	2000      	movs	r0, #0
	while(*pcStr)
	{
		u16StrLen ++;
    1d56:	3001      	adds	r0, #1
    1d58:	b280      	uxth	r0, r0
		pcStr++;
    1d5a:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	2a00      	cmp	r2, #0
    1d60:	d1f9      	bne.n	1d56 <m2m_strlen+0xa>
    1d62:	e000      	b.n	1d66 <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
    1d64:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
    1d66:	4770      	bx	lr

00001d68 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    1d68:	b510      	push	{r4, lr}
    1d6a:	1c03      	adds	r3, r0, #0
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    1d6c:	2a00      	cmp	r2, #0
    1d6e:	d01a      	beq.n	1da6 <m2m_strncmp+0x3e>
	if (*pcS1 != *pcS2)
    1d70:	7800      	ldrb	r0, [r0, #0]
    1d72:	780c      	ldrb	r4, [r1, #0]
    1d74:	42a0      	cmp	r0, r4
    1d76:	d10a      	bne.n	1d8e <m2m_strncmp+0x26>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
    1d78:	2800      	cmp	r0, #0
    1d7a:	d017      	beq.n	1dac <m2m_strncmp+0x44>
    1d7c:	3a01      	subs	r2, #1
    1d7e:	b292      	uxth	r2, r2
    1d80:	3201      	adds	r2, #1
    1d82:	189a      	adds	r2, r3, r2
    1d84:	e009      	b.n	1d9a <m2m_strncmp+0x32>
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
    1d86:	7818      	ldrb	r0, [r3, #0]
    1d88:	780c      	ldrb	r4, [r1, #0]
    1d8a:	42a0      	cmp	r0, r4
    1d8c:	d003      	beq.n	1d96 <m2m_strncmp+0x2e>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    1d8e:	42a0      	cmp	r0, r4
    1d90:	d20b      	bcs.n	1daa <m2m_strncmp+0x42>
    1d92:	20ff      	movs	r0, #255	; 0xff
    1d94:	e00a      	b.n	1dac <m2m_strncmp+0x44>
	else if (*pcS1 == '\0')
    1d96:	2800      	cmp	r0, #0
    1d98:	d008      	beq.n	1dac <m2m_strncmp+0x44>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    1d9a:	3301      	adds	r3, #1
    1d9c:	3101      	adds	r1, #1
    1d9e:	4293      	cmp	r3, r2
    1da0:	d1f1      	bne.n	1d86 <m2m_strncmp+0x1e>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    1da2:	2000      	movs	r0, #0
    1da4:	e002      	b.n	1dac <m2m_strncmp+0x44>
    1da6:	2000      	movs	r0, #0
    1da8:	e000      	b.n	1dac <m2m_strncmp+0x44>

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    1daa:	2001      	movs	r0, #1
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
}
    1dac:	bd10      	pop	{r4, pc}
    1dae:	46c0      	nop			; (mov r8, r8)

00001db0 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn. 
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    1db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db2:	4647      	mov	r7, r8
    1db4:	b480      	push	{r7}
    1db6:	1c04      	adds	r4, r0, #0
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    1db8:	780f      	ldrb	r7, [r1, #0]
    if (!u8c)
    1dba:	2f00      	cmp	r7, #0
    1dbc:	d017      	beq.n	1dee <m2m_strstr+0x3e>
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    1dbe:	3101      	adds	r1, #1
    1dc0:	4688      	mov	r8, r1
    if (!u8c)
        return (uint8 *) pcIn;	// Trivial empty string case

    u16StrLen = m2m_strlen(pcStr);
    1dc2:	1c08      	adds	r0, r1, #0
    1dc4:	4b0b      	ldr	r3, [pc, #44]	; (1df4 <m2m_strstr+0x44>)
    1dc6:	4798      	blx	r3
    1dc8:	1c06      	adds	r6, r0, #0
    1dca:	e000      	b.n	1dce <m2m_strstr+0x1e>
    1dcc:	1c2c      	adds	r4, r5, #0
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    1dce:	1c65      	adds	r5, r4, #1
    1dd0:	7823      	ldrb	r3, [r4, #0]
            if (!u8Sc)
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d00a      	beq.n	1dec <m2m_strstr+0x3c>
                return (uint8 *) 0;
        } while (u8Sc != u8c);
    1dd6:	42bb      	cmp	r3, r7
    1dd8:	d1f8      	bne.n	1dcc <m2m_strstr+0x1c>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    1dda:	1c28      	adds	r0, r5, #0
    1ddc:	4641      	mov	r1, r8
    1dde:	1c32      	adds	r2, r6, #0
    1de0:	4b05      	ldr	r3, [pc, #20]	; (1df8 <m2m_strstr+0x48>)
    1de2:	4798      	blx	r3
    1de4:	2800      	cmp	r0, #0
    1de6:	d1f1      	bne.n	1dcc <m2m_strstr+0x1c>
    1de8:	1c20      	adds	r0, r4, #0
    1dea:	e000      	b.n	1dee <m2m_strstr+0x3e>
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
            if (!u8Sc)
                return (uint8 *) 0;
    1dec:	2000      	movs	r0, #0
        } while (u8Sc != u8c);
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);

    return (uint8 *) (pcIn - 1);
}
    1dee:	bc04      	pop	{r2}
    1df0:	4690      	mov	r8, r2
    1df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1df4:	00001d4d 	.word	0x00001d4d
    1df8:	00001d69 	.word	0x00001d69

00001dfc <isr>:
tpfHifCallBack pfOtaCb = NULL;		/*!< pointer to OTA call back function */
tpfHifCallBack pfHifCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
    1dfc:	4b02      	ldr	r3, [pc, #8]	; (1e08 <isr+0xc>)
    1dfe:	781a      	ldrb	r2, [r3, #0]
    1e00:	3201      	adds	r2, #1
    1e02:	b2d2      	uxtb	r2, r2
    1e04:	701a      	strb	r2, [r3, #0]
#ifdef LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    1e06:	4770      	bx	lr
    1e08:	20000b84 	.word	0x20000b84

00001e0c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			; (mov r8, r8)

00001e10 <hif_set_rx_done>:
#ifdef LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
    1e10:	b500      	push	{lr}
    1e12:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    1e14:	2001      	movs	r0, #1
    1e16:	4b09      	ldr	r3, [pc, #36]	; (1e3c <hif_set_rx_done+0x2c>)
    1e18:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1e1a:	4809      	ldr	r0, [pc, #36]	; (1e40 <hif_set_rx_done+0x30>)
    1e1c:	a901      	add	r1, sp, #4
    1e1e:	4b09      	ldr	r3, [pc, #36]	; (1e44 <hif_set_rx_done+0x34>)
    1e20:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1e22:	2800      	cmp	r0, #0
    1e24:	d106      	bne.n	1e34 <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);		
    1e26:	2102      	movs	r1, #2
    1e28:	9b01      	ldr	r3, [sp, #4]
    1e2a:	4319      	orrs	r1, r3
    1e2c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1e2e:	4804      	ldr	r0, [pc, #16]	; (1e40 <hif_set_rx_done+0x30>)
    1e30:	4b05      	ldr	r3, [pc, #20]	; (1e48 <hif_set_rx_done+0x38>)
    1e32:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    1e34:	b240      	sxtb	r0, r0
	
}
    1e36:	b003      	add	sp, #12
    1e38:	bd00      	pop	{pc}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	00001b19 	.word	0x00001b19
    1e40:	00001070 	.word	0x00001070
    1e44:	00002c35 	.word	0x00002c35
    1e48:	00002c41 	.word	0x00002c41

00001e4c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_chip_wake(void)
{
    1e4c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
    1e4e:	4b10      	ldr	r3, [pc, #64]	; (1e90 <hif_chip_wake+0x44>)
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d113      	bne.n	1e7e <hif_chip_wake+0x32>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1e56:	4b0f      	ldr	r3, [pc, #60]	; (1e94 <hif_chip_wake+0x48>)
    1e58:	781b      	ldrb	r3, [r3, #0]
    1e5a:	2b03      	cmp	r3, #3
    1e5c:	d004      	beq.n	1e68 <hif_chip_wake+0x1c>
    1e5e:	4b0d      	ldr	r3, [pc, #52]	; (1e94 <hif_chip_wake+0x48>)
    1e60:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
    1e62:	2000      	movs	r0, #0
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1e64:	2b04      	cmp	r3, #4
    1e66:	d10b      	bne.n	1e80 <hif_chip_wake+0x34>
		{
			ret = nm_clkless_wake();
    1e68:	4b0b      	ldr	r3, [pc, #44]	; (1e98 <hif_chip_wake+0x4c>)
    1e6a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1e6c:	2800      	cmp	r0, #0
    1e6e:	d10c      	bne.n	1e8a <hif_chip_wake+0x3e>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    1e70:	480a      	ldr	r0, [pc, #40]	; (1e9c <hif_chip_wake+0x50>)
    1e72:	490b      	ldr	r1, [pc, #44]	; (1ea0 <hif_chip_wake+0x54>)
    1e74:	4b0b      	ldr	r3, [pc, #44]	; (1ea4 <hif_chip_wake+0x58>)
    1e76:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1e78:	2800      	cmp	r0, #0
    1e7a:	d001      	beq.n	1e80 <hif_chip_wake+0x34>
    1e7c:	e005      	b.n	1e8a <hif_chip_wake+0x3e>
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
    1e7e:	2000      	movs	r0, #0
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    1e80:	4b03      	ldr	r3, [pc, #12]	; (1e90 <hif_chip_wake+0x44>)
    1e82:	781a      	ldrb	r2, [r3, #0]
    1e84:	3201      	adds	r2, #1
    1e86:	b2d2      	uxtb	r2, r2
    1e88:	701a      	strb	r2, [r3, #0]
ERR1:
	return ret;
    1e8a:	b240      	sxtb	r0, r0
}
    1e8c:	bd08      	pop	{r3, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	20000b9c 	.word	0x20000b9c
    1e94:	20000b8c 	.word	0x20000b8c
    1e98:	000026ed 	.word	0x000026ed
    1e9c:	00001074 	.word	0x00001074
    1ea0:	00005678 	.word	0x00005678
    1ea4:	00002c41 	.word	0x00002c41

00001ea8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_chip_sleep(void)
{
    1ea8:	b500      	push	{lr}
    1eaa:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	gu8ChipSleep--;
    1eac:	4b15      	ldr	r3, [pc, #84]	; (1f04 <hif_chip_sleep+0x5c>)
    1eae:	781a      	ldrb	r2, [r3, #0]
    1eb0:	3a01      	subs	r2, #1
    1eb2:	b2d2      	uxtb	r2, r2
    1eb4:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    1eb6:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
    1eb8:	2000      	movs	r0, #0
	gu8ChipSleep--;
	if(gu8ChipSleep == 0)
    1eba:	2b00      	cmp	r3, #0
    1ebc:	d11e      	bne.n	1efc <hif_chip_sleep+0x54>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1ebe:	4b12      	ldr	r3, [pc, #72]	; (1f08 <hif_chip_sleep+0x60>)
    1ec0:	781b      	ldrb	r3, [r3, #0]
    1ec2:	2b03      	cmp	r3, #3
    1ec4:	d003      	beq.n	1ece <hif_chip_sleep+0x26>
    1ec6:	4b10      	ldr	r3, [pc, #64]	; (1f08 <hif_chip_sleep+0x60>)
    1ec8:	781b      	ldrb	r3, [r3, #0]
    1eca:	2b04      	cmp	r3, #4
    1ecc:	d116      	bne.n	1efc <hif_chip_sleep+0x54>
		{
			uint32 reg = 0;
    1ece:	2300      	movs	r3, #0
    1ed0:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    1ed2:	480e      	ldr	r0, [pc, #56]	; (1f0c <hif_chip_sleep+0x64>)
    1ed4:	490e      	ldr	r1, [pc, #56]	; (1f10 <hif_chip_sleep+0x68>)
    1ed6:	4b0f      	ldr	r3, [pc, #60]	; (1f14 <hif_chip_sleep+0x6c>)
    1ed8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1eda:	2800      	cmp	r0, #0
    1edc:	d10e      	bne.n	1efc <hif_chip_sleep+0x54>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    1ede:	2001      	movs	r0, #1
    1ee0:	a901      	add	r1, sp, #4
    1ee2:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <hif_chip_sleep+0x70>)
    1ee4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1ee6:	2800      	cmp	r0, #0
    1ee8:	d108      	bne.n	1efc <hif_chip_sleep+0x54>
			if(reg&0x2)
    1eea:	9901      	ldr	r1, [sp, #4]
    1eec:	078b      	lsls	r3, r1, #30
    1eee:	d505      	bpl.n	1efc <hif_chip_sleep+0x54>
			{
				reg &=~(1 << 1);
    1ef0:	2302      	movs	r3, #2
    1ef2:	4399      	bics	r1, r3
    1ef4:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
    1ef6:	2001      	movs	r0, #1
    1ef8:	4b06      	ldr	r3, [pc, #24]	; (1f14 <hif_chip_sleep+0x6c>)
    1efa:	4798      	blx	r3
		else
		{
		}
	}
ERR1:
	return ret;
    1efc:	b240      	sxtb	r0, r0
}
    1efe:	b003      	add	sp, #12
    1f00:	bd00      	pop	{pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	20000b9c 	.word	0x20000b9c
    1f08:	20000b8c 	.word	0x20000b8c
    1f0c:	00001074 	.word	0x00001074
    1f10:	00004321 	.word	0x00004321
    1f14:	00002c41 	.word	0x00002c41
    1f18:	00002c35 	.word	0x00002c35

00001f1c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_init(void * arg)
{
    1f1c:	b508      	push	{r3, lr}
	pfWifiCb = NULL;
    1f1e:	2300      	movs	r3, #0
    1f20:	4a08      	ldr	r2, [pc, #32]	; (1f44 <hif_init+0x28>)
    1f22:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
    1f24:	4a08      	ldr	r2, [pc, #32]	; (1f48 <hif_init+0x2c>)
    1f26:	6013      	str	r3, [r2, #0]
	
	gu8ChipSleep = 0;
    1f28:	4a08      	ldr	r2, [pc, #32]	; (1f4c <hif_init+0x30>)
    1f2a:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
    1f2c:	4a08      	ldr	r2, [pc, #32]	; (1f50 <hif_init+0x34>)
    1f2e:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
    1f30:	4a08      	ldr	r2, [pc, #32]	; (1f54 <hif_init+0x38>)
    1f32:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
    1f34:	4808      	ldr	r0, [pc, #32]	; (1f58 <hif_init+0x3c>)
    1f36:	4b09      	ldr	r3, [pc, #36]	; (1f5c <hif_init+0x40>)
    1f38:	4798      	blx	r3
			break;
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
    1f3a:	4a09      	ldr	r2, [pc, #36]	; (1f60 <hif_init+0x44>)
    1f3c:	4b09      	ldr	r3, [pc, #36]	; (1f64 <hif_init+0x48>)
    1f3e:	601a      	str	r2, [r3, #0]
	nm_bsp_register_isr(isr);

	hif_register_cb(M2M_REQ_GRP_HIF,m2m_hif_cb);
	
	return M2M_SUCCESS;
}
    1f40:	2000      	movs	r0, #0
    1f42:	bd08      	pop	{r3, pc}
    1f44:	20000b80 	.word	0x20000b80
    1f48:	20000b90 	.word	0x20000b90
    1f4c:	20000b9c 	.word	0x20000b9c
    1f50:	20000b8c 	.word	0x20000b8c
    1f54:	20000b84 	.word	0x20000b84
    1f58:	00001dfd 	.word	0x00001dfd
    1f5c:	00001ac9 	.word	0x00001ac9
    1f60:	00001e0d 	.word	0x00001e0d
    1f64:	20000b88 	.word	0x20000b88

00001f68 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f6a:	4657      	mov	r7, sl
    1f6c:	464e      	mov	r6, r9
    1f6e:	4645      	mov	r5, r8
    1f70:	b4e0      	push	{r5, r6, r7}
    1f72:	b086      	sub	sp, #24
    1f74:	1c06      	adds	r6, r0, #0
    1f76:	1c0d      	adds	r5, r1, #0
    1f78:	4691      	mov	r9, r2
    1f7a:	4698      	mov	r8, r3
    1f7c:	ac0e      	add	r4, sp, #56	; 0x38
    1f7e:	cc01      	ldmia	r4!, {r0}
    1f80:	8827      	ldrh	r7, [r4, #0]
    1f82:	ab10      	add	r3, sp, #64	; 0x40
    1f84:	881b      	ldrh	r3, [r3, #0]
    1f86:	469a      	mov	sl, r3
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1f88:	237f      	movs	r3, #127	; 0x7f
    1f8a:	400b      	ands	r3, r1
    1f8c:	ac05      	add	r4, sp, #20
    1f8e:	7063      	strb	r3, [r4, #1]
	strHif.u8Gid		= u8Gid;
    1f90:	7026      	strb	r6, [r4, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1f92:	2308      	movs	r3, #8
    1f94:	8063      	strh	r3, [r4, #2]
	if(pu8DataBuf != NULL)
    1f96:	2800      	cmp	r0, #0
    1f98:	d005      	beq.n	1fa6 <hif_send+0x3e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1f9a:	8862      	ldrh	r2, [r4, #2]
    1f9c:	19d2      	adds	r2, r2, r7
    1f9e:	4452      	add	r2, sl
    1fa0:	b292      	uxth	r2, r2
    1fa2:	8062      	strh	r2, [r4, #2]
    1fa4:	e004      	b.n	1fb0 <hif_send+0x48>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    1fa6:	ab05      	add	r3, sp, #20
    1fa8:	885a      	ldrh	r2, [r3, #2]
    1faa:	4442      	add	r2, r8
    1fac:	b292      	uxth	r2, r2
    1fae:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    1fb0:	4b4c      	ldr	r3, [pc, #304]	; (20e4 <STACK_SIZE+0xe4>)
    1fb2:	4798      	blx	r3
    1fb4:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1fb6:	d000      	beq.n	1fba <hif_send+0x52>
    1fb8:	e08d      	b.n	20d6 <STACK_SIZE+0xd6>
	{
		volatile uint32 reg, dma_addr = 0;
    1fba:	2300      	movs	r3, #0
    1fbc:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
    1fbe:	466a      	mov	r2, sp
    1fc0:	80d3      	strh	r3, [r2, #6]
		
		reg = 0UL;
    1fc2:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
    1fc4:	9b02      	ldr	r3, [sp, #8]
    1fc6:	431e      	orrs	r6, r3
    1fc8:	9602      	str	r6, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
    1fca:	9b02      	ldr	r3, [sp, #8]
    1fcc:	022d      	lsls	r5, r5, #8
    1fce:	431d      	orrs	r5, r3
    1fd0:	9502      	str	r5, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
    1fd2:	ab05      	add	r3, sp, #20
    1fd4:	885b      	ldrh	r3, [r3, #2]
    1fd6:	9a02      	ldr	r2, [sp, #8]
    1fd8:	041b      	lsls	r3, r3, #16
    1fda:	4313      	orrs	r3, r2
    1fdc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1fde:	9902      	ldr	r1, [sp, #8]
    1fe0:	4841      	ldr	r0, [pc, #260]	; (20e8 <STACK_SIZE+0xe8>)
    1fe2:	4b42      	ldr	r3, [pc, #264]	; (20ec <STACK_SIZE+0xec>)
    1fe4:	4798      	blx	r3
    1fe6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1fe8:	d175      	bne.n	20d6 <STACK_SIZE+0xd6>
	
		
		reg = 0;
    1fea:	2300      	movs	r3, #0
    1fec:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
    1fee:	9a02      	ldr	r2, [sp, #8]
    1ff0:	2302      	movs	r3, #2
    1ff2:	4313      	orrs	r3, r2
    1ff4:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1ff6:	9902      	ldr	r1, [sp, #8]
    1ff8:	483d      	ldr	r0, [pc, #244]	; (20f0 <STACK_SIZE+0xf0>)
    1ffa:	4b3c      	ldr	r3, [pc, #240]	; (20ec <STACK_SIZE+0xec>)
    1ffc:	4798      	blx	r3
    1ffe:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    2000:	d169      	bne.n	20d6 <STACK_SIZE+0xd6>
		dma_addr = 0;
    2002:	2200      	movs	r2, #0
    2004:	9203      	str	r2, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2006:	466b      	mov	r3, sp
    2008:	80da      	strh	r2, [r3, #6]
    200a:	88da      	ldrh	r2, [r3, #6]
    200c:	b292      	uxth	r2, r2
    200e:	4b39      	ldr	r3, [pc, #228]	; (20f4 <STACK_SIZE+0xf4>)
    2010:	429a      	cmp	r2, r3
    2012:	d81c      	bhi.n	204e <STACK_SIZE+0x4e>
		{			
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2014:	4d36      	ldr	r5, [pc, #216]	; (20f0 <STACK_SIZE+0xf0>)
    2016:	4c38      	ldr	r4, [pc, #224]	; (20f8 <STACK_SIZE+0xf8>)
    2018:	1c28      	adds	r0, r5, #0
    201a:	a902      	add	r1, sp, #8
    201c:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;		
    201e:	2800      	cmp	r0, #0
    2020:	d115      	bne.n	204e <STACK_SIZE+0x4e>
			if (!(reg & 0x2))
    2022:	9b02      	ldr	r3, [sp, #8]
    2024:	0799      	lsls	r1, r3, #30
    2026:	d408      	bmi.n	203a <STACK_SIZE+0x3a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    2028:	4834      	ldr	r0, [pc, #208]	; (20fc <STACK_SIZE+0xfc>)
    202a:	a903      	add	r1, sp, #12
    202c:	4b32      	ldr	r3, [pc, #200]	; (20f8 <STACK_SIZE+0xf8>)
    202e:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
    2030:	2800      	cmp	r0, #0
    2032:	d00c      	beq.n	204e <STACK_SIZE+0x4e>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    2034:	2300      	movs	r3, #0
    2036:	9303      	str	r3, [sp, #12]
    2038:	e009      	b.n	204e <STACK_SIZE+0x4e>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    203a:	466b      	mov	r3, sp
    203c:	88da      	ldrh	r2, [r3, #6]
    203e:	3201      	adds	r2, #1
    2040:	b292      	uxth	r2, r2
    2042:	80da      	strh	r2, [r3, #6]
    2044:	88da      	ldrh	r2, [r3, #6]
    2046:	b292      	uxth	r2, r2
    2048:	4b2a      	ldr	r3, [pc, #168]	; (20f4 <STACK_SIZE+0xf4>)
    204a:	429a      	cmp	r2, r3
    204c:	d9e4      	bls.n	2018 <STACK_SIZE+0x18>
				break;
			} 
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0) 
    204e:	9b03      	ldr	r3, [sp, #12]
    2050:	2b00      	cmp	r3, #0
    2052:	d03f      	beq.n	20d4 <STACK_SIZE+0xd4>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2054:	9b03      	ldr	r3, [sp, #12]
    2056:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2058:	a905      	add	r1, sp, #20
    205a:	884b      	ldrh	r3, [r1, #2]
    205c:	b29b      	uxth	r3, r3
    205e:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2060:	9804      	ldr	r0, [sp, #16]
    2062:	2208      	movs	r2, #8
    2064:	4b26      	ldr	r3, [pc, #152]	; (2100 <STACK_SIZE+0x100>)
    2066:	4798      	blx	r3
    2068:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    206a:	d134      	bne.n	20d6 <STACK_SIZE+0xd6>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    206c:	9b04      	ldr	r3, [sp, #16]
    206e:	3308      	adds	r3, #8
    2070:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
    2072:	464a      	mov	r2, r9
    2074:	2a00      	cmp	r2, #0
    2076:	d009      	beq.n	208c <STACK_SIZE+0x8c>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2078:	9804      	ldr	r0, [sp, #16]
    207a:	4649      	mov	r1, r9
    207c:	4642      	mov	r2, r8
    207e:	4b20      	ldr	r3, [pc, #128]	; (2100 <STACK_SIZE+0x100>)
    2080:	4798      	blx	r3
    2082:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    2084:	d127      	bne.n	20d6 <STACK_SIZE+0xd6>
				u32CurrAddr += u16CtrlBufSize;
    2086:	9b04      	ldr	r3, [sp, #16]
    2088:	4443      	add	r3, r8
    208a:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
    208c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    208e:	2b00      	cmp	r3, #0
    2090:	d00f      	beq.n	20b2 <STACK_SIZE+0xb2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2092:	9b04      	ldr	r3, [sp, #16]
    2094:	4650      	mov	r0, sl
    2096:	4641      	mov	r1, r8
    2098:	1a42      	subs	r2, r0, r1
    209a:	18d3      	adds	r3, r2, r3
    209c:	9304      	str	r3, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    209e:	9804      	ldr	r0, [sp, #16]
    20a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    20a2:	1c3a      	adds	r2, r7, #0
    20a4:	4b16      	ldr	r3, [pc, #88]	; (2100 <STACK_SIZE+0x100>)
    20a6:	4798      	blx	r3
    20a8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    20aa:	d114      	bne.n	20d6 <STACK_SIZE+0xd6>
				u32CurrAddr += u16DataSize;
    20ac:	9b04      	ldr	r3, [sp, #16]
    20ae:	18ff      	adds	r7, r7, r3
    20b0:	9704      	str	r7, [sp, #16]
			}
			
			reg = dma_addr << 2;
    20b2:	9b03      	ldr	r3, [sp, #12]
    20b4:	009b      	lsls	r3, r3, #2
    20b6:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
    20b8:	9a02      	ldr	r2, [sp, #8]
    20ba:	2302      	movs	r3, #2
    20bc:	4313      	orrs	r3, r2
    20be:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    20c0:	9902      	ldr	r1, [sp, #8]
    20c2:	4810      	ldr	r0, [pc, #64]	; (2104 <STACK_SIZE+0x104>)
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <STACK_SIZE+0xec>)
    20c6:	4798      	blx	r3
    20c8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    20ca:	d104      	bne.n	20d6 <STACK_SIZE+0xd6>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
    20cc:	4b0e      	ldr	r3, [pc, #56]	; (2108 <STACK_SIZE+0x108>)
    20ce:	4798      	blx	r3
    20d0:	1c04      	adds	r4, r0, #0
    20d2:	e000      	b.n	20d6 <STACK_SIZE+0xd6>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    20d4:	24fd      	movs	r4, #253	; 0xfd
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    20d6:	b260      	sxtb	r0, r4
}
    20d8:	b006      	add	sp, #24
    20da:	bc1c      	pop	{r2, r3, r4}
    20dc:	4690      	mov	r8, r2
    20de:	4699      	mov	r9, r3
    20e0:	46a2      	mov	sl, r4
    20e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e4:	00001e4d 	.word	0x00001e4d
    20e8:	0000108c 	.word	0x0000108c
    20ec:	00002c41 	.word	0x00002c41
    20f0:	00001078 	.word	0x00001078
    20f4:	000003e7 	.word	0x000003e7
    20f8:	00002c35 	.word	0x00002c35
    20fc:	00150400 	.word	0x00150400
    2100:	00002cb9 	.word	0x00002cb9
    2104:	0000106c 	.word	0x0000106c
    2108:	00001ea9 	.word	0x00001ea9

0000210c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	4657      	mov	r7, sl
    2110:	464e      	mov	r6, r9
    2112:	b4c0      	push	{r6, r7}
    2114:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	
	while (gu8Interrupt) {
    2116:	4a59      	ldr	r2, [pc, #356]	; (227c <hif_handle_isr+0x170>)
    2118:	4691      	mov	r9, r2
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    211a:	1c17      	adds	r7, r2, #0
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;
	
	ret = hif_chip_wake();
    211c:	4c58      	ldr	r4, [pc, #352]	; (2280 <hif_handle_isr+0x174>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;
	
	while (gu8Interrupt) {
    211e:	e0a1      	b.n	2264 <hif_handle_isr+0x158>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    2120:	783b      	ldrb	r3, [r7, #0]
    2122:	3b01      	subs	r3, #1
    2124:	b2db      	uxtb	r3, r3
    2126:	703b      	strb	r3, [r7, #0]
	volatile tstrHifHdr strHif;
	
	ret = hif_chip_wake();
	if(ret == M2M_SUCCESS)
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
    2128:	4d56      	ldr	r5, [pc, #344]	; (2284 <hif_handle_isr+0x178>)
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;
	
	ret = hif_chip_wake();
    212a:	47a0      	blx	r4
	if(ret == M2M_SUCCESS)
    212c:	2800      	cmp	r0, #0
    212e:	d1fc      	bne.n	212a <hif_handle_isr+0x1e>
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
    2130:	4855      	ldr	r0, [pc, #340]	; (2288 <hif_handle_isr+0x17c>)
    2132:	a901      	add	r1, sp, #4
    2134:	47a8      	blx	r5
		if(M2M_SUCCESS == ret)
    2136:	2800      	cmp	r0, #0
    2138:	d1f7      	bne.n	212a <hif_handle_isr+0x1e>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    213a:	9b01      	ldr	r3, [sp, #4]
    213c:	07db      	lsls	r3, r3, #31
    213e:	d400      	bmi.n	2142 <hif_handle_isr+0x36>
    2140:	e08a      	b.n	2258 <hif_handle_isr+0x14c>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    2142:	4b52      	ldr	r3, [pc, #328]	; (228c <hif_handle_isr+0x180>)
    2144:	4798      	blx	r3
				/*Clearing RX interrupt*/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    2146:	4850      	ldr	r0, [pc, #320]	; (2288 <hif_handle_isr+0x17c>)
    2148:	a901      	add	r1, sp, #4
    214a:	4b4e      	ldr	r3, [pc, #312]	; (2284 <hif_handle_isr+0x178>)
    214c:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
    214e:	2800      	cmp	r0, #0
    2150:	d1eb      	bne.n	212a <hif_handle_isr+0x1e>
				reg &= ~(1<<0);
    2152:	2301      	movs	r3, #1
    2154:	9901      	ldr	r1, [sp, #4]
    2156:	4399      	bics	r1, r3
    2158:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    215a:	484b      	ldr	r0, [pc, #300]	; (2288 <hif_handle_isr+0x17c>)
    215c:	4b4c      	ldr	r3, [pc, #304]	; (2290 <hif_handle_isr+0x184>)
    215e:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
    2160:	2800      	cmp	r0, #0
    2162:	d1e2      	bne.n	212a <hif_handle_isr+0x1e>
				/* read the rx size */	
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2164:	4848      	ldr	r0, [pc, #288]	; (2288 <hif_handle_isr+0x17c>)
    2166:	a901      	add	r1, sp, #4
    2168:	4b46      	ldr	r3, [pc, #280]	; (2284 <hif_handle_isr+0x178>)
    216a:	4798      	blx	r3
				if(M2M_SUCCESS != ret)
    216c:	2800      	cmp	r0, #0
    216e:	d003      	beq.n	2178 <hif_handle_isr+0x6c>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
					nm_bsp_interrupt_ctrl(1);
    2170:	2001      	movs	r0, #1
    2172:	4b46      	ldr	r3, [pc, #280]	; (228c <hif_handle_isr+0x180>)
    2174:	4798      	blx	r3
    2176:	e7d8      	b.n	212a <hif_handle_isr+0x1e>
					goto ERR1;
				}
				gu8HifSizeDone = 0;
    2178:	2200      	movs	r2, #0
    217a:	4b46      	ldr	r3, [pc, #280]	; (2294 <hif_handle_isr+0x188>)
    217c:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);	
    217e:	9a01      	ldr	r2, [sp, #4]
    2180:	0493      	lsls	r3, r2, #18
    2182:	0d1b      	lsrs	r3, r3, #20
    2184:	469a      	mov	sl, r3
				if (size > 0) {
    2186:	d0d0      	beq.n	212a <hif_handle_isr+0x1e>
					uint32 address = 0;
    2188:	2300      	movs	r3, #0
    218a:	9303      	str	r3, [sp, #12]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    218c:	4842      	ldr	r0, [pc, #264]	; (2298 <hif_handle_isr+0x18c>)
    218e:	a903      	add	r1, sp, #12
    2190:	4b3c      	ldr	r3, [pc, #240]	; (2284 <hif_handle_isr+0x178>)
    2192:	4798      	blx	r3
    2194:	1e06      	subs	r6, r0, #0
					if(M2M_SUCCESS != ret)
    2196:	d003      	beq.n	21a0 <hif_handle_isr+0x94>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
						nm_bsp_interrupt_ctrl(1);
    2198:	2001      	movs	r0, #1
    219a:	4b3c      	ldr	r3, [pc, #240]	; (228c <hif_handle_isr+0x180>)
    219c:	4798      	blx	r3
    219e:	e05e      	b.n	225e <hif_handle_isr+0x152>
						goto ERR1;
					}	
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	a902      	add	r1, sp, #8
    21a4:	2204      	movs	r2, #4
    21a6:	4b3d      	ldr	r3, [pc, #244]	; (229c <hif_handle_isr+0x190>)
    21a8:	4798      	blx	r3
    21aa:	1c06      	adds	r6, r0, #0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    21ac:	466a      	mov	r2, sp
    21ae:	8953      	ldrh	r3, [r2, #10]
    21b0:	b29b      	uxth	r3, r3
    21b2:	8153      	strh	r3, [r2, #10]
					if(M2M_SUCCESS != ret)
    21b4:	2800      	cmp	r0, #0
    21b6:	d003      	beq.n	21c0 <hif_handle_isr+0xb4>
					{
						M2M_ERR("(hif) address bus fail\n");
						nm_bsp_interrupt_ctrl(1);
    21b8:	2001      	movs	r0, #1
    21ba:	4b34      	ldr	r3, [pc, #208]	; (228c <hif_handle_isr+0x180>)
    21bc:	4798      	blx	r3
    21be:	e04e      	b.n	225e <hif_handle_isr+0x152>
						goto ERR1;
					}
					if(strHif.u16Length != size)
    21c0:	ab02      	add	r3, sp, #8
    21c2:	885b      	ldrh	r3, [r3, #2]
    21c4:	b29b      	uxth	r3, r3
    21c6:	459a      	cmp	sl, r3
    21c8:	d00a      	beq.n	21e0 <hif_handle_isr+0xd4>
					{
						if((size - strHif.u16Length) > 4)
    21ca:	ab02      	add	r3, sp, #8
    21cc:	885b      	ldrh	r3, [r3, #2]
    21ce:	4652      	mov	r2, sl
    21d0:	1ad3      	subs	r3, r2, r3
    21d2:	2b04      	cmp	r3, #4
    21d4:	dd04      	ble.n	21e0 <hif_handle_isr+0xd4>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    21d6:	2001      	movs	r0, #1
    21d8:	4b2c      	ldr	r3, [pc, #176]	; (228c <hif_handle_isr+0x180>)
    21da:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    21dc:	26fa      	movs	r6, #250	; 0xfa
    21de:	e03e      	b.n	225e <hif_handle_isr+0x152>
							goto ERR1;
						}
					}

					if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
    21e0:	ab02      	add	r3, sp, #8
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	2b01      	cmp	r3, #1
    21e6:	d10d      	bne.n	2204 <hif_handle_isr+0xf8>
					{
						if(pfWifiCb)
    21e8:	4b2d      	ldr	r3, [pc, #180]	; (22a0 <hif_handle_isr+0x194>)
    21ea:	681e      	ldr	r6, [r3, #0]
    21ec:	2e00      	cmp	r6, #0
    21ee:	d02d      	beq.n	224c <hif_handle_isr+0x140>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    21f0:	ab02      	add	r3, sp, #8
    21f2:	7858      	ldrb	r0, [r3, #1]
    21f4:	b2c0      	uxtb	r0, r0
    21f6:	8859      	ldrh	r1, [r3, #2]
    21f8:	3908      	subs	r1, #8
    21fa:	b289      	uxth	r1, r1
    21fc:	9a03      	ldr	r2, [sp, #12]
    21fe:	3208      	adds	r2, #8
    2200:	47b0      	blx	r6
    2202:	e023      	b.n	224c <hif_handle_isr+0x140>
					
					} 
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
    2204:	ab02      	add	r3, sp, #8
    2206:	781b      	ldrb	r3, [r3, #0]
    2208:	2b02      	cmp	r3, #2
    220a:	d10d      	bne.n	2228 <hif_handle_isr+0x11c>
					{
						if(pfIpCb) 
    220c:	4b25      	ldr	r3, [pc, #148]	; (22a4 <hif_handle_isr+0x198>)
    220e:	681e      	ldr	r6, [r3, #0]
    2210:	2e00      	cmp	r6, #0
    2212:	d01b      	beq.n	224c <hif_handle_isr+0x140>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2214:	ab02      	add	r3, sp, #8
    2216:	7858      	ldrb	r0, [r3, #1]
    2218:	b2c0      	uxtb	r0, r0
    221a:	8859      	ldrh	r1, [r3, #2]
    221c:	3908      	subs	r1, #8
    221e:	b289      	uxth	r1, r1
    2220:	9a03      	ldr	r2, [sp, #12]
    2222:	3208      	adds	r2, #8
    2224:	47b0      	blx	r6
    2226:	e011      	b.n	224c <hif_handle_isr+0x140>
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
    2228:	ab02      	add	r3, sp, #8
    222a:	781b      	ldrb	r3, [r3, #0]
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
						ret = M2M_ERR_BUS_FAIL;
    222c:	26fa      	movs	r6, #250	; 0xfa
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
					{
						if(pfIpCb) 
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
    222e:	2b04      	cmp	r3, #4
    2230:	d115      	bne.n	225e <hif_handle_isr+0x152>
					{
						if(pfOtaCb) 
    2232:	4b1d      	ldr	r3, [pc, #116]	; (22a8 <hif_handle_isr+0x19c>)
    2234:	681e      	ldr	r6, [r3, #0]
    2236:	2e00      	cmp	r6, #0
    2238:	d008      	beq.n	224c <hif_handle_isr+0x140>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    223a:	ab02      	add	r3, sp, #8
    223c:	7858      	ldrb	r0, [r3, #1]
    223e:	b2c0      	uxtb	r0, r0
    2240:	8859      	ldrh	r1, [r3, #2]
    2242:	3908      	subs	r1, #8
    2244:	b289      	uxth	r1, r1
    2246:	9a03      	ldr	r2, [sp, #12]
    2248:	3208      	adds	r2, #8
    224a:	47b0      	blx	r6
						M2M_ERR("(hif) invalid group ID\n");
						ret = M2M_ERR_BUS_FAIL;
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    224c:	4b11      	ldr	r3, [pc, #68]	; (2294 <hif_handle_isr+0x188>)
    224e:	781b      	ldrb	r3, [r3, #0]
    2250:	2b00      	cmp	r3, #0
    2252:	d101      	bne.n	2258 <hif_handle_isr+0x14c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
						ret = hif_set_rx_done();
    2254:	4b15      	ldr	r3, [pc, #84]	; (22ac <hif_handle_isr+0x1a0>)
    2256:	4798      	blx	r3
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
		goto ERR1;
	}
	
	ret = hif_chip_sleep();
    2258:	4b15      	ldr	r3, [pc, #84]	; (22b0 <hif_handle_isr+0x1a4>)
    225a:	4798      	blx	r3
    225c:	1c06      	adds	r6, r0, #0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr(); 
			if(ret == M2M_SUCCESS) {
    225e:	2e00      	cmp	r6, #0
    2260:	d000      	beq.n	2264 <hif_handle_isr+0x158>
    2262:	e762      	b.n	212a <hif_handle_isr+0x1e>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;
	
	while (gu8Interrupt) {
    2264:	464a      	mov	r2, r9
    2266:	7813      	ldrb	r3, [r2, #0]
    2268:	2b00      	cmp	r3, #0
    226a:	d000      	beq.n	226e <hif_handle_isr+0x162>
    226c:	e758      	b.n	2120 <hif_handle_isr+0x14>
			}	
		}		
	}

	return ret;
}
    226e:	2000      	movs	r0, #0
    2270:	b005      	add	sp, #20
    2272:	bc0c      	pop	{r2, r3}
    2274:	4691      	mov	r9, r2
    2276:	469a      	mov	sl, r3
    2278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	20000b84 	.word	0x20000b84
    2280:	00001e4d 	.word	0x00001e4d
    2284:	00002c35 	.word	0x00002c35
    2288:	00001070 	.word	0x00001070
    228c:	00001b19 	.word	0x00001b19
    2290:	00002c41 	.word	0x00002c41
    2294:	20000b94 	.word	0x20000b94
    2298:	00001084 	.word	0x00001084
    229c:	00002c4d 	.word	0x00002c4d
    22a0:	20000b80 	.word	0x20000b80
    22a4:	20000b90 	.word	0x20000b90
    22a8:	20000b98 	.word	0x20000b98
    22ac:	00001e11 	.word	0x00001e11
    22b0:	00001ea9 	.word	0x00001ea9

000022b4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/ 
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    22b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b6:	464f      	mov	r7, r9
    22b8:	4646      	mov	r6, r8
    22ba:	b4c0      	push	{r6, r7}
    22bc:	b083      	sub	sp, #12
    22be:	1c06      	adds	r6, r0, #0
    22c0:	1c0f      	adds	r7, r1, #0
    22c2:	1c15      	adds	r5, r2, #0
    22c4:	4698      	mov	r8, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    22c6:	481c      	ldr	r0, [pc, #112]	; (2338 <hif_receive+0x84>)
    22c8:	4669      	mov	r1, sp
    22ca:	4c1c      	ldr	r4, [pc, #112]	; (233c <hif_receive+0x88>)
    22cc:	47a0      	blx	r4
    22ce:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;	
    22d0:	d12c      	bne.n	232c <hif_receive+0x78>


	size = (uint16)((reg >> 2) & 0xfff);	
    22d2:	9a00      	ldr	r2, [sp, #0]
    22d4:	4691      	mov	r9, r2
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    22d6:	481a      	ldr	r0, [pc, #104]	; (2340 <hif_receive+0x8c>)
    22d8:	a901      	add	r1, sp, #4
    22da:	4b18      	ldr	r3, [pc, #96]	; (233c <hif_receive+0x88>)
    22dc:	4798      	blx	r3
    22de:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;	
    22e0:	d124      	bne.n	232c <hif_receive+0x78>

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    22e2:	1c30      	adds	r0, r6, #0
    22e4:	1c39      	adds	r1, r7, #0
    22e6:	1c2a      	adds	r2, r5, #0
    22e8:	4b16      	ldr	r3, [pc, #88]	; (2344 <hif_receive+0x90>)
    22ea:	4798      	blx	r3
    22ec:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto ERR1;
    22ee:	d11d      	bne.n	232c <hif_receive+0x78>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;	


	size = (uint16)((reg >> 2) & 0xfff);	
    22f0:	464a      	mov	r2, r9
    22f2:	0493      	lsls	r3, r2, #18
    22f4:	0d1b      	lsrs	r3, r3, #20

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
    22f6:	42ab      	cmp	r3, r5
    22f8:	d313      	bcc.n	2322 <hif_receive+0x6e>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    22fa:	9a01      	ldr	r2, [sp, #4]
    22fc:	4296      	cmp	r6, r2
    22fe:	d312      	bcc.n	2326 <hif_receive+0x72>
    2300:	1975      	adds	r5, r6, r5
    2302:	189b      	adds	r3, r3, r2
    2304:	429d      	cmp	r5, r3
    2306:	d810      	bhi.n	232a <hif_receive+0x76>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}

	/* check if this is the last packet */
	if((((address+size) - (u32Addr+u16Sz)) < 4) || isDone)
    2308:	1b5d      	subs	r5, r3, r5
    230a:	2d03      	cmp	r5, #3
    230c:	d902      	bls.n	2314 <hif_receive+0x60>
    230e:	4643      	mov	r3, r8
    2310:	2b00      	cmp	r3, #0
    2312:	d00b      	beq.n	232c <hif_receive+0x78>
	{
		gu8HifSizeDone = 1;
    2314:	2201      	movs	r2, #1
    2316:	4b0c      	ldr	r3, [pc, #48]	; (2348 <hif_receive+0x94>)
    2318:	701a      	strb	r2, [r3, #0]
		
		/* set RX done */
		ret = hif_set_rx_done();
    231a:	4b0c      	ldr	r3, [pc, #48]	; (234c <hif_receive+0x98>)
    231c:	4798      	blx	r3
    231e:	1c04      	adds	r4, r0, #0
    2320:	e004      	b.n	232c <hif_receive+0x78>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
    2322:	24f4      	movs	r4, #244	; 0xf4
    2324:	e002      	b.n	232c <hif_receive+0x78>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
    2326:	24f4      	movs	r4, #244	; 0xf4
    2328:	e000      	b.n	232c <hif_receive+0x78>
    232a:	24f4      	movs	r4, #244	; 0xf4
	}
	


ERR1:
	return ret;
    232c:	b260      	sxtb	r0, r4
}
    232e:	b003      	add	sp, #12
    2330:	bc0c      	pop	{r2, r3}
    2332:	4690      	mov	r8, r2
    2334:	4699      	mov	r9, r3
    2336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2338:	00001070 	.word	0x00001070
    233c:	00002c35 	.word	0x00002c35
    2340:	00001084 	.word	0x00001084
    2344:	00002c4d 	.word	0x00002c4d
    2348:	20000b94 	.word	0x20000b94
    234c:	00001e11 	.word	0x00001e11

00002350 <hif_register_cb>:
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    2350:	2802      	cmp	r0, #2
    2352:	d008      	beq.n	2366 <hif_register_cb+0x16>
    2354:	d802      	bhi.n	235c <hif_register_cb+0xc>
    2356:	2801      	cmp	r0, #1
    2358:	d009      	beq.n	236e <hif_register_cb+0x1e>
    235a:	e014      	b.n	2386 <hif_register_cb+0x36>
    235c:	2803      	cmp	r0, #3
    235e:	d00e      	beq.n	237e <hif_register_cb+0x2e>
    2360:	2804      	cmp	r0, #4
    2362:	d008      	beq.n	2376 <hif_register_cb+0x26>
    2364:	e00f      	b.n	2386 <hif_register_cb+0x36>
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
    2366:	4b09      	ldr	r3, [pc, #36]	; (238c <hif_register_cb+0x3c>)
    2368:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    236a:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
    236c:	e00c      	b.n	2388 <hif_register_cb+0x38>
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
    236e:	4b08      	ldr	r3, [pc, #32]	; (2390 <hif_register_cb+0x40>)
    2370:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    2372:	2000      	movs	r0, #0
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
    2374:	e008      	b.n	2388 <hif_register_cb+0x38>
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
    2376:	4b07      	ldr	r3, [pc, #28]	; (2394 <hif_register_cb+0x44>)
    2378:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    237a:	2000      	movs	r0, #0
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
    237c:	e004      	b.n	2388 <hif_register_cb+0x38>
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
    237e:	4b06      	ldr	r3, [pc, #24]	; (2398 <hif_register_cb+0x48>)
    2380:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise. 
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    2382:	2000      	movs	r0, #0
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
			break;
    2384:	e000      	b.n	2388 <hif_register_cb+0x38>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
    2386:	20f4      	movs	r0, #244	; 0xf4
			break;
	}
	return ret;
    2388:	b240      	sxtb	r0, r0
}
    238a:	4770      	bx	lr
    238c:	20000b90 	.word	0x20000b90
    2390:	20000b80 	.word	0x20000b80
    2394:	20000b98 	.word	0x20000b98
    2398:	20000b88 	.word	0x20000b88

0000239c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    239c:	b510      	push	{r4, lr}
    239e:	b09c      	sub	sp, #112	; 0x70
    23a0:	1c14      	adds	r4, r2, #0
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    23a2:	282e      	cmp	r0, #46	; 0x2e
    23a4:	d111      	bne.n	23ca <m2m_wifi_cb+0x2e>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    23a6:	1c10      	adds	r0, r2, #0
    23a8:	a901      	add	r1, sp, #4
    23aa:	2204      	movs	r2, #4
    23ac:	2300      	movs	r3, #0
    23ae:	4c6c      	ldr	r4, [pc, #432]	; (2560 <m2m_wifi_cb+0x1c4>)
    23b0:	47a0      	blx	r4
    23b2:	2800      	cmp	r0, #0
    23b4:	d000      	beq.n	23b8 <m2m_wifi_cb+0x1c>
    23b6:	e0d0      	b.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    23b8:	4b6a      	ldr	r3, [pc, #424]	; (2564 <m2m_wifi_cb+0x1c8>)
    23ba:	681b      	ldr	r3, [r3, #0]
    23bc:	2b00      	cmp	r3, #0
    23be:	d100      	bne.n	23c2 <m2m_wifi_cb+0x26>
    23c0:	e0cb      	b.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    23c2:	202e      	movs	r0, #46	; 0x2e
    23c4:	a901      	add	r1, sp, #4
    23c6:	4798      	blx	r3
    23c8:	e0c7      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    23ca:	282c      	cmp	r0, #44	; 0x2c
    23cc:	d111      	bne.n	23f2 <m2m_wifi_cb+0x56>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    23ce:	1c10      	adds	r0, r2, #0
    23d0:	a901      	add	r1, sp, #4
    23d2:	2228      	movs	r2, #40	; 0x28
    23d4:	2301      	movs	r3, #1
    23d6:	4c62      	ldr	r4, [pc, #392]	; (2560 <m2m_wifi_cb+0x1c4>)
    23d8:	47a0      	blx	r4
    23da:	2800      	cmp	r0, #0
    23dc:	d000      	beq.n	23e0 <m2m_wifi_cb+0x44>
    23de:	e0bc      	b.n	255a <m2m_wifi_cb+0x1be>
		{
			if(gpfAppWifiCb)
    23e0:	4b60      	ldr	r3, [pc, #384]	; (2564 <m2m_wifi_cb+0x1c8>)
    23e2:	681b      	ldr	r3, [r3, #0]
    23e4:	2b00      	cmp	r3, #0
    23e6:	d100      	bne.n	23ea <m2m_wifi_cb+0x4e>
    23e8:	e0b7      	b.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    23ea:	202c      	movs	r0, #44	; 0x2c
    23ec:	a901      	add	r1, sp, #4
    23ee:	4798      	blx	r3
    23f0:	e0b3      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    23f2:	280c      	cmp	r0, #12
    23f4:	d100      	bne.n	23f8 <m2m_wifi_cb+0x5c>
    23f6:	e0b0      	b.n	255a <m2m_wifi_cb+0x1be>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    23f8:	2838      	cmp	r0, #56	; 0x38
    23fa:	d111      	bne.n	2420 <m2m_wifi_cb+0x84>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    23fc:	1c10      	adds	r0, r2, #0
    23fe:	a901      	add	r1, sp, #4
    2400:	2210      	movs	r2, #16
    2402:	2300      	movs	r3, #0
    2404:	4c56      	ldr	r4, [pc, #344]	; (2560 <m2m_wifi_cb+0x1c4>)
    2406:	47a0      	blx	r4
    2408:	2800      	cmp	r0, #0
    240a:	d000      	beq.n	240e <m2m_wifi_cb+0x72>
    240c:	e0a5      	b.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    240e:	4b55      	ldr	r3, [pc, #340]	; (2564 <m2m_wifi_cb+0x1c8>)
    2410:	681b      	ldr	r3, [r3, #0]
    2412:	2b00      	cmp	r3, #0
    2414:	d100      	bne.n	2418 <m2m_wifi_cb+0x7c>
    2416:	e0a0      	b.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig.u32StaticIP);
    2418:	2038      	movs	r0, #56	; 0x38
    241a:	a901      	add	r1, sp, #4
    241c:	4798      	blx	r3
    241e:	e09c      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    2420:	2835      	cmp	r0, #53	; 0x35
    2422:	d116      	bne.n	2452 <m2m_wifi_cb+0xb6>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    2424:	a801      	add	r0, sp, #4
    2426:	2100      	movs	r1, #0
    2428:	2264      	movs	r2, #100	; 0x64
    242a:	4b4f      	ldr	r3, [pc, #316]	; (2568 <m2m_wifi_cb+0x1cc>)
    242c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    242e:	1c20      	adds	r0, r4, #0
    2430:	a901      	add	r1, sp, #4
    2432:	2264      	movs	r2, #100	; 0x64
    2434:	2300      	movs	r3, #0
    2436:	4c4a      	ldr	r4, [pc, #296]	; (2560 <m2m_wifi_cb+0x1c4>)
    2438:	47a0      	blx	r4
    243a:	2800      	cmp	r0, #0
    243c:	d000      	beq.n	2440 <m2m_wifi_cb+0xa4>
    243e:	e08c      	b.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    2440:	4b48      	ldr	r3, [pc, #288]	; (2564 <m2m_wifi_cb+0x1c8>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	2b00      	cmp	r3, #0
    2446:	d100      	bne.n	244a <m2m_wifi_cb+0xae>
    2448:	e087      	b.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    244a:	2035      	movs	r0, #53	; 0x35
    244c:	a901      	add	r1, sp, #4
    244e:	4798      	blx	r3
    2450:	e083      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    2452:	283a      	cmp	r0, #58	; 0x3a
    2454:	d10f      	bne.n	2476 <m2m_wifi_cb+0xda>
	{
		tstrM2MIPConfig strIpConfig;
		if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    2456:	1c10      	adds	r0, r2, #0
    2458:	a901      	add	r1, sp, #4
    245a:	2210      	movs	r2, #16
    245c:	2300      	movs	r3, #0
    245e:	4c40      	ldr	r4, [pc, #256]	; (2560 <m2m_wifi_cb+0x1c4>)
    2460:	47a0      	blx	r4
    2462:	2800      	cmp	r0, #0
    2464:	d179      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			M2M_DBG("Conflicted IP\"%u.%u.%u.%u\"\n", 
				((uint8 *)&strIpConfig.u32StaticIP)[0], ((uint8 *)&strIpConfig.u32StaticIP)[1],
				((uint8 *)&strIpConfig.u32StaticIP)[2], ((uint8 *)&strIpConfig.u32StaticIP)[3]);
			if (gpfAppWifiCb)
    2466:	4b3f      	ldr	r3, [pc, #252]	; (2564 <m2m_wifi_cb+0x1c8>)
    2468:	681b      	ldr	r3, [r3, #0]
    246a:	2b00      	cmp	r3, #0
    246c:	d075      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    246e:	203a      	movs	r0, #58	; 0x3a
    2470:	2100      	movs	r1, #0
    2472:	4798      	blx	r3
    2474:	e071      	b.n	255a <m2m_wifi_cb+0x1be>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    2476:	2832      	cmp	r0, #50	; 0x32
    2478:	d116      	bne.n	24a8 <m2m_wifi_cb+0x10c>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    247a:	2200      	movs	r2, #0
    247c:	4b3b      	ldr	r3, [pc, #236]	; (256c <m2m_wifi_cb+0x1d0>)
    247e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2480:	1c20      	adds	r0, r4, #0
    2482:	a901      	add	r1, sp, #4
    2484:	2204      	movs	r2, #4
    2486:	2300      	movs	r3, #0
    2488:	4c35      	ldr	r4, [pc, #212]	; (2560 <m2m_wifi_cb+0x1c4>)
    248a:	47a0      	blx	r4
    248c:	2800      	cmp	r0, #0
    248e:	d164      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			gu8ChNum = strState.u8NumofCh;
    2490:	ab01      	add	r3, sp, #4
    2492:	781a      	ldrb	r2, [r3, #0]
    2494:	4b36      	ldr	r3, [pc, #216]	; (2570 <m2m_wifi_cb+0x1d4>)
    2496:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    2498:	4b32      	ldr	r3, [pc, #200]	; (2564 <m2m_wifi_cb+0x1c8>)
    249a:	681b      	ldr	r3, [r3, #0]
    249c:	2b00      	cmp	r3, #0
    249e:	d05c      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    24a0:	2032      	movs	r0, #50	; 0x32
    24a2:	a901      	add	r1, sp, #4
    24a4:	4798      	blx	r3
    24a6:	e058      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    24a8:	2834      	cmp	r0, #52	; 0x34
    24aa:	d10f      	bne.n	24cc <m2m_wifi_cb+0x130>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    24ac:	1c10      	adds	r0, r2, #0
    24ae:	a901      	add	r1, sp, #4
    24b0:	222c      	movs	r2, #44	; 0x2c
    24b2:	2300      	movs	r3, #0
    24b4:	4c2a      	ldr	r4, [pc, #168]	; (2560 <m2m_wifi_cb+0x1c4>)
    24b6:	47a0      	blx	r4
    24b8:	2800      	cmp	r0, #0
    24ba:	d14e      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    24bc:	4b29      	ldr	r3, [pc, #164]	; (2564 <m2m_wifi_cb+0x1c8>)
    24be:	681b      	ldr	r3, [r3, #0]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d04a      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    24c4:	2034      	movs	r0, #52	; 0x34
    24c6:	a901      	add	r1, sp, #4
    24c8:	4798      	blx	r3
    24ca:	e046      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    24cc:	2804      	cmp	r0, #4
    24ce:	d10f      	bne.n	24f0 <m2m_wifi_cb+0x154>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    24d0:	1c10      	adds	r0, r2, #0
    24d2:	a91a      	add	r1, sp, #104	; 0x68
    24d4:	2204      	movs	r2, #4
    24d6:	2300      	movs	r3, #0
    24d8:	4c21      	ldr	r4, [pc, #132]	; (2560 <m2m_wifi_cb+0x1c4>)
    24da:	47a0      	blx	r4
    24dc:	2800      	cmp	r0, #0
    24de:	d13c      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    24e0:	4b20      	ldr	r3, [pc, #128]	; (2564 <m2m_wifi_cb+0x1c8>)
    24e2:	681b      	ldr	r3, [r3, #0]
    24e4:	2b00      	cmp	r3, #0
    24e6:	d038      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    24e8:	2004      	movs	r0, #4
    24ea:	a91a      	add	r1, sp, #104	; 0x68
    24ec:	4798      	blx	r3
    24ee:	e034      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    24f0:	2815      	cmp	r0, #21
    24f2:	d10f      	bne.n	2514 <m2m_wifi_cb+0x178>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    24f4:	1c10      	adds	r0, r2, #0
    24f6:	a91a      	add	r1, sp, #104	; 0x68
    24f8:	2204      	movs	r2, #4
    24fa:	2300      	movs	r3, #0
    24fc:	4c18      	ldr	r4, [pc, #96]	; (2560 <m2m_wifi_cb+0x1c4>)
    24fe:	47a0      	blx	r4
    2500:	2800      	cmp	r0, #0
    2502:	d12a      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			if (gpfAppWifiCb)
    2504:	4b17      	ldr	r3, [pc, #92]	; (2564 <m2m_wifi_cb+0x1c8>)
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	2b00      	cmp	r3, #0
    250a:	d026      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    250c:	2015      	movs	r0, #21
    250e:	a91a      	add	r1, sp, #104	; 0x68
    2510:	4798      	blx	r3
    2512:	e022      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    2514:	2807      	cmp	r0, #7
    2516:	d10f      	bne.n	2538 <m2m_wifi_cb+0x19c>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    2518:	1c10      	adds	r0, r2, #0
    251a:	a901      	add	r1, sp, #4
    251c:	2264      	movs	r2, #100	; 0x64
    251e:	2301      	movs	r3, #1
    2520:	4c0f      	ldr	r4, [pc, #60]	; (2560 <m2m_wifi_cb+0x1c4>)
    2522:	47a0      	blx	r4
    2524:	2800      	cmp	r0, #0
    2526:	d118      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			if(gpfAppWifiCb)
    2528:	4b0e      	ldr	r3, [pc, #56]	; (2564 <m2m_wifi_cb+0x1c8>)
    252a:	681b      	ldr	r3, [r3, #0]
    252c:	2b00      	cmp	r3, #0
    252e:	d014      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2530:	2007      	movs	r0, #7
    2532:	a901      	add	r1, sp, #4
    2534:	4798      	blx	r3
    2536:	e010      	b.n	255a <m2m_wifi_cb+0x1be>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    2538:	282a      	cmp	r0, #42	; 0x2a
    253a:	d10e      	bne.n	255a <m2m_wifi_cb+0x1be>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    253c:	1c10      	adds	r0, r2, #0
    253e:	a901      	add	r1, sp, #4
    2540:	2204      	movs	r2, #4
    2542:	2301      	movs	r3, #1
    2544:	4c06      	ldr	r4, [pc, #24]	; (2560 <m2m_wifi_cb+0x1c4>)
    2546:	47a0      	blx	r4
    2548:	2800      	cmp	r0, #0
    254a:	d106      	bne.n	255a <m2m_wifi_cb+0x1be>
		{
			if(gpfAppWifiCb)
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <m2m_wifi_cb+0x1c8>)
    254e:	681b      	ldr	r3, [r3, #0]
    2550:	2b00      	cmp	r3, #0
    2552:	d002      	beq.n	255a <m2m_wifi_cb+0x1be>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    2554:	202a      	movs	r0, #42	; 0x2a
    2556:	a901      	add	r1, sp, #4
    2558:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    255a:	b01c      	add	sp, #112	; 0x70
    255c:	bd10      	pop	{r4, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	000022b5 	.word	0x000022b5
    2564:	20000ba0 	.word	0x20000ba0
    2568:	00001d3d 	.word	0x00001d3d
    256c:	20000ba4 	.word	0x20000ba4
    2570:	20000ba5 	.word	0x20000ba5

00002574 <m2m_wifi_init>:
_EXIT0:
	return ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2574:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	gpfAppWifiCb = param->pfAppWifiCb;
    2576:	6802      	ldr	r2, [r0, #0]
    2578:	4b0c      	ldr	r3, [pc, #48]	; (25ac <m2m_wifi_init+0x38>)
    257a:	601a      	str	r2, [r3, #0]
#endif

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    257c:	2200      	movs	r2, #0
    257e:	4b0c      	ldr	r3, [pc, #48]	; (25b0 <m2m_wifi_init+0x3c>)
    2580:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
    2582:	2000      	movs	r0, #0
    2584:	4b0b      	ldr	r3, [pc, #44]	; (25b4 <m2m_wifi_init+0x40>)
    2586:	4798      	blx	r3
    2588:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    258a:	d10c      	bne.n	25a6 <m2m_wifi_init+0x32>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    258c:	2000      	movs	r0, #0
    258e:	4b0a      	ldr	r3, [pc, #40]	; (25b8 <m2m_wifi_init+0x44>)
    2590:	4798      	blx	r3
    2592:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2594:	d104      	bne.n	25a0 <m2m_wifi_init+0x2c>

	hif_register_cb(M2M_REQ_GRP_WIFI,m2m_wifi_cb);
    2596:	2001      	movs	r0, #1
    2598:	4908      	ldr	r1, [pc, #32]	; (25bc <m2m_wifi_init+0x48>)
    259a:	4b09      	ldr	r3, [pc, #36]	; (25c0 <m2m_wifi_init+0x4c>)
    259c:	4798      	blx	r3

	return ret;
    259e:	e002      	b.n	25a6 <m2m_wifi_init+0x32>

_EXIT1:
	nm_drv_deinit(NULL);
    25a0:	2000      	movs	r0, #0
    25a2:	4b08      	ldr	r3, [pc, #32]	; (25c4 <m2m_wifi_init+0x50>)
    25a4:	4798      	blx	r3
    25a6:	b260      	sxtb	r0, r4
_EXIT0:
	return ret;
}
    25a8:	bd10      	pop	{r4, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	20000ba0 	.word	0x20000ba0
    25b0:	20000ba4 	.word	0x20000ba4
    25b4:	00002d25 	.word	0x00002d25
    25b8:	00001f1d 	.word	0x00001f1d
    25bc:	0000239d 	.word	0x0000239d
    25c0:	00002351 	.word	0x00002351
    25c4:	00002e15 	.word	0x00002e15

000025c8 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    25c8:	b508      	push	{r3, lr}
	return hif_handle_isr();
    25ca:	4b01      	ldr	r3, [pc, #4]	; (25d0 <m2m_wifi_handle_events+0x8>)
    25cc:	4798      	blx	r3
}
    25ce:	bd08      	pop	{r3, pc}
    25d0:	0000210d 	.word	0x0000210d

000025d4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    25d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25d6:	464f      	mov	r7, r9
    25d8:	4646      	mov	r6, r8
    25da:	b4c0      	push	{r6, r7}
    25dc:	b09f      	sub	sp, #124	; 0x7c
    25de:	4681      	mov	r9, r0
    25e0:	1c0e      	adds	r6, r1, #0
    25e2:	1c14      	adds	r4, r2, #0
    25e4:	1c1d      	adds	r5, r3, #0
    25e6:	ab26      	add	r3, sp, #152	; 0x98
    25e8:	881b      	ldrh	r3, [r3, #0]
    25ea:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    25ec:	2a01      	cmp	r2, #1
    25ee:	d00b      	beq.n	2608 <m2m_wifi_connect+0x34>
	{
		if((pvAuthInfo == NULL)||(m2m_strlen(pvAuthInfo)<=0)||(m2m_strlen(pvAuthInfo)>=M2M_MAX_PSK_LEN))
    25f0:	2d00      	cmp	r5, #0
    25f2:	d060      	beq.n	26b6 <m2m_wifi_connect+0xe2>
    25f4:	1c28      	adds	r0, r5, #0
    25f6:	4b39      	ldr	r3, [pc, #228]	; (26dc <m2m_wifi_connect+0x108>)
    25f8:	4798      	blx	r3
    25fa:	2800      	cmp	r0, #0
    25fc:	d05d      	beq.n	26ba <m2m_wifi_connect+0xe6>
    25fe:	1c28      	adds	r0, r5, #0
    2600:	4b36      	ldr	r3, [pc, #216]	; (26dc <m2m_wifi_connect+0x108>)
    2602:	4798      	blx	r3
    2604:	2840      	cmp	r0, #64	; 0x40
    2606:	d85a      	bhi.n	26be <m2m_wifi_connect+0xea>
			M2M_ERR("PSK LEN INVALID\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    2608:	1e73      	subs	r3, r6, #1
    260a:	2b1f      	cmp	r3, #31
    260c:	d859      	bhi.n	26c2 <m2m_wifi_connect+0xee>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
    260e:	4641      	mov	r1, r8
    2610:	290d      	cmp	r1, #13
    2612:	d901      	bls.n	2618 <m2m_wifi_connect+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2614:	29ff      	cmp	r1, #255	; 0xff
    2616:	d156      	bne.n	26c6 <m2m_wifi_connect+0xf2>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2618:	af04      	add	r7, sp, #16
    261a:	4668      	mov	r0, sp
    261c:	3056      	adds	r0, #86	; 0x56
    261e:	4649      	mov	r1, r9
    2620:	1c32      	adds	r2, r6, #0
    2622:	4b2f      	ldr	r3, [pc, #188]	; (26e0 <m2m_wifi_connect+0x10c>)
    2624:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2626:	19be      	adds	r6, r7, r6
    2628:	3640      	adds	r6, #64	; 0x40
    262a:	2300      	movs	r3, #0
    262c:	71b3      	strb	r3, [r6, #6]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    262e:	2344      	movs	r3, #68	; 0x44
    2630:	4642      	mov	r2, r8
    2632:	52fa      	strh	r2, [r7, r3]

	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    2634:	2341      	movs	r3, #65	; 0x41
    2636:	54fc      	strb	r4, [r7, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2638:	2c03      	cmp	r4, #3
    263a:	d11b      	bne.n	2674 <m2m_wifi_connect+0xa0>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    263c:	782b      	ldrb	r3, [r5, #0]
    263e:	3b01      	subs	r3, #1
    2640:	b2db      	uxtb	r3, r3
    2642:	aa04      	add	r2, sp, #16
    2644:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2646:	2b03      	cmp	r3, #3
    2648:	d83f      	bhi.n	26ca <m2m_wifi_connect+0xf6>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    264a:	786a      	ldrb	r2, [r5, #1]
    264c:	1e51      	subs	r1, r2, #1
    264e:	ab04      	add	r3, sp, #16
    2650:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2652:	2310      	movs	r3, #16
    2654:	1c11      	adds	r1, r2, #0
    2656:	4399      	bics	r1, r3
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
    2658:	20f4      	movs	r0, #244	; 0xf4
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    265a:	290b      	cmp	r1, #11
    265c:	d138      	bne.n	26d0 <m2m_wifi_connect+0xfc>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    265e:	1ca9      	adds	r1, r5, #2
    2660:	4668      	mov	r0, sp
    2662:	3012      	adds	r0, #18
    2664:	4b1e      	ldr	r3, [pc, #120]	; (26e0 <m2m_wifi_connect+0x10c>)
    2666:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    2668:	786b      	ldrb	r3, [r5, #1]
    266a:	aa04      	add	r2, sp, #16
    266c:	18d3      	adds	r3, r2, r3
    266e:	2200      	movs	r2, #0
    2670:	709a      	strb	r2, [r3, #2]
    2672:	e015      	b.n	26a0 <m2m_wifi_connect+0xcc>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2674:	2c02      	cmp	r4, #2
    2676:	d109      	bne.n	268c <m2m_wifi_connect+0xb8>
	{
		uint8	u8KeyLen = m2m_strlen((uint8*)pvAuthInfo) + 1;
    2678:	1c28      	adds	r0, r5, #0
    267a:	4b18      	ldr	r3, [pc, #96]	; (26dc <m2m_wifi_connect+0x108>)
    267c:	4798      	blx	r3
    267e:	1c42      	adds	r2, r0, #1
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u8KeyLen);
    2680:	b2d2      	uxtb	r2, r2
    2682:	a804      	add	r0, sp, #16
    2684:	1c29      	adds	r1, r5, #0
    2686:	4b16      	ldr	r3, [pc, #88]	; (26e0 <m2m_wifi_connect+0x10c>)
    2688:	4798      	blx	r3
    268a:	e009      	b.n	26a0 <m2m_wifi_connect+0xcc>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    268c:	2c04      	cmp	r4, #4
    268e:	d105      	bne.n	269c <m2m_wifi_connect+0xc8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2690:	a804      	add	r0, sp, #16
    2692:	1c29      	adds	r1, r5, #0
    2694:	223e      	movs	r2, #62	; 0x3e
    2696:	4b12      	ldr	r3, [pc, #72]	; (26e0 <m2m_wifi_connect+0x10c>)
    2698:	4798      	blx	r3
    269a:	e001      	b.n	26a0 <m2m_wifi_connect+0xcc>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    269c:	2c01      	cmp	r4, #1
    269e:	d116      	bne.n	26ce <m2m_wifi_connect+0xfa>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    26a0:	2300      	movs	r3, #0
    26a2:	9300      	str	r3, [sp, #0]
    26a4:	9301      	str	r3, [sp, #4]
    26a6:	9302      	str	r3, [sp, #8]
    26a8:	2001      	movs	r0, #1
    26aa:	2128      	movs	r1, #40	; 0x28
    26ac:	aa04      	add	r2, sp, #16
    26ae:	2368      	movs	r3, #104	; 0x68
    26b0:	4c0c      	ldr	r4, [pc, #48]	; (26e4 <m2m_wifi_connect+0x110>)
    26b2:	47a0      	blx	r4
    26b4:	e00c      	b.n	26d0 <m2m_wifi_connect+0xfc>
	if(u8SecType != M2M_WIFI_SEC_OPEN)
	{
		if((pvAuthInfo == NULL)||(m2m_strlen(pvAuthInfo)<=0)||(m2m_strlen(pvAuthInfo)>=M2M_MAX_PSK_LEN))
		{
			M2M_ERR("PSK LEN INVALID\n");
			ret = M2M_ERR_FAIL;
    26b6:	20f4      	movs	r0, #244	; 0xf4
    26b8:	e00a      	b.n	26d0 <m2m_wifi_connect+0xfc>
    26ba:	20f4      	movs	r0, #244	; 0xf4
    26bc:	e008      	b.n	26d0 <m2m_wifi_connect+0xfc>
    26be:	20f4      	movs	r0, #244	; 0xf4
    26c0:	e006      	b.n	26d0 <m2m_wifi_connect+0xfc>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
	{
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
    26c2:	20f4      	movs	r0, #244	; 0xf4
    26c4:	e004      	b.n	26d0 <m2m_wifi_connect+0xfc>
	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
		{
			M2M_ERR("CH INVALID\n");
			ret = M2M_ERR_FAIL;
    26c6:	20f4      	movs	r0, #244	; 0xf4
    26c8:	e002      	b.n	26d0 <m2m_wifi_connect+0xfc>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
			ret = M2M_ERR_FAIL;
    26ca:	20f4      	movs	r0, #244	; 0xf4
    26cc:	e000      	b.n	26d0 <m2m_wifi_connect+0xfc>

	}
	else
	{
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
    26ce:	20f4      	movs	r0, #244	; 0xf4
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);

ERR1:
	return ret;
    26d0:	b240      	sxtb	r0, r0
}
    26d2:	b01f      	add	sp, #124	; 0x7c
    26d4:	bc0c      	pop	{r2, r3}
    26d6:	4690      	mov	r8, r2
    26d8:	4699      	mov	r9, r3
    26da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26dc:	00001d4d 	.word	0x00001d4d
    26e0:	00001d29 	.word	0x00001d29
    26e4:	00001f69 	.word	0x00001f69

000026e8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    26e8:	2000      	movs	r0, #0
    26ea:	4770      	bx	lr

000026ec <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    26ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    26ee:	465f      	mov	r7, fp
    26f0:	4656      	mov	r6, sl
    26f2:	464d      	mov	r5, r9
    26f4:	4644      	mov	r4, r8
    26f6:	b4f0      	push	{r4, r5, r6, r7}
    26f8:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	ret = nm_read_reg_with_ret(0x1, &reg);
    26fa:	2001      	movs	r0, #1
    26fc:	a901      	add	r1, sp, #4
    26fe:	4b2b      	ldr	r3, [pc, #172]	; (27ac <nm_clkless_wake+0xc0>)
    2700:	4798      	blx	r3
    2702:	4680      	mov	r8, r0
	if(ret != M2M_SUCCESS) {
    2704:	2800      	cmp	r0, #0
    2706:	d13f      	bne.n	2788 <nm_clkless_wake+0x9c>
    2708:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    270a:	4b29      	ldr	r3, [pc, #164]	; (27b0 <nm_clkless_wake+0xc4>)
    270c:	469b      	mov	fp, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    270e:	4b29      	ldr	r3, [pc, #164]	; (27b4 <nm_clkless_wake+0xc8>)
    2710:	469a      	mov	sl, r3
    2712:	4b26      	ldr	r3, [pc, #152]	; (27ac <nm_clkless_wake+0xc0>)
    2714:	4699      	mov	r9, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    2716:	2102      	movs	r1, #2
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	4319      	orrs	r1, r3
    271c:	2001      	movs	r0, #1
    271e:	47d8      	blx	fp
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2720:	4653      	mov	r3, sl
    2722:	6818      	ldr	r0, [r3, #0]
    2724:	4669      	mov	r1, sp
    2726:	47c8      	blx	r9
    2728:	4680      	mov	r8, r0
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    272a:	2800      	cmp	r0, #0
    272c:	d102      	bne.n	2734 <nm_clkless_wake+0x48>
    272e:	9b00      	ldr	r3, [sp, #0]
    2730:	2b00      	cmp	r3, #0
    2732:	d109      	bne.n	2748 <nm_clkless_wake+0x5c>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    2734:	220e      	movs	r2, #14
    2736:	4b1f      	ldr	r3, [pc, #124]	; (27b4 <nm_clkless_wake+0xc8>)
    2738:	601a      	str	r2, [r3, #0]
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    273a:	200e      	movs	r0, #14
    273c:	4669      	mov	r1, sp
    273e:	4b1b      	ldr	r3, [pc, #108]	; (27ac <nm_clkless_wake+0xc0>)
    2740:	4798      	blx	r3
    2742:	4680      	mov	r8, r0
			if(ret != M2M_SUCCESS) {
    2744:	2800      	cmp	r0, #0
    2746:	d11f      	bne.n	2788 <nm_clkless_wake+0x9c>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    2748:	9b00      	ldr	r3, [sp, #0]
    274a:	075b      	lsls	r3, r3, #29
    274c:	d419      	bmi.n	2782 <nm_clkless_wake+0x96>
    274e:	3401      	adds	r4, #1
    2750:	1c20      	adds	r0, r4, #0
    2752:	2103      	movs	r1, #3
    2754:	4b18      	ldr	r3, [pc, #96]	; (27b8 <nm_clkless_wake+0xcc>)
    2756:	4798      	blx	r3
    2758:	2900      	cmp	r1, #0
    275a:	d118      	bne.n	278e <nm_clkless_wake+0xa2>
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    275c:	4f17      	ldr	r7, [pc, #92]	; (27bc <nm_clkless_wake+0xd0>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    275e:	4e15      	ldr	r6, [pc, #84]	; (27b4 <nm_clkless_wake+0xc8>)
    2760:	4d12      	ldr	r5, [pc, #72]	; (27ac <nm_clkless_wake+0xc0>)
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(1);
    2762:	2001      	movs	r0, #1
    2764:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2766:	6830      	ldr	r0, [r6, #0]
    2768:	4669      	mov	r1, sp
    276a:	47a8      	blx	r5
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    276c:	9b00      	ldr	r3, [sp, #0]
    276e:	075b      	lsls	r3, r3, #29
    2770:	d407      	bmi.n	2782 <nm_clkless_wake+0x96>
    2772:	3401      	adds	r4, #1
    2774:	1c20      	adds	r0, r4, #0
    2776:	2103      	movs	r1, #3
    2778:	4b0f      	ldr	r3, [pc, #60]	; (27b8 <nm_clkless_wake+0xcc>)
    277a:	4798      	blx	r3
    277c:	2900      	cmp	r1, #0
    277e:	d0f0      	beq.n	2762 <nm_clkless_wake+0x76>
    2780:	e005      	b.n	278e <nm_clkless_wake+0xa2>
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
		}
	} while((clk_status_reg & 0x4) == 0);
    2782:	9b00      	ldr	r3, [sp, #0]
    2784:	075b      	lsls	r3, r3, #29
    2786:	d5c6      	bpl.n	2716 <nm_clkless_wake+0x2a>

_WAKE_EXIT:
	return ret;
    2788:	4643      	mov	r3, r8
    278a:	b258      	sxtb	r0, r3
    278c:	e006      	b.n	279c <nm_clkless_wake+0xb0>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    278e:	2102      	movs	r1, #2
    2790:	9b01      	ldr	r3, [sp, #4]
    2792:	4319      	orrs	r1, r3
    2794:	2001      	movs	r0, #1
    2796:	4b06      	ldr	r3, [pc, #24]	; (27b0 <nm_clkless_wake+0xc4>)
    2798:	4798      	blx	r3
    279a:	e7f2      	b.n	2782 <nm_clkless_wake+0x96>
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
    279c:	b003      	add	sp, #12
    279e:	bc3c      	pop	{r2, r3, r4, r5}
    27a0:	4690      	mov	r8, r2
    27a2:	4699      	mov	r9, r3
    27a4:	46a2      	mov	sl, r4
    27a6:	46ab      	mov	fp, r5
    27a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27aa:	46c0      	nop			; (mov r8, r8)
    27ac:	00002c35 	.word	0x00002c35
    27b0:	00002c41 	.word	0x00002c41
    27b4:	20000400 	.word	0x20000400
    27b8:	00005a51 	.word	0x00005a51
    27bc:	00001a31 	.word	0x00001a31

000027c0 <chip_idle>:
void chip_idle(void)
{
    27c0:	b500      	push	{lr}
    27c2:	b083      	sub	sp, #12
	uint32 reg =0;
    27c4:	2300      	movs	r3, #0
    27c6:	9301      	str	r3, [sp, #4]
	nm_read_reg_with_ret(0x1, &reg);
    27c8:	2001      	movs	r0, #1
    27ca:	a901      	add	r1, sp, #4
    27cc:	4b06      	ldr	r3, [pc, #24]	; (27e8 <chip_idle+0x28>)
    27ce:	4798      	blx	r3
	if(reg&0x2)
    27d0:	9901      	ldr	r1, [sp, #4]
    27d2:	078b      	lsls	r3, r1, #30
    27d4:	d505      	bpl.n	27e2 <chip_idle+0x22>
	{
		reg &=~(1 << 1);
    27d6:	2302      	movs	r3, #2
    27d8:	4399      	bics	r1, r3
    27da:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1, reg);
    27dc:	2001      	movs	r0, #1
    27de:	4b03      	ldr	r3, [pc, #12]	; (27ec <chip_idle+0x2c>)
    27e0:	4798      	blx	r3
	}
}
    27e2:	b003      	add	sp, #12
    27e4:	bd00      	pop	{pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	00002c35 	.word	0x00002c35
    27ec:	00002c41 	.word	0x00002c41

000027f0 <enable_rf_blocks>:

void enable_rf_blocks(void)
{
    27f0:	b538      	push	{r3, r4, r5, lr}
	nm_write_reg(0x6, 0xdb);
    27f2:	2006      	movs	r0, #6
    27f4:	21db      	movs	r1, #219	; 0xdb
    27f6:	4c0c      	ldr	r4, [pc, #48]	; (2828 <enable_rf_blocks+0x38>)
    27f8:	47a0      	blx	r4
	nm_write_reg(0x7, 0x6);
    27fa:	2007      	movs	r0, #7
    27fc:	2106      	movs	r1, #6
    27fe:	47a0      	blx	r4
	nm_bsp_sleep(10);
    2800:	200a      	movs	r0, #10
    2802:	4d0a      	ldr	r5, [pc, #40]	; (282c <enable_rf_blocks+0x3c>)
    2804:	47a8      	blx	r5
	nm_write_reg(0x1480, 0);
    2806:	20a4      	movs	r0, #164	; 0xa4
    2808:	0140      	lsls	r0, r0, #5
    280a:	2100      	movs	r1, #0
    280c:	47a0      	blx	r4
	nm_write_reg(0x1484, 0);
    280e:	4808      	ldr	r0, [pc, #32]	; (2830 <enable_rf_blocks+0x40>)
    2810:	2100      	movs	r1, #0
    2812:	47a0      	blx	r4
	nm_bsp_sleep(10);
    2814:	200a      	movs	r0, #10
    2816:	47a8      	blx	r5

	nm_write_reg(0x6, 0x0);
    2818:	2006      	movs	r0, #6
    281a:	2100      	movs	r1, #0
    281c:	47a0      	blx	r4
	nm_write_reg(0x7, 0x0);
    281e:	2007      	movs	r0, #7
    2820:	2100      	movs	r1, #0
    2822:	47a0      	blx	r4
}
    2824:	bd38      	pop	{r3, r4, r5, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	00002c41 	.word	0x00002c41
    282c:	00001a31 	.word	0x00001a31
    2830:	00001484 	.word	0x00001484

00002834 <enable_interrupts>:

sint8 enable_interrupts(void) 
{
    2834:	b500      	push	{lr}
    2836:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2838:	4816      	ldr	r0, [pc, #88]	; (2894 <enable_interrupts+0x60>)
    283a:	a901      	add	r1, sp, #4
    283c:	4b16      	ldr	r3, [pc, #88]	; (2898 <enable_interrupts+0x64>)
    283e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2840:	2800      	cmp	r0, #0
    2842:	d11e      	bne.n	2882 <enable_interrupts+0x4e>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    2844:	2180      	movs	r1, #128	; 0x80
    2846:	0049      	lsls	r1, r1, #1
    2848:	9b01      	ldr	r3, [sp, #4]
    284a:	4319      	orrs	r1, r3
    284c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    284e:	4811      	ldr	r0, [pc, #68]	; (2894 <enable_interrupts+0x60>)
    2850:	4b12      	ldr	r3, [pc, #72]	; (289c <enable_interrupts+0x68>)
    2852:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2854:	2800      	cmp	r0, #0
    2856:	d116      	bne.n	2886 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2858:	20d0      	movs	r0, #208	; 0xd0
    285a:	0140      	lsls	r0, r0, #5
    285c:	a901      	add	r1, sp, #4
    285e:	4b0e      	ldr	r3, [pc, #56]	; (2898 <enable_interrupts+0x64>)
    2860:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2862:	2800      	cmp	r0, #0
    2864:	d111      	bne.n	288a <enable_interrupts+0x56>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    2866:	2180      	movs	r1, #128	; 0x80
    2868:	0249      	lsls	r1, r1, #9
    286a:	9b01      	ldr	r3, [sp, #4]
    286c:	4319      	orrs	r1, r3
    286e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2870:	20d0      	movs	r0, #208	; 0xd0
    2872:	0140      	lsls	r0, r0, #5
    2874:	4b09      	ldr	r3, [pc, #36]	; (289c <enable_interrupts+0x68>)
    2876:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
    2878:	2300      	movs	r3, #0
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
    287a:	2800      	cmp	r0, #0
    287c:	d006      	beq.n	288c <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
    287e:	23fa      	movs	r3, #250	; 0xfa
    2880:	e004      	b.n	288c <enable_interrupts+0x58>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    2882:	23fa      	movs	r3, #250	; 0xfa
    2884:	e002      	b.n	288c <enable_interrupts+0x58>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    2886:	23fa      	movs	r3, #250	; 0xfa
    2888:	e000      	b.n	288c <enable_interrupts+0x58>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    288a:	23fa      	movs	r3, #250	; 0xfa
    288c:	b258      	sxtb	r0, r3
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
	}
	return M2M_SUCCESS;
}
    288e:	b003      	add	sp, #12
    2890:	bd00      	pop	{pc}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	00001408 	.word	0x00001408
    2898:	00002c35 	.word	0x00002c35
    289c:	00002c41 	.word	0x00002c41

000028a0 <cpu_start>:

sint8 cpu_start(void) {
    28a0:	b570      	push	{r4, r5, r6, lr}
    28a2:	b082      	sub	sp, #8
	sint8 ret;

	/**
	reset regs 
	*/
	nm_write_reg(BOOTROM_REG,0);
    28a4:	481e      	ldr	r0, [pc, #120]	; (2920 <cpu_start+0x80>)
    28a6:	2100      	movs	r1, #0
    28a8:	4c1e      	ldr	r4, [pc, #120]	; (2924 <cpu_start+0x84>)
    28aa:	47a0      	blx	r4
	nm_write_reg(NMI_STATE_REG,0);
    28ac:	481e      	ldr	r0, [pc, #120]	; (2928 <cpu_start+0x88>)
    28ae:	2100      	movs	r1, #0
    28b0:	47a0      	blx	r4
	nm_write_reg(NMI_REV_REG,0);
    28b2:	481e      	ldr	r0, [pc, #120]	; (292c <cpu_start+0x8c>)
    28b4:	2100      	movs	r1, #0
    28b6:	47a0      	blx	r4
	
	/**
	Go...
	**/
	ret = nm_read_reg_with_ret(0x1118, &reg);
    28b8:	4e1d      	ldr	r6, [pc, #116]	; (2930 <cpu_start+0x90>)
    28ba:	1c30      	adds	r0, r6, #0
    28bc:	a901      	add	r1, sp, #4
    28be:	4d1d      	ldr	r5, [pc, #116]	; (2934 <cpu_start+0x94>)
    28c0:	47a8      	blx	r5
	if (M2M_SUCCESS != ret) {
		ret = M2M_ERR_BUS_FAIL;
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
	}
	reg |= (1 << 0);
    28c2:	2101      	movs	r1, #1
    28c4:	9a01      	ldr	r2, [sp, #4]
    28c6:	4311      	orrs	r1, r2
    28c8:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(0x1118, reg);
    28ca:	1c30      	adds	r0, r6, #0
    28cc:	47a0      	blx	r4
	ret = nm_write_reg(0x150014, 0x1);
    28ce:	481a      	ldr	r0, [pc, #104]	; (2938 <cpu_start+0x98>)
    28d0:	2101      	movs	r1, #1
    28d2:	47a0      	blx	r4
    28d4:	1c04      	adds	r4, r0, #0
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    28d6:	20a0      	movs	r0, #160	; 0xa0
    28d8:	0140      	lsls	r0, r0, #5
    28da:	a901      	add	r1, sp, #4
    28dc:	47a8      	blx	r5
    28de:	1824      	adds	r4, r4, r0
    28e0:	b2e4      	uxtb	r4, r4
	if ((reg & (1ul << 10)) == (1ul << 10)) {
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	055a      	lsls	r2, r3, #21
    28e6:	d401      	bmi.n	28ec <cpu_start+0x4c>
		M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
	}
	reg |= (1 << 0);
	ret = nm_write_reg(0x1118, reg);
	ret = nm_write_reg(0x150014, 0x1);
	ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    28e8:	b2e4      	uxtb	r4, r4
    28ea:	e008      	b.n	28fe <cpu_start+0x5e>
	if ((reg & (1ul << 10)) == (1ul << 10)) {
		reg &= ~(1ul << 10);
    28ec:	4913      	ldr	r1, [pc, #76]	; (293c <cpu_start+0x9c>)
    28ee:	4019      	ands	r1, r3
    28f0:	9101      	str	r1, [sp, #4]
		ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    28f2:	20a0      	movs	r0, #160	; 0xa0
    28f4:	0140      	lsls	r0, r0, #5
    28f6:	4b0b      	ldr	r3, [pc, #44]	; (2924 <cpu_start+0x84>)
    28f8:	4798      	blx	r3
    28fa:	1824      	adds	r4, r4, r0
    28fc:	b2e4      	uxtb	r4, r4
	}

	reg |= (1ul << 10);
    28fe:	2180      	movs	r1, #128	; 0x80
    2900:	00c9      	lsls	r1, r1, #3
    2902:	9b01      	ldr	r3, [sp, #4]
    2904:	4319      	orrs	r1, r3
    2906:	9101      	str	r1, [sp, #4]
	ret += nm_write_reg(NMI_GLB_RESET_0, reg);
    2908:	20a0      	movs	r0, #160	; 0xa0
    290a:	0140      	lsls	r0, r0, #5
    290c:	4b05      	ldr	r3, [pc, #20]	; (2924 <cpu_start+0x84>)
    290e:	4798      	blx	r3
    2910:	1824      	adds	r4, r4, r0
    2912:	b2e4      	uxtb	r4, r4
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2914:	2001      	movs	r0, #1
    2916:	4b0a      	ldr	r3, [pc, #40]	; (2940 <cpu_start+0xa0>)
    2918:	4798      	blx	r3
	return ret;
    291a:	b260      	sxtb	r0, r4
}
    291c:	b002      	add	sp, #8
    291e:	bd70      	pop	{r4, r5, r6, pc}
    2920:	000c000c 	.word	0x000c000c
    2924:	00002c41 	.word	0x00002c41
    2928:	0000108c 	.word	0x0000108c
    292c:	000207ac 	.word	0x000207ac
    2930:	00001118 	.word	0x00001118
    2934:	00002c35 	.word	0x00002c35
    2938:	00150014 	.word	0x00150014
    293c:	fffffbff 	.word	0xfffffbff
    2940:	00001a31 	.word	0x00001a31

00002944 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
    2944:	b500      	push	{lr}
    2946:	b083      	sub	sp, #12
	static uint32 chipid = 0;

	if (chipid == 0) {
    2948:	4b21      	ldr	r3, [pc, #132]	; (29d0 <nmi_get_chipid+0x8c>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	2b00      	cmp	r3, #0
    294e:	d13a      	bne.n	29c6 <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2950:	2080      	movs	r0, #128	; 0x80
    2952:	0140      	lsls	r0, r0, #5
    2954:	491e      	ldr	r1, [pc, #120]	; (29d0 <nmi_get_chipid+0x8c>)
    2956:	4b1f      	ldr	r3, [pc, #124]	; (29d4 <nmi_get_chipid+0x90>)
    2958:	4798      	blx	r3
    295a:	2800      	cmp	r0, #0
    295c:	d003      	beq.n	2966 <nmi_get_chipid+0x22>
			chipid = 0;
    295e:	2200      	movs	r2, #0
    2960:	4b1b      	ldr	r3, [pc, #108]	; (29d0 <nmi_get_chipid+0x8c>)
    2962:	601a      	str	r2, [r3, #0]
			return 0;
    2964:	e02d      	b.n	29c2 <nmi_get_chipid+0x7e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2966:	481c      	ldr	r0, [pc, #112]	; (29d8 <nmi_get_chipid+0x94>)
    2968:	a901      	add	r1, sp, #4
    296a:	4b1a      	ldr	r3, [pc, #104]	; (29d4 <nmi_get_chipid+0x90>)
    296c:	4798      	blx	r3
    296e:	2800      	cmp	r0, #0
    2970:	d003      	beq.n	297a <nmi_get_chipid+0x36>
			chipid = 0;
    2972:	2200      	movs	r2, #0
    2974:	4b16      	ldr	r3, [pc, #88]	; (29d0 <nmi_get_chipid+0x8c>)
    2976:	601a      	str	r2, [r3, #0]
			return 0;
    2978:	e023      	b.n	29c2 <nmi_get_chipid+0x7e>
		}

		if (chipid == 0x1002a0)  {
    297a:	4b15      	ldr	r3, [pc, #84]	; (29d0 <nmi_get_chipid+0x8c>)
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	4a17      	ldr	r2, [pc, #92]	; (29dc <nmi_get_chipid+0x98>)
    2980:	4293      	cmp	r3, r2
    2982:	d106      	bne.n	2992 <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    2984:	9901      	ldr	r1, [sp, #4]
    2986:	2901      	cmp	r1, #1
    2988:	d012      	beq.n	29b0 <nmi_get_chipid+0x6c>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    298a:	4a15      	ldr	r2, [pc, #84]	; (29e0 <nmi_get_chipid+0x9c>)
    298c:	4b10      	ldr	r3, [pc, #64]	; (29d0 <nmi_get_chipid+0x8c>)
    298e:	601a      	str	r2, [r3, #0]
    2990:	e00e      	b.n	29b0 <nmi_get_chipid+0x6c>
			}
		} else if(chipid == 0x1002b0) {
    2992:	4a14      	ldr	r2, [pc, #80]	; (29e4 <nmi_get_chipid+0xa0>)
    2994:	4293      	cmp	r3, r2
    2996:	d10b      	bne.n	29b0 <nmi_get_chipid+0x6c>
			if(rfrevid == 3) { /* 1002B0 */
    2998:	9b01      	ldr	r3, [sp, #4]
    299a:	2b03      	cmp	r3, #3
    299c:	d008      	beq.n	29b0 <nmi_get_chipid+0x6c>
			} else if(rfrevid == 4) { /* 1002B1 */
    299e:	2b04      	cmp	r3, #4
    29a0:	d103      	bne.n	29aa <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    29a2:	4a11      	ldr	r2, [pc, #68]	; (29e8 <nmi_get_chipid+0xa4>)
    29a4:	4b0a      	ldr	r3, [pc, #40]	; (29d0 <nmi_get_chipid+0x8c>)
    29a6:	601a      	str	r2, [r3, #0]
    29a8:	e002      	b.n	29b0 <nmi_get_chipid+0x6c>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    29aa:	4a10      	ldr	r2, [pc, #64]	; (29ec <nmi_get_chipid+0xa8>)
    29ac:	4b08      	ldr	r3, [pc, #32]	; (29d0 <nmi_get_chipid+0x8c>)
    29ae:	601a      	str	r2, [r3, #0]
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    29b0:	4b07      	ldr	r3, [pc, #28]	; (29d0 <nmi_get_chipid+0x8c>)
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    29b2:	4a0f      	ldr	r2, [pc, #60]	; (29f0 <nmi_get_chipid+0xac>)
    29b4:	6819      	ldr	r1, [r3, #0]
    29b6:	400a      	ands	r2, r1
		chipid |= 0x050000;
    29b8:	21a0      	movs	r1, #160	; 0xa0
    29ba:	02c9      	lsls	r1, r1, #11
    29bc:	430a      	orrs	r2, r1
    29be:	601a      	str	r2, [r3, #0]
    29c0:	e001      	b.n	29c6 <nmi_get_chipid+0x82>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
			chipid = 0;
			return 0;
    29c2:	2000      	movs	r0, #0
    29c4:	e001      	b.n	29ca <nmi_get_chipid+0x86>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <nmi_get_chipid+0x8c>)
    29c8:	6818      	ldr	r0, [r3, #0]
}
    29ca:	b003      	add	sp, #12
    29cc:	bd00      	pop	{pc}
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	20000ba8 	.word	0x20000ba8
    29d4:	00002c35 	.word	0x00002c35
    29d8:	000013f4 	.word	0x000013f4
    29dc:	001002a0 	.word	0x001002a0
    29e0:	001002a1 	.word	0x001002a1
    29e4:	001002b0 	.word	0x001002b0
    29e8:	001002b1 	.word	0x001002b1
    29ec:	001002b2 	.word	0x001002b2
    29f0:	fff0ffff 	.word	0xfff0ffff

000029f4 <restore_pmu_settings_after_global_reset>:
    }
    return rfrevid;
}

void restore_pmu_settings_after_global_reset(void)
{
    29f4:	b508      	push	{r3, lr}
	/* 
	* Must restore PMU register value after 
	* global reset if PMU toggle is done at 
	* least once since the last hard reset.
	*/
	if(REV(nmi_get_chipid()) >= REV_B0) {
    29f6:	4b06      	ldr	r3, [pc, #24]	; (2a10 <restore_pmu_settings_after_global_reset+0x1c>)
    29f8:	4798      	blx	r3
    29fa:	0500      	lsls	r0, r0, #20
    29fc:	0d00      	lsrs	r0, r0, #20
    29fe:	4b05      	ldr	r3, [pc, #20]	; (2a14 <restore_pmu_settings_after_global_reset+0x20>)
    2a00:	4298      	cmp	r0, r3
    2a02:	d903      	bls.n	2a0c <restore_pmu_settings_after_global_reset+0x18>
		nm_write_reg(0x1e48, 0xb78469ce);
    2a04:	4804      	ldr	r0, [pc, #16]	; (2a18 <restore_pmu_settings_after_global_reset+0x24>)
    2a06:	4905      	ldr	r1, [pc, #20]	; (2a1c <restore_pmu_settings_after_global_reset+0x28>)
    2a08:	4b05      	ldr	r3, [pc, #20]	; (2a20 <restore_pmu_settings_after_global_reset+0x2c>)
    2a0a:	4798      	blx	r3
	}
}
    2a0c:	bd08      	pop	{r3, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	00002945 	.word	0x00002945
    2a14:	000002af 	.word	0x000002af
    2a18:	00001e48 	.word	0x00001e48
    2a1c:	b78469ce 	.word	0xb78469ce
    2a20:	00002c41 	.word	0x00002c41

00002a24 <nmi_update_pll>:

void nmi_update_pll(void)
{
    2a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32 pll;

	pll = nm_read_reg(0x1428);
    2a26:	4c08      	ldr	r4, [pc, #32]	; (2a48 <nmi_update_pll+0x24>)
    2a28:	1c20      	adds	r0, r4, #0
    2a2a:	4b08      	ldr	r3, [pc, #32]	; (2a4c <nmi_update_pll+0x28>)
    2a2c:	4798      	blx	r3
	pll &= ~0x1ul;
    2a2e:	2601      	movs	r6, #1
    2a30:	1c07      	adds	r7, r0, #0
    2a32:	43b7      	bics	r7, r6
	nm_write_reg(0x1428, pll);
    2a34:	1c20      	adds	r0, r4, #0
    2a36:	1c39      	adds	r1, r7, #0
    2a38:	4d05      	ldr	r5, [pc, #20]	; (2a50 <nmi_update_pll+0x2c>)
    2a3a:	47a8      	blx	r5
	pll |= 0x1ul;
    2a3c:	1c39      	adds	r1, r7, #0
    2a3e:	4331      	orrs	r1, r6
	nm_write_reg(0x1428, pll);
    2a40:	1c20      	adds	r0, r4, #0
    2a42:	47a8      	blx	r5

}
    2a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	00001428 	.word	0x00001428
    2a4c:	00002c29 	.word	0x00002c29
    2a50:	00002c41 	.word	0x00002c41

00002a54 <nmi_set_sys_clk_src_to_xo>:
void nmi_set_sys_clk_src_to_xo(void) 
{
    2a54:	b510      	push	{r4, lr}
	uint32 val32;
	
	/* Switch system clock source to XO. This will take effect after nmi_update_pll(). */
	val32 = nm_read_reg(0x141c);
    2a56:	4c06      	ldr	r4, [pc, #24]	; (2a70 <nmi_set_sys_clk_src_to_xo+0x1c>)
    2a58:	1c20      	adds	r0, r4, #0
    2a5a:	4b06      	ldr	r3, [pc, #24]	; (2a74 <nmi_set_sys_clk_src_to_xo+0x20>)
    2a5c:	4798      	blx	r3
	val32 |= (1 << 2);
    2a5e:	2304      	movs	r3, #4
    2a60:	1c01      	adds	r1, r0, #0
    2a62:	4319      	orrs	r1, r3
	nm_write_reg(0x141c, val32);
    2a64:	1c20      	adds	r0, r4, #0
    2a66:	4b04      	ldr	r3, [pc, #16]	; (2a78 <nmi_set_sys_clk_src_to_xo+0x24>)
    2a68:	4798      	blx	r3
	
	/* Do PLL update */
	nmi_update_pll();
    2a6a:	4b04      	ldr	r3, [pc, #16]	; (2a7c <nmi_set_sys_clk_src_to_xo+0x28>)
    2a6c:	4798      	blx	r3
}
    2a6e:	bd10      	pop	{r4, pc}
    2a70:	0000141c 	.word	0x0000141c
    2a74:	00002c29 	.word	0x00002c29
    2a78:	00002c41 	.word	0x00002c41
    2a7c:	00002a25 	.word	0x00002a25

00002a80 <chip_wake>:
sint8 chip_wake(void)
{
    2a80:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	ret  = nm_clkless_wake();
    2a82:	4b04      	ldr	r3, [pc, #16]	; (2a94 <chip_wake+0x14>)
    2a84:	4798      	blx	r3
    2a86:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) return ret;
    2a88:	d101      	bne.n	2a8e <chip_wake+0xe>
	
	enable_rf_blocks();
    2a8a:	4b03      	ldr	r3, [pc, #12]	; (2a98 <chip_wake+0x18>)
    2a8c:	4798      	blx	r3

	return ret;
}
    2a8e:	1c20      	adds	r0, r4, #0
    2a90:	bd10      	pop	{r4, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	000026ed 	.word	0x000026ed
    2a98:	000027f1 	.word	0x000027f1

00002a9c <chip_reset>:
	nm_write_reg(NMI_REV_REG,0);
	nm_write_reg(NMI_PIN_MUX_0, 0x11111000);
	return ret;
}
sint8 chip_reset(void)
{
    2a9c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifndef USE_UART
	nmi_set_sys_clk_src_to_xo();
    2a9e:	4b07      	ldr	r3, [pc, #28]	; (2abc <chip_reset+0x20>)
    2aa0:	4798      	blx	r3
#endif
	ret += nm_write_reg(NMI_GLB_RESET_0, 0);
    2aa2:	20a0      	movs	r0, #160	; 0xa0
    2aa4:	0140      	lsls	r0, r0, #5
    2aa6:	2100      	movs	r1, #0
    2aa8:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <chip_reset+0x24>)
    2aaa:	4798      	blx	r3
    2aac:	1c04      	adds	r4, r0, #0
	nm_bsp_sleep(50);
    2aae:	2032      	movs	r0, #50	; 0x32
    2ab0:	4b04      	ldr	r3, [pc, #16]	; (2ac4 <chip_reset+0x28>)
    2ab2:	4798      	blx	r3
#ifndef USE_UART
	restore_pmu_settings_after_global_reset();
    2ab4:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <chip_reset+0x2c>)
    2ab6:	4798      	blx	r3
#endif
	return ret;
}
    2ab8:	1c20      	adds	r0, r4, #0
    2aba:	bd10      	pop	{r4, pc}
    2abc:	00002a55 	.word	0x00002a55
    2ac0:	00002c41 	.word	0x00002c41
    2ac4:	00001a31 	.word	0x00001a31
    2ac8:	000029f5 	.word	0x000029f5

00002acc <wait_for_bootrom>:

}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(void)
{
    2acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	
	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2ace:	4d17      	ldr	r5, [pc, #92]	; (2b2c <wait_for_bootrom+0x60>)
    2ad0:	4c17      	ldr	r4, [pc, #92]	; (2b30 <wait_for_bootrom+0x64>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2ad2:	4e18      	ldr	r6, [pc, #96]	; (2b34 <wait_for_bootrom+0x68>)
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	
	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2ad4:	1c28      	adds	r0, r5, #0
    2ad6:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2ad8:	2800      	cmp	r0, #0
    2ada:	db02      	blt.n	2ae2 <wait_for_bootrom+0x16>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2adc:	2001      	movs	r0, #1
    2ade:	47b0      	blx	r6
	}
    2ae0:	e7f8      	b.n	2ad4 <wait_for_bootrom+0x8>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2ae2:	4815      	ldr	r0, [pc, #84]	; (2b38 <wait_for_bootrom+0x6c>)
    2ae4:	4b12      	ldr	r3, [pc, #72]	; (2b30 <wait_for_bootrom+0x64>)
    2ae6:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2ae8:	07c3      	lsls	r3, r0, #31
    2aea:	d512      	bpl.n	2b12 <wait_for_bootrom+0x46>
    2aec:	e008      	b.n	2b00 <wait_for_bootrom+0x34>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2aee:	2001      	movs	r0, #1
    2af0:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    2af2:	4812      	ldr	r0, [pc, #72]	; (2b3c <wait_for_bootrom+0x70>)
    2af4:	47b0      	blx	r6
    2af6:	3c01      	subs	r4, #1

			if(++cnt > TIMEOUT)
    2af8:	2c00      	cmp	r4, #0
    2afa:	d007      	beq.n	2b0c <wait_for_bootrom+0x40>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    2afc:	42a8      	cmp	r0, r5
    2afe:	d1f6      	bne.n	2aee <wait_for_bootrom+0x22>
				goto ERR2;
			}
		}
	}

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2b00:	480e      	ldr	r0, [pc, #56]	; (2b3c <wait_for_bootrom+0x70>)
    2b02:	490f      	ldr	r1, [pc, #60]	; (2b40 <wait_for_bootrom+0x74>)
    2b04:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <wait_for_bootrom+0x78>)
    2b06:	4798      	blx	r3
}
#endif /* __ROM_TEST__ */

sint8 wait_for_bootrom(void)
{
	sint8 ret = M2M_SUCCESS;
    2b08:	2000      	movs	r0, #0
    2b0a:	e000      	b.n	2b0e <wait_for_bootrom+0x42>
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > TIMEOUT)
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    2b0c:	20fb      	movs	r0, #251	; 0xfb
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2b0e:	b240      	sxtb	r0, r0
    2b10:	e00b      	b.n	2b2a <wait_for_bootrom+0x5e>
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2b12:	2001      	movs	r0, #1
    2b14:	4b07      	ldr	r3, [pc, #28]	; (2b34 <wait_for_bootrom+0x68>)
    2b16:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    2b18:	4808      	ldr	r0, [pc, #32]	; (2b3c <wait_for_bootrom+0x70>)
    2b1a:	4b05      	ldr	r3, [pc, #20]	; (2b30 <wait_for_bootrom+0x64>)
    2b1c:	4798      	blx	r3
    2b1e:	24fa      	movs	r4, #250	; 0xfa
    2b20:	00e4      	lsls	r4, r4, #3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    2b22:	4d09      	ldr	r5, [pc, #36]	; (2b48 <wait_for_bootrom+0x7c>)
		{
			nm_bsp_sleep(1);
    2b24:	4f03      	ldr	r7, [pc, #12]	; (2b34 <wait_for_bootrom+0x68>)
			reg = nm_read_reg(BOOTROM_REG);
    2b26:	4e02      	ldr	r6, [pc, #8]	; (2b30 <wait_for_bootrom+0x64>)
    2b28:	e7e8      	b.n	2afc <wait_for_bootrom+0x30>
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    2b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b2c:	00001014 	.word	0x00001014
    2b30:	00002c29 	.word	0x00002c29
    2b34:	00001a31 	.word	0x00001a31
    2b38:	000207bc 	.word	0x000207bc
    2b3c:	000c000c 	.word	0x000c000c
    2b40:	ef522f61 	.word	0xef522f61
    2b44:	00002c41 	.word	0x00002c41
    2b48:	10add09e 	.word	0x10add09e

00002b4c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(void)
{
    2b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;;
	
	while (reg != M2M_FINISH_INIT_STATE)
	{
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2b4e:	2001      	movs	r0, #1
    2b50:	4b0e      	ldr	r3, [pc, #56]	; (2b8c <wait_for_firmware_start+0x40>)
    2b52:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(NMI_STATE_REG);
    2b54:	480e      	ldr	r0, [pc, #56]	; (2b90 <wait_for_firmware_start+0x44>)
    2b56:	4b0f      	ldr	r3, [pc, #60]	; (2b94 <wait_for_firmware_start+0x48>)
    2b58:	4798      	blx	r3
    2b5a:	24fa      	movs	r4, #250	; 0xfa
    2b5c:	00e4      	lsls	r4, r4, #3
sint8 wait_for_firmware_start(void)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;;
	
	while (reg != M2M_FINISH_INIT_STATE)
    2b5e:	4d0e      	ldr	r5, [pc, #56]	; (2b98 <wait_for_firmware_start+0x4c>)
	{
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2b60:	4f0a      	ldr	r7, [pc, #40]	; (2b8c <wait_for_firmware_start+0x40>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(NMI_STATE_REG);
    2b62:	4e0c      	ldr	r6, [pc, #48]	; (2b94 <wait_for_firmware_start+0x48>)
    2b64:	e006      	b.n	2b74 <wait_for_firmware_start+0x28>
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;;
	
	while (reg != M2M_FINISH_INIT_STATE)
	{
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2b66:	2001      	movs	r0, #1
    2b68:	47b8      	blx	r7
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(NMI_STATE_REG);
    2b6a:	4809      	ldr	r0, [pc, #36]	; (2b90 <wait_for_firmware_start+0x44>)
    2b6c:	47b0      	blx	r6
    2b6e:	3c01      	subs	r4, #1
		if(++cnt > TIMEOUT)
    2b70:	2c00      	cmp	r4, #0
    2b72:	d007      	beq.n	2b84 <wait_for_firmware_start+0x38>
sint8 wait_for_firmware_start(void)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;;
	
	while (reg != M2M_FINISH_INIT_STATE)
    2b74:	42a8      	cmp	r0, r5
    2b76:	d1f6      	bne.n	2b66 <wait_for_firmware_start+0x1a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	nm_write_reg(NMI_STATE_REG,0);
    2b78:	4805      	ldr	r0, [pc, #20]	; (2b90 <wait_for_firmware_start+0x44>)
    2b7a:	2100      	movs	r1, #0
    2b7c:	4b07      	ldr	r3, [pc, #28]	; (2b9c <wait_for_firmware_start+0x50>)
    2b7e:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(void)
{
	sint8 ret = M2M_SUCCESS;
    2b80:	2000      	movs	r0, #0
    2b82:	e000      	b.n	2b86 <wait_for_firmware_start+0x3a>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(NMI_STATE_REG);
		if(++cnt > TIMEOUT)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2b84:	20fb      	movs	r0, #251	; 0xfb
			goto ERR;
		}
	}
	nm_write_reg(NMI_STATE_REG,0);
ERR:
	return ret;
    2b86:	b240      	sxtb	r0, r0
}
    2b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	00001a31 	.word	0x00001a31
    2b90:	0000108c 	.word	0x0000108c
    2b94:	00002c29 	.word	0x00002c29
    2b98:	02532636 	.word	0x02532636
    2b9c:	00002c41 	.word	0x00002c41

00002ba0 <chip_deinit>:

sint8 chip_deinit(void)
{
    2ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ba2:	b083      	sub	sp, #12
	uint32 reg = 0;
    2ba4:	2300      	movs	r3, #0
    2ba6:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2ba8:	24a0      	movs	r4, #160	; 0xa0
    2baa:	0164      	lsls	r4, r4, #5
    2bac:	1c20      	adds	r0, r4, #0
    2bae:	a901      	add	r1, sp, #4
    2bb0:	4b14      	ldr	r3, [pc, #80]	; (2c04 <chip_deinit+0x64>)
    2bb2:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
    2bb4:	4914      	ldr	r1, [pc, #80]	; (2c08 <chip_deinit+0x68>)
    2bb6:	9a01      	ldr	r2, [sp, #4]
    2bb8:	4011      	ands	r1, r2
    2bba:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2bbc:	1c20      	adds	r0, r4, #0
    2bbe:	4b13      	ldr	r3, [pc, #76]	; (2c0c <chip_deinit+0x6c>)
    2bc0:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
		M2M_ERR("Error while writing reg\n");
		return ret;
    2bc2:	1e03      	subs	r3, r0, #0
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);

	if (ret != M2M_SUCCESS) {
    2bc4:	d11b      	bne.n	2bfe <chip_deinit+0x5e>
    2bc6:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bc8:	25a0      	movs	r5, #160	; 0xa0
    2bca:	016d      	lsls	r5, r5, #5
    2bcc:	4e0d      	ldr	r6, [pc, #52]	; (2c04 <chip_deinit+0x64>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2bce:	4f0f      	ldr	r7, [pc, #60]	; (2c0c <chip_deinit+0x6c>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bd0:	1c28      	adds	r0, r5, #0
    2bd2:	a901      	add	r1, sp, #4
    2bd4:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
    2bd6:	2800      	cmp	r0, #0
    2bd8:	d10c      	bne.n	2bf4 <chip_deinit+0x54>
			M2M_ERR("Error while reading reg\n");
			return ret;
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    2bda:	9b01      	ldr	r3, [sp, #4]
    2bdc:	055a      	lsls	r2, r3, #21
    2bde:	d50b      	bpl.n	2bf8 <chip_deinit+0x58>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    2be0:	4909      	ldr	r1, [pc, #36]	; (2c08 <chip_deinit+0x68>)
    2be2:	4019      	ands	r1, r3
    2be4:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2be6:	1c28      	adds	r0, r5, #0
    2be8:	47b8      	blx	r7
    2bea:	3c01      	subs	r4, #1
    2bec:	b2e4      	uxtb	r4, r4
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    2bee:	2c00      	cmp	r4, #0
    2bf0:	d1ee      	bne.n	2bd0 <chip_deinit+0x30>
    2bf2:	e003      	b.n	2bfc <chip_deinit+0x5c>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bf4:	1c03      	adds	r3, r0, #0
    2bf6:	e002      	b.n	2bfe <chip_deinit+0x5e>
    2bf8:	2300      	movs	r3, #0
    2bfa:	e000      	b.n	2bfe <chip_deinit+0x5e>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2bfc:	1c03      	adds	r3, r0, #0
    2bfe:	b258      	sxtb	r0, r3
		}

	} while (timeout);
	
	return ret;		
}
    2c00:	b003      	add	sp, #12
    2c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c04:	00002c35 	.word	0x00002c35
    2c08:	fffffbff 	.word	0xfffffbff
    2c0c:	00002c41 	.word	0x00002c41

00002c10 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2c10:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2c12:	4b01      	ldr	r3, [pc, #4]	; (2c18 <nm_bus_iface_init+0x8>)
    2c14:	4798      	blx	r3
	
	return ret;
}
    2c16:	bd08      	pop	{r3, pc}
    2c18:	00001b3d 	.word	0x00001b3d

00002c1c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/ 
sint8 nm_bus_iface_deinit(void)
{
    2c1c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2c1e:	4b01      	ldr	r3, [pc, #4]	; (2c24 <nm_bus_iface_deinit+0x8>)
    2c20:	4798      	blx	r3

	return ret;
}
    2c22:	bd08      	pop	{r3, pc}
    2c24:	00001d25 	.word	0x00001d25

00002c28 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_read_reg(uint32 u32Addr)
{
    2c28:	b508      	push	{r3, lr}
#ifdef USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2c2a:	4b01      	ldr	r3, [pc, #4]	; (2c30 <nm_read_reg+0x8>)
    2c2c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2c2e:	bd08      	pop	{r3, pc}
    2c30:	00003201 	.word	0x00003201

00002c34 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2c34:	b508      	push	{r3, lr}
#ifdef USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2c36:	4b01      	ldr	r3, [pc, #4]	; (2c3c <nm_read_reg_with_ret+0x8>)
    2c38:	4798      	blx	r3
#elif defined (USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2c3a:	bd08      	pop	{r3, pc}
    2c3c:	00003215 	.word	0x00003215

00002c40 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2c40:	b508      	push	{r3, lr}
#ifdef USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2c42:	4b01      	ldr	r3, [pc, #4]	; (2c48 <nm_write_reg+0x8>)
    2c44:	4798      	blx	r3
#elif defined (USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2c46:	bd08      	pop	{r3, pc}
    2c48:	0000322d 	.word	0x0000322d

00002c4c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c4e:	464f      	mov	r7, r9
    2c50:	4646      	mov	r6, r8
    2c52:	b4c0      	push	{r6, r7}
    2c54:	1c07      	adds	r7, r0, #0
    2c56:	4688      	mov	r8, r1
    2c58:	1c15      	adds	r5, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2c5a:	4b15      	ldr	r3, [pc, #84]	; (2cb0 <nm_read_block+0x64>)
    2c5c:	881b      	ldrh	r3, [r3, #0]
    2c5e:	1c1c      	adds	r4, r3, #0
    2c60:	3c08      	subs	r4, #8
    2c62:	b2a4      	uxth	r4, r4
	uint16 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    2c64:	4294      	cmp	r4, r2
    2c66:	d307      	bcc.n	2c78 <nm_read_block+0x2c>
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint16 off = 0;
    2c68:	2600      	movs	r6, #0

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16Sz);	
    2c6a:	4643      	mov	r3, r8
    2c6c:	1999      	adds	r1, r3, r6
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2c6e:	1c38      	adds	r0, r7, #0
    2c70:	1c2a      	adds	r2, r5, #0
    2c72:	4b10      	ldr	r3, [pc, #64]	; (2cb4 <nm_read_block+0x68>)
    2c74:	4798      	blx	r3
	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16Sz);	
			break;
    2c76:	e015      	b.n	2ca4 <nm_read_block+0x58>
    2c78:	1ad5      	subs	r5, r2, r3
    2c7a:	3508      	adds	r5, #8
    2c7c:	b2ad      	uxth	r5, r5
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint16 off = 0;
    2c7e:	2600      	movs	r6, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2c80:	4b0c      	ldr	r3, [pc, #48]	; (2cb4 <nm_read_block+0x68>)
    2c82:	4699      	mov	r9, r3
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16Sz);	
			break;
		}
		else
		{
			s8Ret = p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2c84:	4643      	mov	r3, r8
    2c86:	1999      	adds	r1, r3, r6
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2c88:	1c38      	adds	r0, r7, #0
    2c8a:	1c22      	adds	r2, r4, #0
    2c8c:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret = p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2c8e:	2800      	cmp	r0, #0
    2c90:	d108      	bne.n	2ca4 <nm_read_block+0x58>
			u16Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    2c92:	1936      	adds	r6, r6, r4
    2c94:	b2b6      	uxth	r6, r6
			u32Addr += u16MaxTrxSz;
    2c96:	193f      	adds	r7, r7, r4
    2c98:	1b2b      	subs	r3, r5, r4
    2c9a:	b29b      	uxth	r3, r3
	uint16 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    2c9c:	42a5      	cmp	r5, r4
    2c9e:	d9e4      	bls.n	2c6a <nm_read_block+0x1e>
    2ca0:	1c1d      	adds	r5, r3, #0
    2ca2:	e7ef      	b.n	2c84 <nm_read_block+0x38>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2ca4:	b240      	sxtb	r0, r0
}
    2ca6:	bc0c      	pop	{r2, r3}
    2ca8:	4690      	mov	r8, r2
    2caa:	4699      	mov	r9, r3
    2cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	200003fc 	.word	0x200003fc
    2cb4:	000032dd 	.word	0x000032dd

00002cb8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	464f      	mov	r7, r9
    2cbc:	4646      	mov	r6, r8
    2cbe:	b4c0      	push	{r6, r7}
    2cc0:	1c07      	adds	r7, r0, #0
    2cc2:	4688      	mov	r8, r1
    2cc4:	1c15      	adds	r5, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2cc6:	4b15      	ldr	r3, [pc, #84]	; (2d1c <nm_write_block+0x64>)
    2cc8:	881b      	ldrh	r3, [r3, #0]
    2cca:	1c1c      	adds	r4, r3, #0
    2ccc:	3c08      	subs	r4, #8
    2cce:	b2a4      	uxth	r4, r4
	uint16 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    2cd0:	4294      	cmp	r4, r2
    2cd2:	d307      	bcc.n	2ce4 <nm_write_block+0x2c>
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint16 off = 0;
    2cd4:	2600      	movs	r6, #0

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16Sz);	
    2cd6:	4643      	mov	r3, r8
    2cd8:	1999      	adds	r1, r3, r6
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2cda:	1c38      	adds	r0, r7, #0
    2cdc:	1c2a      	adds	r2, r5, #0
    2cde:	4b10      	ldr	r3, [pc, #64]	; (2d20 <nm_write_block+0x68>)
    2ce0:	4798      	blx	r3
	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16Sz);	
			break;
    2ce2:	e015      	b.n	2d10 <nm_write_block+0x58>
    2ce4:	1ad5      	subs	r5, r2, r3
    2ce6:	3508      	adds	r5, #8
    2ce8:	b2ad      	uxth	r5, r5
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint16 off = 0;
    2cea:	2600      	movs	r6, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2cec:	4b0c      	ldr	r3, [pc, #48]	; (2d20 <nm_write_block+0x68>)
    2cee:	4699      	mov	r9, r3
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16Sz);	
			break;
		}
		else
		{
			s8Ret = p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2cf0:	4643      	mov	r3, r8
    2cf2:	1999      	adds	r1, r3, r6
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2cf4:	1c38      	adds	r0, r7, #0
    2cf6:	1c22      	adds	r2, r4, #0
    2cf8:	47c8      	blx	r9
			break;
		}
		else
		{
			s8Ret = p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2cfa:	2800      	cmp	r0, #0
    2cfc:	d108      	bne.n	2d10 <nm_write_block+0x58>
			u16Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    2cfe:	1936      	adds	r6, r6, r4
    2d00:	b2b6      	uxth	r6, r6
			u32Addr += u16MaxTrxSz;
    2d02:	193f      	adds	r7, r7, r4
    2d04:	1b2b      	subs	r3, r5, r4
    2d06:	b29b      	uxth	r3, r3
	uint16 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u16Sz <= u16MaxTrxSz)
    2d08:	42a5      	cmp	r5, r4
    2d0a:	d9e4      	bls.n	2cd6 <nm_write_block+0x1e>
    2d0c:	1c1d      	adds	r5, r3, #0
    2d0e:	e7ef      	b.n	2cf0 <nm_write_block+0x38>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2d10:	b240      	sxtb	r0, r0
}
    2d12:	bc0c      	pop	{r2, r3}
    2d14:	4690      	mov	r8, r2
    2d16:	4699      	mov	r9, r3
    2d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	200003fc 	.word	0x200003fc
    2d20:	00003349 	.word	0x00003349

00002d24 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	b082      	sub	sp, #8
	uint32 chipid =0;
    2d28:	2300      	movs	r3, #0
    2d2a:	9301      	str	r3, [sp, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	
	ret = nm_bus_iface_init(NULL);
    2d2c:	2000      	movs	r0, #0
    2d2e:	4b2a      	ldr	r3, [pc, #168]	; (2dd8 <nm_drv_init+0xb4>)
    2d30:	4798      	blx	r3
    2d32:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d34:	d14c      	bne.n	2dd0 <nm_drv_init+0xac>
	return;
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());

	if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2d36:	2080      	movs	r0, #128	; 0x80
    2d38:	0140      	lsls	r0, r0, #5
    2d3a:	a901      	add	r1, sp, #4
    2d3c:	4b27      	ldr	r3, [pc, #156]	; (2ddc <nm_drv_init+0xb8>)
    2d3e:	4798      	blx	r3
    2d40:	1e04      	subs	r4, r0, #0
    2d42:	d144      	bne.n	2dce <nm_drv_init+0xaa>
		chipid = 0;
		return 0;
	}
	
	ret = chip_wake();
    2d44:	4b26      	ldr	r3, [pc, #152]	; (2de0 <nm_drv_init+0xbc>)
    2d46:	4798      	blx	r3
    2d48:	1c05      	adds	r5, r0, #0
	nm_bsp_sleep(10);
    2d4a:	200a      	movs	r0, #10
    2d4c:	4b25      	ldr	r3, [pc, #148]	; (2de4 <nm_drv_init+0xc0>)
    2d4e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2d50:	2d00      	cmp	r5, #0
    2d52:	d138      	bne.n	2dc6 <nm_drv_init+0xa2>
		goto ERR2;
	}
	/**
	Go...
	**/
	ret = chip_reset();
    2d54:	4b24      	ldr	r3, [pc, #144]	; (2de8 <nm_drv_init+0xc4>)
    2d56:	4798      	blx	r3
    2d58:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    2d5a:	d134      	bne.n	2dc6 <nm_drv_init+0xa2>
		goto ERR2;
	}

#ifdef USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2d5c:	4b23      	ldr	r3, [pc, #140]	; (2dec <nm_drv_init+0xc8>)
    2d5e:	4798      	blx	r3
#endif
	/*return power save to default value*/
	chip_idle();
    2d60:	4b23      	ldr	r3, [pc, #140]	; (2df0 <nm_drv_init+0xcc>)
    2d62:	4798      	blx	r3
	M2M_INFO("Chip ID %x\n", (unsigned int)nmi_get_chipid());

	ret = cpu_start();
    2d64:	4b23      	ldr	r3, [pc, #140]	; (2df4 <nm_drv_init+0xd0>)
    2d66:	4798      	blx	r3
    2d68:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    2d6a:	d12c      	bne.n	2dc6 <nm_drv_init+0xa2>
		goto ERR2;
	}
	ret = wait_for_bootrom();
    2d6c:	4b22      	ldr	r3, [pc, #136]	; (2df8 <nm_drv_init+0xd4>)
    2d6e:	4798      	blx	r3
    2d70:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    2d72:	d128      	bne.n	2dc6 <nm_drv_init+0xa2>
		goto ERR2;
	}
	ret = wait_for_firmware_start();
    2d74:	4b21      	ldr	r3, [pc, #132]	; (2dfc <nm_drv_init+0xd8>)
    2d76:	4798      	blx	r3
    2d78:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    2d7a:	d124      	bne.n	2dc6 <nm_drv_init+0xa2>
		goto ERR2;
	}
	ret = enable_interrupts();
    2d7c:	4b20      	ldr	r3, [pc, #128]	; (2e00 <nm_drv_init+0xdc>)
    2d7e:	4798      	blx	r3
    2d80:	1e05      	subs	r5, r0, #0
	if (M2M_SUCCESS != ret) {
    2d82:	d120      	bne.n	2dc6 <nm_drv_init+0xa2>
#endif
#ifdef __ENABLE_LEGACY_RF_SETTINGS__
	val32 |= rHAVE_LEGACY_RF_SETTINGS;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2d84:	20a5      	movs	r0, #165	; 0xa5
    2d86:	0140      	lsls	r0, r0, #5
    2d88:	2100      	movs	r1, #0
    2d8a:	4b1e      	ldr	r3, [pc, #120]	; (2e04 <nm_drv_init+0xe0>)
    2d8c:	4798      	blx	r3
*	@version	1.0
*/
static sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
	uint16  curr_drv_ver, min_req_drv_ver;
	uint32	reg = 0;
    2d8e:	2300      	movs	r3, #0
    2d90:	9300      	str	r3, [sp, #0]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    2d92:	481d      	ldr	r0, [pc, #116]	; (2e08 <nm_drv_init+0xe4>)
    2d94:	4669      	mov	r1, sp
    2d96:	4b11      	ldr	r3, [pc, #68]	; (2ddc <nm_drv_init+0xb8>)
    2d98:	4798      	blx	r3
    2d9a:	1c06      	adds	r6, r0, #0

	M2mRev->u8DriverMajor	= (uint8)(reg >> 24)&0xff;
    2d9c:	9d00      	ldr	r5, [sp, #0]
	M2mRev->u8DriverMinor   = (uint8)(reg >> 20)&0x0f;
	M2mRev->u8DriverPatch	= (uint8)(reg >> 16)&0x0f;
	M2mRev->u8FirmwareMajor	= (uint8)(reg >> 8)&0xff;
	M2mRev->u8FirmwareMinor = (uint8)(reg >> 4)&0x0f;	
	M2mRev->u8FirmwarePatch = (uint8)(reg)&0x0f;	
	M2mRev->u32Chipid	= nmi_get_chipid();
    2d9e:	4b1b      	ldr	r3, [pc, #108]	; (2e0c <nm_drv_init+0xe8>)
    2da0:	4798      	blx	r3
    2da2:	0e29      	lsrs	r1, r5, #24
	
	curr_drv_ver    = MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_FIRMWARE_VERSION_MINOR_NO, M2M_FIRMWARE_VERSION_PATCH_NO);
	min_req_drv_ver = MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    2da4:	0209      	lsls	r1, r1, #8

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);

	M2mRev->u8DriverMajor	= (uint8)(reg >> 24)&0xff;
	M2mRev->u8DriverMinor   = (uint8)(reg >> 20)&0x0f;
	M2mRev->u8DriverPatch	= (uint8)(reg >> 16)&0x0f;
    2da6:	0c2a      	lsrs	r2, r5, #16
    2da8:	230f      	movs	r3, #15
	M2mRev->u8FirmwareMinor = (uint8)(reg >> 4)&0x0f;	
	M2mRev->u8FirmwarePatch = (uint8)(reg)&0x0f;	
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_drv_ver    = MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_FIRMWARE_VERSION_MINOR_NO, M2M_FIRMWARE_VERSION_PATCH_NO);
	min_req_drv_ver = MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    2daa:	401a      	ands	r2, r3
    2dac:	430a      	orrs	r2, r1
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);

	M2mRev->u8DriverMajor	= (uint8)(reg >> 24)&0xff;
	M2mRev->u8DriverMinor   = (uint8)(reg >> 20)&0x0f;
    2dae:	0d2d      	lsrs	r5, r5, #20
	M2mRev->u8FirmwareMinor = (uint8)(reg >> 4)&0x0f;	
	M2mRev->u8FirmwarePatch = (uint8)(reg)&0x0f;	
	M2mRev->u32Chipid	= nmi_get_chipid();
	
	curr_drv_ver    = MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_FIRMWARE_VERSION_MINOR_NO, M2M_FIRMWARE_VERSION_PATCH_NO);
	min_req_drv_ver = MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    2db0:	402b      	ands	r3, r5
    2db2:	011b      	lsls	r3, r3, #4
	if(curr_drv_ver <  min_req_drv_ver) {
    2db4:	431a      	orrs	r2, r3
    2db6:	2390      	movs	r3, #144	; 0x90
    2db8:	015b      	lsls	r3, r3, #5
    2dba:	429a      	cmp	r2, r3
    2dbc:	d801      	bhi.n	2dc2 <nm_drv_init+0x9e>
		goto ERR2;
	}
	
	chip_apply_conf();
	
	if(M2M_ERR_FW_VER_MISMATCH == nm_get_firmware_info(&strtmp))
    2dbe:	360d      	adds	r6, #13
    2dc0:	d106      	bne.n	2dd0 <nm_drv_init+0xac>
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    2dc2:	24f3      	movs	r4, #243	; 0xf3
    2dc4:	e004      	b.n	2dd0 <nm_drv_init+0xac>
		M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
		M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2dc6:	4b12      	ldr	r3, [pc, #72]	; (2e10 <nm_drv_init+0xec>)
    2dc8:	4798      	blx	r3
    2dca:	1c2c      	adds	r4, r5, #0
    2dcc:	e000      	b.n	2dd0 <nm_drv_init+0xac>

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());

	if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
		chipid = 0;
		return 0;
    2dce:	2400      	movs	r4, #0
    2dd0:	b260      	sxtb	r0, r4
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:	
	return ret;
}
    2dd2:	b002      	add	sp, #8
    2dd4:	bd70      	pop	{r4, r5, r6, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	00002c11 	.word	0x00002c11
    2ddc:	00002c35 	.word	0x00002c35
    2de0:	00002a81 	.word	0x00002a81
    2de4:	00001a31 	.word	0x00001a31
    2de8:	00002a9d 	.word	0x00002a9d
    2dec:	00003245 	.word	0x00003245
    2df0:	000027c1 	.word	0x000027c1
    2df4:	000028a1 	.word	0x000028a1
    2df8:	00002acd 	.word	0x00002acd
    2dfc:	00002b4d 	.word	0x00002b4d
    2e00:	00002835 	.word	0x00002835
    2e04:	00002c41 	.word	0x00002c41
    2e08:	000207ac 	.word	0x000207ac
    2e0c:	00002945 	.word	0x00002945
    2e10:	00002c1d 	.word	0x00002c1d

00002e14 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg) 
{
    2e14:	b508      	push	{r3, lr}
	sint8 ret;
	
	ret = chip_deinit();
    2e16:	4b04      	ldr	r3, [pc, #16]	; (2e28 <nm_drv_deinit+0x14>)
    2e18:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    2e1a:	2800      	cmp	r0, #0
    2e1c:	d101      	bne.n	2e22 <nm_drv_deinit+0xe>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2e1e:	4b03      	ldr	r3, [pc, #12]	; (2e2c <nm_drv_deinit+0x18>)
    2e20:	4798      	blx	r3
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}

ERR1:
	return ret;
    2e22:	b240      	sxtb	r0, r0
}
    2e24:	bd08      	pop	{r3, pc}
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	00002ba1 	.word	0x00002ba1
    2e2c:	00002c1d 	.word	0x00002c1d

00002e30 <nmi_spi_read>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 nmi_spi_read(uint8* b, uint16 sz)                                 
{
    2e30:	b500      	push	{lr}
    2e32:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    2e34:	ab01      	add	r3, sp, #4
    2e36:	2200      	movs	r2, #0
    2e38:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2e3a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2e3c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2e3e:	2003      	movs	r0, #3
    2e40:	1c19      	adds	r1, r3, #0
    2e42:	4b02      	ldr	r3, [pc, #8]	; (2e4c <nmi_spi_read+0x1c>)
    2e44:	4798      	blx	r3
}
    2e46:	b005      	add	sp, #20
    2e48:	bd00      	pop	{pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	00001c19 	.word	0x00001c19

00002e50 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e52:	b083      	sub	sp, #12
    2e54:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2e56:	2ecf      	cmp	r6, #207	; 0xcf
    2e58:	d004      	beq.n	2e64 <spi_cmd_rsp+0x14>
    2e5a:	1c03      	adds	r3, r0, #0
    2e5c:	333b      	adds	r3, #59	; 0x3b
    2e5e:	b2db      	uxtb	r3, r3
    2e60:	2b01      	cmp	r3, #1
    2e62:	d807      	bhi.n	2e74 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2e64:	4668      	mov	r0, sp
    2e66:	3007      	adds	r0, #7
    2e68:	2101      	movs	r1, #1
    2e6a:	4b19      	ldr	r3, [pc, #100]	; (2ed0 <spi_cmd_rsp+0x80>)
    2e6c:	4798      	blx	r3
			result = N_FAIL;
    2e6e:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2e70:	2800      	cmp	r0, #0
    2e72:	d129      	bne.n	2ec8 <spi_cmd_rsp+0x78>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2e74:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2e76:	466d      	mov	r5, sp
    2e78:	3507      	adds	r5, #7
    2e7a:	4f15      	ldr	r7, [pc, #84]	; (2ed0 <spi_cmd_rsp+0x80>)
    2e7c:	1c28      	adds	r0, r5, #0
    2e7e:	2101      	movs	r1, #1
    2e80:	47b8      	blx	r7
    2e82:	2800      	cmp	r0, #0
    2e84:	d119      	bne.n	2eba <spi_cmd_rsp+0x6a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2e86:	782b      	ldrb	r3, [r5, #0]
    2e88:	42b3      	cmp	r3, r6
    2e8a:	d104      	bne.n	2e96 <spi_cmd_rsp+0x46>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2e8c:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2e8e:	466d      	mov	r5, sp
    2e90:	3507      	adds	r5, #7
    2e92:	4e0f      	ldr	r6, [pc, #60]	; (2ed0 <spi_cmd_rsp+0x80>)
    2e94:	e004      	b.n	2ea0 <spi_cmd_rsp+0x50>
    2e96:	3c01      	subs	r4, #1
    2e98:	b2e4      	uxtb	r4, r4
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2e9a:	2c00      	cmp	r4, #0
    2e9c:	d1ee      	bne.n	2e7c <spi_cmd_rsp+0x2c>
    2e9e:	e7f5      	b.n	2e8c <spi_cmd_rsp+0x3c>
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ea0:	1c28      	adds	r0, r5, #0
    2ea2:	2101      	movs	r1, #1
    2ea4:	47b0      	blx	r6
    2ea6:	2800      	cmp	r0, #0
    2ea8:	d109      	bne.n	2ebe <spi_cmd_rsp+0x6e>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2eaa:	782b      	ldrb	r3, [r5, #0]
    2eac:	2b00      	cmp	r3, #0
    2eae:	d008      	beq.n	2ec2 <spi_cmd_rsp+0x72>
    2eb0:	3c01      	subs	r4, #1
    2eb2:	b2e4      	uxtb	r4, r4
    2eb4:	2c00      	cmp	r4, #0
    2eb6:	d1f3      	bne.n	2ea0 <spi_cmd_rsp+0x50>
    2eb8:	e005      	b.n	2ec6 <spi_cmd_rsp+0x76>
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    2eba:	2300      	movs	r3, #0
    2ebc:	e004      	b.n	2ec8 <spi_cmd_rsp+0x78>
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
    2ebe:	2300      	movs	r3, #0
    2ec0:	e002      	b.n	2ec8 <spi_cmd_rsp+0x78>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    2ec2:	2301      	movs	r3, #1
    2ec4:	e000      	b.n	2ec8 <spi_cmd_rsp+0x78>
    2ec6:	2301      	movs	r3, #1
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
    2ec8:	b258      	sxtb	r0, r3
}
    2eca:	b003      	add	sp, #12
    2ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	00002e31 	.word	0x00002e31

00002ed4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ed6:	465f      	mov	r7, fp
    2ed8:	4656      	mov	r6, sl
    2eda:	464d      	mov	r5, r9
    2edc:	4644      	mov	r4, r8
    2ede:	b4f0      	push	{r4, r5, r6, r7}
    2ee0:	b083      	sub	sp, #12
    2ee2:	4682      	mov	sl, r0
    2ee4:	1c0f      	adds	r7, r1, #0
    2ee6:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2ee8:	2200      	movs	r2, #0
    2eea:	4690      	mov	r8, r2
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2eec:	4e29      	ldr	r6, [pc, #164]	; (2f94 <spi_data_read+0xc0>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    2eee:	2380      	movs	r3, #128	; 0x80
    2ef0:	019b      	lsls	r3, r3, #6
    2ef2:	429f      	cmp	r7, r3
    2ef4:	d802      	bhi.n	2efc <spi_data_read+0x28>
			nbytes = sz;
    2ef6:	b2bb      	uxth	r3, r7
    2ef8:	4699      	mov	r9, r3
    2efa:	e002      	b.n	2f02 <spi_data_read+0x2e>
		else
			nbytes = DATA_PKT_SZ;
    2efc:	2380      	movs	r3, #128	; 0x80
    2efe:	019b      	lsls	r3, r3, #6
    2f00:	4699      	mov	r9, r3

		/**
			Data Respnose header
		**/
		retry = 10;
    2f02:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2f04:	466d      	mov	r5, sp
    2f06:	3503      	adds	r5, #3
    2f08:	1c28      	adds	r0, r5, #0
    2f0a:	2101      	movs	r1, #1
    2f0c:	47b0      	blx	r6
    2f0e:	2800      	cmp	r0, #0
    2f10:	d12c      	bne.n	2f6c <spi_data_read+0x98>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    2f12:	782b      	ldrb	r3, [r5, #0]
    2f14:	091b      	lsrs	r3, r3, #4
    2f16:	2b0f      	cmp	r3, #15
    2f18:	d005      	beq.n	2f26 <spi_data_read+0x52>
				break;
		} while (retry--);
    2f1a:	3c01      	subs	r4, #1
    2f1c:	b2a4      	uxth	r4, r4
    2f1e:	b223      	sxth	r3, r4
    2f20:	3301      	adds	r3, #1
    2f22:	d1f1      	bne.n	2f08 <spi_data_read+0x34>
    2f24:	e024      	b.n	2f70 <spi_data_read+0x9c>
		
		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    2f26:	b224      	sxth	r4, r4
    2f28:	2c00      	cmp	r4, #0
    2f2a:	dd23      	ble.n	2f74 <spi_data_read+0xa0>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2f2c:	464a      	mov	r2, r9
    2f2e:	b294      	uxth	r4, r2
    2f30:	4643      	mov	r3, r8
    2f32:	b218      	sxth	r0, r3
    2f34:	4450      	add	r0, sl
    2f36:	1c21      	adds	r1, r4, #0
    2f38:	4a16      	ldr	r2, [pc, #88]	; (2f94 <spi_data_read+0xc0>)
    2f3a:	4790      	blx	r2
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d11b      	bne.n	2f78 <spi_data_read+0xa4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
			break;
		}
		if(!clockless)
    2f40:	465b      	mov	r3, fp
    2f42:	2b00      	cmp	r3, #0
    2f44:	d109      	bne.n	2f5a <spi_data_read+0x86>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2f46:	4a14      	ldr	r2, [pc, #80]	; (2f98 <spi_data_read+0xc4>)
    2f48:	7813      	ldrb	r3, [r2, #0]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d105      	bne.n	2f5a <spi_data_read+0x86>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2f4e:	a801      	add	r0, sp, #4
    2f50:	2102      	movs	r1, #2
    2f52:	4b10      	ldr	r3, [pc, #64]	; (2f94 <spi_data_read+0xc0>)
    2f54:	4798      	blx	r3
    2f56:	2800      	cmp	r0, #0
    2f58:	d110      	bne.n	2f7c <spi_data_read+0xa8>
					result = N_FAIL;
					break;
				}
			}
		}
		ix += nbytes;
    2f5a:	4642      	mov	r2, r8
    2f5c:	18a3      	adds	r3, r4, r2
    2f5e:	b29b      	uxth	r3, r3
    2f60:	4698      	mov	r8, r3
		sz -= nbytes;
    2f62:	1b3f      	subs	r7, r7, r4
    2f64:	b2bf      	uxth	r7, r7

	} while (sz);
    2f66:	2f00      	cmp	r7, #0
    2f68:	d1c1      	bne.n	2eee <spi_data_read+0x1a>
    2f6a:	e009      	b.n	2f80 <spi_data_read+0xac>
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
    2f6c:	2000      	movs	r0, #0
    2f6e:	e008      	b.n	2f82 <spi_data_read+0xae>
		if (result == N_FAIL)
			break;

		if (retry <= 0) {
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
			result = N_FAIL;
    2f70:	2000      	movs	r0, #0
    2f72:	e006      	b.n	2f82 <spi_data_read+0xae>
    2f74:	2000      	movs	r0, #0
    2f76:	e004      	b.n	2f82 <spi_data_read+0xae>
		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
			result = N_FAIL;
    2f78:	2000      	movs	r0, #0
    2f7a:	e002      	b.n	2f82 <spi_data_read+0xae>
			Read Crc
			**/
			if (!gu8Crc_off) {
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
					result = N_FAIL;
    2f7c:	2000      	movs	r0, #0
    2f7e:	e000      	b.n	2f82 <spi_data_read+0xae>
    2f80:	2001      	movs	r0, #1
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    2f82:	b240      	sxtb	r0, r0
}
    2f84:	b003      	add	sp, #12
    2f86:	bc3c      	pop	{r2, r3, r4, r5}
    2f88:	4690      	mov	r8, r2
    2f8a:	4699      	mov	r9, r3
    2f8c:	46a2      	mov	sl, r4
    2f8e:	46ab      	mov	fp, r5
    2f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	00002e31 	.word	0x00002e31
    2f98:	20000bac 	.word	0x20000bac

00002f9c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2f9c:	b500      	push	{lr}
    2f9e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2fa0:	ab01      	add	r3, sp, #4
    2fa2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2fa4:	2200      	movs	r2, #0
    2fa6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2fa8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2faa:	2003      	movs	r0, #3
    2fac:	1c19      	adds	r1, r3, #0
    2fae:	4b02      	ldr	r3, [pc, #8]	; (2fb8 <nmi_spi_write+0x1c>)
    2fb0:	4798      	blx	r3
}
    2fb2:	b005      	add	sp, #20
    2fb4:	bd00      	pop	{pc}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00001c19 	.word	0x00001c19

00002fbc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2fbc:	b570      	push	{r4, r5, r6, lr}
    2fbe:	b084      	sub	sp, #16
    2fc0:	ac08      	add	r4, sp, #32
    2fc2:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2fc4:	ac01      	add	r4, sp, #4
    2fc6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2fc8:	303f      	adds	r0, #63	; 0x3f
    2fca:	b2c4      	uxtb	r4, r0
    2fcc:	2c0e      	cmp	r4, #14
    2fce:	d900      	bls.n	2fd2 <spi_cmd+0x16>
    2fd0:	e08f      	b.n	30f2 <spi_cmd+0x136>
    2fd2:	00a0      	lsls	r0, r4, #2
    2fd4:	4c4c      	ldr	r4, [pc, #304]	; (3108 <spi_cmd+0x14c>)
    2fd6:	5820      	ldr	r0, [r4, r0]
    2fd8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2fda:	ab01      	add	r3, sp, #4
    2fdc:	0c0a      	lsrs	r2, r1, #16
    2fde:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2fe0:	0a0a      	lsrs	r2, r1, #8
    2fe2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2fe4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2fe6:	2105      	movs	r1, #5
		break; 
    2fe8:	e086      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		bc[1] = (uint8)(adr >> 8);
    2fea:	0a0b      	lsrs	r3, r1, #8
    2fec:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2fee:	2d00      	cmp	r5, #0
    2ff0:	d102      	bne.n	2ff8 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break; 
	case CMD_INTERNAL_READ:			/* internal register read */ 
		bc[1] = (uint8)(adr >> 8);
    2ff2:	aa01      	add	r2, sp, #4
    2ff4:	7053      	strb	r3, [r2, #1]
    2ff6:	e004      	b.n	3002 <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    2ff8:	2280      	movs	r2, #128	; 0x80
    2ffa:	4252      	negs	r2, r2
    2ffc:	4313      	orrs	r3, r2
    2ffe:	aa01      	add	r2, sp, #4
    3000:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    3002:	ab01      	add	r3, sp, #4
    3004:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    3006:	2200      	movs	r2, #0
    3008:	70da      	strb	r2, [r3, #3]
		len = 5;
    300a:	2105      	movs	r1, #5
		break;
    300c:	e074      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    300e:	ab01      	add	r3, sp, #4
    3010:	2200      	movs	r2, #0
    3012:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3014:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3016:	70da      	strb	r2, [r3, #3]
		len = 5;
    3018:	2105      	movs	r1, #5
		break;
    301a:	e06d      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    301c:	ab01      	add	r3, sp, #4
    301e:	2200      	movs	r2, #0
    3020:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3022:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3024:	70da      	strb	r2, [r3, #3]
		len = 5;
    3026:	2105      	movs	r1, #5
		break;
    3028:	e066      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    302a:	ab01      	add	r3, sp, #4
    302c:	22ff      	movs	r2, #255	; 0xff
    302e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    3030:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3032:	70da      	strb	r2, [r3, #3]
		len = 5;
    3034:	2105      	movs	r1, #5
		break;
    3036:	e05f      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3038:	aa01      	add	r2, sp, #4
    303a:	0c08      	lsrs	r0, r1, #16
    303c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    303e:	0a08      	lsrs	r0, r1, #8
    3040:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    3042:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    3044:	0a19      	lsrs	r1, r3, #8
    3046:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    3048:	7153      	strb	r3, [r2, #5]
		len = 7;
    304a:	2107      	movs	r1, #7
		break;
    304c:	e054      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    304e:	aa01      	add	r2, sp, #4
    3050:	0c08      	lsrs	r0, r1, #16
    3052:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    3054:	0a08      	lsrs	r0, r1, #8
    3056:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    3058:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    305a:	0c19      	lsrs	r1, r3, #16
    305c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    305e:	0a19      	lsrs	r1, r3, #8
    3060:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    3062:	7193      	strb	r3, [r2, #6]
		len = 8;
    3064:	2108      	movs	r1, #8
		break;
    3066:	e047      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3068:	0a0b      	lsrs	r3, r1, #8
    306a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    306c:	2d00      	cmp	r5, #0
    306e:	d102      	bne.n	3076 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3070:	a801      	add	r0, sp, #4
    3072:	7043      	strb	r3, [r0, #1]
    3074:	e004      	b.n	3080 <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    3076:	2080      	movs	r0, #128	; 0x80
    3078:	4240      	negs	r0, r0
    307a:	4303      	orrs	r3, r0
    307c:	a801      	add	r0, sp, #4
    307e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    3080:	ab01      	add	r3, sp, #4
    3082:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3084:	0e11      	lsrs	r1, r2, #24
    3086:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3088:	0c11      	lsrs	r1, r2, #16
    308a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    308c:	0a11      	lsrs	r1, r2, #8
    308e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    3090:	719a      	strb	r2, [r3, #6]
		len = 8;
    3092:	2108      	movs	r1, #8
		break;
    3094:	e030      	b.n	30f8 <spi_cmd+0x13c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3096:	ab01      	add	r3, sp, #4
    3098:	0c08      	lsrs	r0, r1, #16
    309a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    309c:	0a08      	lsrs	r0, r1, #8
    309e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    30a0:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    30a2:	0e11      	lsrs	r1, r2, #24
    30a4:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    30a6:	0c11      	lsrs	r1, r2, #16
    30a8:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    30aa:	0a11      	lsrs	r1, r2, #8
    30ac:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    30ae:	71da      	strb	r2, [r3, #7]
		len = 9;
    30b0:	2109      	movs	r1, #9
		break;
    30b2:	e021      	b.n	30f8 <spi_cmd+0x13c>
		break;
	}
	
	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    30b4:	1e4e      	subs	r6, r1, #1
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    30b6:	2e00      	cmp	r6, #0
    30b8:	d00d      	beq.n	30d6 <spi_cmd+0x11a>
    30ba:	ab01      	add	r3, sp, #4
    30bc:	2203      	movs	r2, #3
    30be:	446a      	add	r2, sp
    30c0:	1855      	adds	r5, r2, r1
    30c2:	227f      	movs	r2, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    30c4:	4c11      	ldr	r4, [pc, #68]	; (310c <spi_cmd+0x150>)
    30c6:	7818      	ldrb	r0, [r3, #0]
    30c8:	0052      	lsls	r2, r2, #1
    30ca:	4042      	eors	r2, r0
    30cc:	5ca2      	ldrb	r2, [r4, r2]
    30ce:	3301      	adds	r3, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    30d0:	42ab      	cmp	r3, r5
    30d2:	d1f8      	bne.n	30c6 <spi_cmd+0x10a>
    30d4:	e000      	b.n	30d8 <spi_cmd+0x11c>
    30d6:	227f      	movs	r2, #127	; 0x7f
		break;
	}
	
	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    30d8:	0052      	lsls	r2, r2, #1
    30da:	ab01      	add	r3, sp, #4
    30dc:	559a      	strb	r2, [r3, r6]
    30de:	e001      	b.n	30e4 <spi_cmd+0x128>
		else
			len-=1;
    30e0:	3901      	subs	r1, #1
    30e2:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    30e4:	a801      	add	r0, sp, #4
    30e6:	4b0a      	ldr	r3, [pc, #40]	; (3110 <spi_cmd+0x154>)
    30e8:	4798      	blx	r3
    30ea:	4243      	negs	r3, r0
    30ec:	4158      	adcs	r0, r3
		bc[6] = (uint8)(u32data >> 8);
		bc[7] = (uint8)(u32data);
		len = 9;
		break;
	default:
		result = N_FAIL;
    30ee:	b2c0      	uxtb	r0, r0
    30f0:	e000      	b.n	30f4 <spi_cmd+0x138>
    30f2:	2000      	movs	r0, #0
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    30f4:	b240      	sxtb	r0, r0
    30f6:	e004      	b.n	3102 <spi_cmd+0x146>
		result = N_FAIL;
		break;
	}
	
	if (result) {
		if (!gu8Crc_off)
    30f8:	4b06      	ldr	r3, [pc, #24]	; (3114 <spi_cmd+0x158>)
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d0d9      	beq.n	30b4 <spi_cmd+0xf8>
    3100:	e7ee      	b.n	30e0 <spi_cmd+0x124>
			result = N_FAIL;
		}
	}

	return result;
}
    3102:	b004      	add	sp, #16
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	00008cf0 	.word	0x00008cf0
    310c:	00008d2c 	.word	0x00008d2c
    3110:	00002f9d 	.word	0x00002f9d
    3114:	20000bac 	.word	0x20000bac

00003118 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3118:	b530      	push	{r4, r5, lr}
    311a:	b083      	sub	sp, #12
    311c:	1c03      	adds	r3, r0, #0
    311e:	1c0a      	adds	r2, r1, #0
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30) 
    3120:	2830      	cmp	r0, #48	; 0x30
    3122:	d802      	bhi.n	312a <spi_write_reg+0x12>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    3124:	2101      	movs	r1, #1
	if (addr <= 0x30) 
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3126:	24c3      	movs	r4, #195	; 0xc3
    3128:	e001      	b.n	312e <spi_write_reg+0x16>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    312a:	2100      	movs	r1, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    312c:	24c9      	movs	r4, #201	; 0xc9
		clockless = 0;
	}
	
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    312e:	9100      	str	r1, [sp, #0]
    3130:	1c20      	adds	r0, r4, #0
    3132:	1c19      	adds	r1, r3, #0
    3134:	2304      	movs	r3, #4
    3136:	4d0b      	ldr	r5, [pc, #44]	; (3164 <spi_write_reg+0x4c>)
    3138:	47a8      	blx	r5
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);		
		return N_FAIL;
    313a:	2300      	movs	r3, #0
		clockless = 0;
	}
	
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
	if (result != N_OK) {
    313c:	2801      	cmp	r0, #1
    313e:	d10d      	bne.n	315c <spi_write_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);		
		return N_FAIL;
	}
	 
	result = spi_cmd_rsp(cmd);
    3140:	1c20      	adds	r0, r4, #0
    3142:	4b09      	ldr	r3, [pc, #36]	; (3168 <spi_write_reg+0x50>)
    3144:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);		
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    3146:	2301      	movs	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);		
		return N_FAIL;
	}
	 
	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    3148:	2801      	cmp	r0, #1
    314a:	d007      	beq.n	315c <spi_write_reg+0x44>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);		
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    314c:	2300      	movs	r3, #0
    314e:	9300      	str	r3, [sp, #0]
    3150:	20cf      	movs	r0, #207	; 0xcf
    3152:	2100      	movs	r1, #0
    3154:	2200      	movs	r2, #0
    3156:	4c03      	ldr	r4, [pc, #12]	; (3164 <spi_write_reg+0x4c>)
    3158:	47a0      	blx	r4
		return N_FAIL;
    315a:	2300      	movs	r3, #0
    315c:	b258      	sxtb	r0, r3
	}

	return result;
	
#endif
}
    315e:	b003      	add	sp, #12
    3160:	bd30      	pop	{r4, r5, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	00002fbd 	.word	0x00002fbd
    3168:	00002e51 	.word	0x00002e51

0000316c <spi_read_reg>:
		
	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    316c:	b5f0      	push	{r4, r5, r6, r7, lr}
    316e:	b085      	sub	sp, #20
    3170:	1c03      	adds	r3, r0, #0
    3172:	1c0f      	adds	r7, r1, #0
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff) 
    3174:	28ff      	cmp	r0, #255	; 0xff
    3176:	d802      	bhi.n	317e <spi_read_reg+0x12>
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    3178:	2501      	movs	r5, #1
	if (addr <= 0xff) 
	{	
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    317a:	24c4      	movs	r4, #196	; 0xc4
    317c:	e001      	b.n	3182 <spi_read_reg+0x16>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    317e:	2500      	movs	r5, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    3180:	24ca      	movs	r4, #202	; 0xca
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3182:	9500      	str	r5, [sp, #0]
    3184:	1c20      	adds	r0, r4, #0
    3186:	1c19      	adds	r1, r3, #0
    3188:	2200      	movs	r2, #0
    318a:	2304      	movs	r3, #4
    318c:	4e19      	ldr	r6, [pc, #100]	; (31f4 <spi_read_reg+0x88>)
    318e:	47b0      	blx	r6
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
    3190:	2300      	movs	r3, #0
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
	if (result != N_OK) {
    3192:	2801      	cmp	r0, #1
    3194:	d12b      	bne.n	31ee <spi_read_reg+0x82>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	} 
	
	result = spi_cmd_rsp(cmd);
    3196:	1c20      	adds	r0, r4, #0
    3198:	4b17      	ldr	r3, [pc, #92]	; (31f8 <spi_read_reg+0x8c>)
    319a:	4798      	blx	r3
	if (result != N_OK) {
    319c:	2801      	cmp	r0, #1
    319e:	d008      	beq.n	31b2 <spi_read_reg+0x46>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31a0:	2300      	movs	r3, #0
    31a2:	9300      	str	r3, [sp, #0]
    31a4:	20cf      	movs	r0, #207	; 0xcf
    31a6:	2100      	movs	r1, #0
    31a8:	2200      	movs	r2, #0
    31aa:	4c12      	ldr	r4, [pc, #72]	; (31f4 <spi_read_reg+0x88>)
    31ac:	47a0      	blx	r4
		return N_FAIL;
    31ae:	2300      	movs	r3, #0
    31b0:	e01d      	b.n	31ee <spi_read_reg+0x82>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    31b2:	a803      	add	r0, sp, #12
    31b4:	2104      	movs	r1, #4
    31b6:	1c2a      	adds	r2, r5, #0
    31b8:	4b10      	ldr	r3, [pc, #64]	; (31fc <spi_read_reg+0x90>)
    31ba:	4798      	blx	r3
	if (result != N_OK) {
    31bc:	2801      	cmp	r0, #1
    31be:	d008      	beq.n	31d2 <spi_read_reg+0x66>
		M2M_ERR("[nmi spi]: Failed data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31c0:	2300      	movs	r3, #0
    31c2:	9300      	str	r3, [sp, #0]
    31c4:	20cf      	movs	r0, #207	; 0xcf
    31c6:	2100      	movs	r1, #0
    31c8:	2200      	movs	r2, #0
    31ca:	4c0a      	ldr	r4, [pc, #40]	; (31f4 <spi_read_reg+0x88>)
    31cc:	47a0      	blx	r4
		return N_FAIL;
    31ce:	2300      	movs	r3, #0
    31d0:	e00d      	b.n	31ee <spi_read_reg+0x82>
	}  
	
#endif

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
    31d2:	ab03      	add	r3, sp, #12
    31d4:	7859      	ldrb	r1, [r3, #1]
    31d6:	0209      	lsls	r1, r1, #8
		((uint32)tmp[2] << 16) |
    31d8:	789a      	ldrb	r2, [r3, #2]
    31da:	0412      	lsls	r2, r2, #16
		return N_FAIL;
	}  
	
#endif

	*u32data = tmp[0] | 
    31dc:	4311      	orrs	r1, r2
    31de:	781a      	ldrb	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
    31e0:	4311      	orrs	r1, r2
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    31e2:	78da      	ldrb	r2, [r3, #3]
    31e4:	0612      	lsls	r2, r2, #24
	
#endif

	*u32data = tmp[0] | 
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    31e6:	1c0b      	adds	r3, r1, #0
    31e8:	4313      	orrs	r3, r2
		return N_FAIL;
	}  
	
#endif

	*u32data = tmp[0] | 
    31ea:	603b      	str	r3, [r7, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
	
	return N_OK;
    31ec:	2301      	movs	r3, #1
    31ee:	b258      	sxtb	r0, r3
}
    31f0:	b005      	add	sp, #20
    31f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31f4:	00002fbd 	.word	0x00002fbd
    31f8:	00002e51 	.word	0x00002e51
    31fc:	00002ed5 	.word	0x00002ed5

00003200 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3200:	b500      	push	{lr}
    3202:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3204:	a901      	add	r1, sp, #4
    3206:	4b02      	ldr	r3, [pc, #8]	; (3210 <nm_spi_read_reg+0x10>)
    3208:	4798      	blx	r3

	return u32Val;
}
    320a:	9801      	ldr	r0, [sp, #4]
    320c:	b003      	add	sp, #12
    320e:	bd00      	pop	{pc}
    3210:	0000316d 	.word	0x0000316d

00003214 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3214:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    3216:	4b04      	ldr	r3, [pc, #16]	; (3228 <nm_spi_read_reg_with_ret+0x14>)
    3218:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    321a:	2801      	cmp	r0, #1
    321c:	d101      	bne.n	3222 <nm_spi_read_reg_with_ret+0xe>
    321e:	2000      	movs	r0, #0
    3220:	e000      	b.n	3224 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3222:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    3224:	b240      	sxtb	r0, r0
}
    3226:	bd08      	pop	{r3, pc}
    3228:	0000316d 	.word	0x0000316d

0000322c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    322c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    322e:	4b04      	ldr	r3, [pc, #16]	; (3240 <nm_spi_write_reg+0x14>)
    3230:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3232:	2801      	cmp	r0, #1
    3234:	d101      	bne.n	323a <nm_spi_write_reg+0xe>
    3236:	2000      	movs	r0, #0
    3238:	e000      	b.n	323c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;
    323a:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    323c:	b240      	sxtb	r0, r0
}
    323e:	bd08      	pop	{r3, pc}
    3240:	00003119 	.word	0x00003119

00003244 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_init(void)
{
    3244:	b510      	push	{r4, lr}
    3246:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    3248:	2300      	movs	r3, #0
    324a:	9300      	str	r3, [sp, #0]
	
	/**
		configure protocol 
	**/
	gu8Crc_off = 0;
    324c:	4a1d      	ldr	r2, [pc, #116]	; (32c4 <nm_spi_init+0x80>)
    324e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset 
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    3250:	481d      	ldr	r0, [pc, #116]	; (32c8 <nm_spi_init+0x84>)
    3252:	4669      	mov	r1, sp
    3254:	4b1d      	ldr	r3, [pc, #116]	; (32cc <nm_spi_init+0x88>)
    3256:	4798      	blx	r3
    3258:	2800      	cmp	r0, #0
    325a:	d108      	bne.n	326e <nm_spi_init+0x2a>
		/* Read failed. Try with CRC off. This might happen when module 
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    325c:	2201      	movs	r2, #1
    325e:	4b19      	ldr	r3, [pc, #100]	; (32c4 <nm_spi_init+0x80>)
    3260:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3262:	4819      	ldr	r0, [pc, #100]	; (32c8 <nm_spi_init+0x84>)
    3264:	4669      	mov	r1, sp
    3266:	4b19      	ldr	r3, [pc, #100]	; (32cc <nm_spi_init+0x88>)
    3268:	4798      	blx	r3
    326a:	2800      	cmp	r0, #0
    326c:	d027      	beq.n	32be <nm_spi_init+0x7a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    326e:	4b15      	ldr	r3, [pc, #84]	; (32c4 <nm_spi_init+0x80>)
    3270:	781b      	ldrb	r3, [r3, #0]
    3272:	2b00      	cmp	r3, #0
    3274:	d10d      	bne.n	3292 <nm_spi_init+0x4e>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
    3276:	237c      	movs	r3, #124	; 0x7c
    3278:	9900      	ldr	r1, [sp, #0]
    327a:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    327c:	2350      	movs	r3, #80	; 0x50
    327e:	4319      	orrs	r1, r3
    3280:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    3282:	4811      	ldr	r0, [pc, #68]	; (32c8 <nm_spi_init+0x84>)
    3284:	4b12      	ldr	r3, [pc, #72]	; (32d0 <nm_spi_init+0x8c>)
    3286:	4798      	blx	r3
    3288:	2800      	cmp	r0, #0
    328a:	d018      	beq.n	32be <nm_spi_init+0x7a>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
			return 0;
		}
		gu8Crc_off = 1;
    328c:	2201      	movs	r2, #1
    328e:	4b0d      	ldr	r3, [pc, #52]	; (32c4 <nm_spi_init+0x80>)
    3290:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    3292:	2080      	movs	r0, #128	; 0x80
    3294:	0140      	lsls	r0, r0, #5
    3296:	a901      	add	r1, sp, #4
    3298:	4b0c      	ldr	r3, [pc, #48]	; (32cc <nm_spi_init+0x88>)
    329a:	4798      	blx	r3
    329c:	2800      	cmp	r0, #0
    329e:	d00d      	beq.n	32bc <nm_spi_init+0x78>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    32a0:	4c09      	ldr	r4, [pc, #36]	; (32c8 <nm_spi_init+0x84>)
    32a2:	1c20      	adds	r0, r4, #0
    32a4:	4b0b      	ldr	r3, [pc, #44]	; (32d4 <nm_spi_init+0x90>)
    32a6:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    32a8:	2370      	movs	r3, #112	; 0x70
    32aa:	1c01      	adds	r1, r0, #0
    32ac:	4399      	bics	r1, r3
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    32ae:	2350      	movs	r3, #80	; 0x50
    32b0:	4319      	orrs	r1, r3
	
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    32b2:	1c20      	adds	r0, r4, #0
    32b4:	4b08      	ldr	r3, [pc, #32]	; (32d8 <nm_spi_init+0x94>)
    32b6:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    32b8:	2000      	movs	r0, #0
    32ba:	e000      	b.n	32be <nm_spi_init+0x7a>
	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
		return M2M_ERR_BUS_FAIL;
    32bc:	20fa      	movs	r0, #250	; 0xfa
    32be:	b240      	sxtb	r0, r0
	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
}
    32c0:	b002      	add	sp, #8
    32c2:	bd10      	pop	{r4, pc}
    32c4:	20000bac 	.word	0x20000bac
    32c8:	0000e824 	.word	0x0000e824
    32cc:	0000316d 	.word	0x0000316d
    32d0:	00003119 	.word	0x00003119
    32d4:	00003201 	.word	0x00003201
    32d8:	0000322d 	.word	0x0000322d

000032dc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    32dc:	b570      	push	{r4, r5, r6, lr}
    32de:	b082      	sub	sp, #8
    32e0:	1c03      	adds	r3, r0, #0
    32e2:	1c0e      	adds	r6, r1, #0
    32e4:	1c14      	adds	r4, r2, #0

	/**
		Command 
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    32e6:	2200      	movs	r2, #0
    32e8:	9200      	str	r2, [sp, #0]
    32ea:	20c8      	movs	r0, #200	; 0xc8
    32ec:	1c19      	adds	r1, r3, #0
    32ee:	1c23      	adds	r3, r4, #0
    32f0:	4d12      	ldr	r5, [pc, #72]	; (333c <nm_spi_read_block+0x60>)
    32f2:	47a8      	blx	r5
	if (result != N_OK) {
    32f4:	2801      	cmp	r0, #1
    32f6:	d11d      	bne.n	3334 <nm_spi_read_block+0x58>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}  
 
	result = spi_cmd_rsp(cmd);
    32f8:	20c8      	movs	r0, #200	; 0xc8
    32fa:	4b11      	ldr	r3, [pc, #68]	; (3340 <nm_spi_read_block+0x64>)
    32fc:	4798      	blx	r3
	if (result != N_OK) {
    32fe:	2801      	cmp	r0, #1
    3300:	d007      	beq.n	3312 <nm_spi_read_block+0x36>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3302:	2300      	movs	r3, #0
    3304:	9300      	str	r3, [sp, #0]
    3306:	20cf      	movs	r0, #207	; 0xcf
    3308:	2100      	movs	r1, #0
    330a:	2200      	movs	r2, #0
    330c:	4c0b      	ldr	r4, [pc, #44]	; (333c <nm_spi_read_block+0x60>)
    330e:	47a0      	blx	r4
    3310:	e010      	b.n	3334 <nm_spi_read_block+0x58>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    3312:	1c30      	adds	r0, r6, #0
    3314:	1c21      	adds	r1, r4, #0
    3316:	2200      	movs	r2, #0
    3318:	4b0a      	ldr	r3, [pc, #40]	; (3344 <nm_spi_read_block+0x68>)
    331a:	4798      	blx	r3
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    331c:	2300      	movs	r3, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    331e:	2801      	cmp	r0, #1
    3320:	d006      	beq.n	3330 <nm_spi_read_block+0x54>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3322:	9300      	str	r3, [sp, #0]
    3324:	20cf      	movs	r0, #207	; 0xcf
    3326:	2100      	movs	r1, #0
    3328:	2200      	movs	r2, #0
    332a:	4c04      	ldr	r4, [pc, #16]	; (333c <nm_spi_read_block+0x60>)
    332c:	47a0      	blx	r4
    332e:	e001      	b.n	3334 <nm_spi_read_block+0x58>
	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    3330:	b258      	sxtb	r0, r3
    3332:	e001      	b.n	3338 <nm_spi_read_block+0x5c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    3334:	23fa      	movs	r3, #250	; 0xfa
    3336:	e7fb      	b.n	3330 <nm_spi_read_block+0x54>

	return s8Ret;
}
    3338:	b002      	add	sp, #8
    333a:	bd70      	pop	{r4, r5, r6, pc}
    333c:	00002fbd 	.word	0x00002fbd
    3340:	00002e51 	.word	0x00002e51
    3344:	00002ed5 	.word	0x00002ed5

00003348 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3348:	b5f0      	push	{r4, r5, r6, r7, lr}
    334a:	4657      	mov	r7, sl
    334c:	464e      	mov	r6, r9
    334e:	4645      	mov	r5, r8
    3350:	b4e0      	push	{r5, r6, r7}
    3352:	b084      	sub	sp, #16
    3354:	1c03      	adds	r3, r0, #0
    3356:	4688      	mov	r8, r1
    3358:	1c14      	adds	r4, r2, #0
	
	/**
		Command 
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    335a:	2200      	movs	r2, #0
    335c:	9200      	str	r2, [sp, #0]
    335e:	20c7      	movs	r0, #199	; 0xc7
    3360:	1c19      	adds	r1, r3, #0
    3362:	1c23      	adds	r3, r4, #0
    3364:	4d30      	ldr	r5, [pc, #192]	; (3428 <nm_spi_write_block+0xe0>)
    3366:	47a8      	blx	r5
	if (result != N_OK) {
    3368:	2801      	cmp	r0, #1
    336a:	d152      	bne.n	3412 <nm_spi_write_block+0xca>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);		
		return N_FAIL;
	}
 
	result = spi_cmd_rsp(cmd);
    336c:	20c7      	movs	r0, #199	; 0xc7
    336e:	4b2f      	ldr	r3, [pc, #188]	; (342c <nm_spi_write_block+0xe4>)
    3370:	4798      	blx	r3
	if (result != N_OK) {
    3372:	2801      	cmp	r0, #1
    3374:	d007      	beq.n	3386 <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3376:	2300      	movs	r3, #0
    3378:	9300      	str	r3, [sp, #0]
    337a:	20cf      	movs	r0, #207	; 0xcf
    337c:	2100      	movs	r1, #0
    337e:	2200      	movs	r2, #0
    3380:	4c29      	ldr	r4, [pc, #164]	; (3428 <nm_spi_write_block+0xe0>)
    3382:	47a0      	blx	r4
    3384:	e045      	b.n	3412 <nm_spi_write_block+0xca>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    3386:	2200      	movs	r2, #0
    3388:	ab03      	add	r3, sp, #12
    338a:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    338c:	2500      	movs	r5, #0
    338e:	2780      	movs	r7, #128	; 0x80
    3390:	01bf      	lsls	r7, r7, #6
    3392:	46ba      	mov	sl, r7
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;	
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3394:	4b26      	ldr	r3, [pc, #152]	; (3430 <nm_spi_write_block+0xe8>)
    3396:	4699      	mov	r9, r3
    3398:	1c26      	adds	r6, r4, #0
    339a:	42bc      	cmp	r4, r7
    339c:	d900      	bls.n	33a0 <nm_spi_write_block+0x58>
    339e:	4656      	mov	r6, sl
    33a0:	b2b6      	uxth	r6, r6

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    33a2:	2d00      	cmp	r5, #0
    33a4:	d104      	bne.n	33b0 <nm_spi_write_block+0x68>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x1;
    33a6:	2301      	movs	r3, #1
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    33a8:	42bc      	cmp	r4, r7
    33aa:	d806      	bhi.n	33ba <nm_spi_write_block+0x72>
				order = 0x3;
    33ac:	2303      	movs	r3, #3
    33ae:	e004      	b.n	33ba <nm_spi_write_block+0x72>
			else
				order = 0x1;
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    33b0:	42a7      	cmp	r7, r4
    33b2:	419b      	sbcs	r3, r3
    33b4:	425b      	negs	r3, r3
    33b6:	2203      	movs	r2, #3
    33b8:	1ad3      	subs	r3, r2, r3
			else
				order = 0x2;
		}
		cmd |= order;	
    33ba:	4668      	mov	r0, sp
    33bc:	300b      	adds	r0, #11
    33be:	2210      	movs	r2, #16
    33c0:	4252      	negs	r2, r2
    33c2:	4313      	orrs	r3, r2
    33c4:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    33c6:	2101      	movs	r1, #1
    33c8:	47c8      	blx	r9
    33ca:	2800      	cmp	r0, #0
    33cc:	d119      	bne.n	3402 <nm_spi_write_block+0xba>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    33ce:	b228      	sxth	r0, r5
    33d0:	4440      	add	r0, r8
    33d2:	1c31      	adds	r1, r6, #0
    33d4:	4b16      	ldr	r3, [pc, #88]	; (3430 <nm_spi_write_block+0xe8>)
    33d6:	4798      	blx	r3
    33d8:	2800      	cmp	r0, #0
    33da:	d112      	bne.n	3402 <nm_spi_write_block+0xba>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    33dc:	4b15      	ldr	r3, [pc, #84]	; (3434 <nm_spi_write_block+0xec>)
    33de:	781b      	ldrb	r3, [r3, #0]
    33e0:	2b00      	cmp	r3, #0
    33e2:	d105      	bne.n	33f0 <nm_spi_write_block+0xa8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    33e4:	a803      	add	r0, sp, #12
    33e6:	2102      	movs	r1, #2
    33e8:	4b11      	ldr	r3, [pc, #68]	; (3430 <nm_spi_write_block+0xe8>)
    33ea:	4798      	blx	r3
    33ec:	2800      	cmp	r0, #0
    33ee:	d108      	bne.n	3402 <nm_spi_write_block+0xba>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    33f0:	1975      	adds	r5, r6, r5
    33f2:	b2ad      	uxth	r5, r5
		sz -= nbytes;
    33f4:	1ba4      	subs	r4, r4, r6
    33f6:	b2a4      	uxth	r4, r4
	} while (sz);
    33f8:	2c00      	cmp	r4, #0
    33fa:	d1cd      	bne.n	3398 <nm_spi_write_block+0x50>
    33fc:	e00b      	b.n	3416 <nm_spi_write_block+0xce>
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
    33fe:	b240      	sxtb	r0, r0
    3400:	e00b      	b.n	341a <nm_spi_write_block+0xd2>
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3402:	2300      	movs	r3, #0
    3404:	9300      	str	r3, [sp, #0]
    3406:	20cf      	movs	r0, #207	; 0xcf
    3408:	2100      	movs	r1, #0
    340a:	2200      	movs	r2, #0
    340c:	4c06      	ldr	r4, [pc, #24]	; (3428 <nm_spi_write_block+0xe0>)
    340e:	47a0      	blx	r4
    3410:	e001      	b.n	3416 <nm_spi_write_block+0xce>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    3412:	20fa      	movs	r0, #250	; 0xfa
    3414:	e7f3      	b.n	33fe <nm_spi_write_block+0xb6>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3416:	2000      	movs	r0, #0
    3418:	e7f1      	b.n	33fe <nm_spi_write_block+0xb6>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    341a:	b004      	add	sp, #16
    341c:	bc1c      	pop	{r2, r3, r4}
    341e:	4690      	mov	r8, r2
    3420:	4699      	mov	r9, r3
    3422:	46a2      	mov	sl, r4
    3424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	00002fbd 	.word	0x00002fbd
    342c:	00002e51 	.word	0x00002e51
    3430:	00002f9d 	.word	0x00002f9d
    3434:	20000bac 	.word	0x20000bac

00003438 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    3438:	b5f0      	push	{r4, r5, r6, r7, lr}
    343a:	465f      	mov	r7, fp
    343c:	4656      	mov	r6, sl
    343e:	464d      	mov	r5, r9
    3440:	4644      	mov	r4, r8
    3442:	b4f0      	push	{r4, r5, r6, r7}
    3444:	b083      	sub	sp, #12
    3446:	4682      	mov	sl, r0
    3448:	1c0d      	adds	r5, r1, #0
    344a:	4693      	mov	fp, r2
    344c:	1c1f      	adds	r7, r3, #0
    344e:	ab0c      	add	r3, sp, #48	; 0x30
    3450:	881e      	ldrh	r6, [r3, #0]
	if(u16ReadCount > 0)
    3452:	2e00      	cmp	r6, #0
    3454:	d044      	beq.n	34e0 <Socket_ReadSocketData+0xa8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    3456:	80ce      	strh	r6, [r1, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3458:	0043      	lsls	r3, r0, #1
    345a:	4453      	add	r3, sl
    345c:	009b      	lsls	r3, r3, #2
    345e:	4698      	mov	r8, r3
    3460:	4b23      	ldr	r3, [pc, #140]	; (34f0 <Socket_ReadSocketData+0xb8>)
    3462:	4699      	mov	r9, r3
    3464:	44c1      	add	r9, r8
			{
				u8SetRxDone = 0;
				
				if(s16Diff > 3)
				{
					u16Read		= gastrSockets[sock].u16UserBufferSize;
    3466:	9701      	str	r7, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3468:	464a      	mov	r2, r9
    346a:	8893      	ldrh	r3, [r2, #4]
    346c:	1af3      	subs	r3, r6, r3
    346e:	b29b      	uxth	r3, r3
			if(s16Diff > 0)
    3470:	b21a      	sxth	r2, r3
    3472:	2a00      	cmp	r2, #0
    3474:	dd10      	ble.n	3498 <Socket_ReadSocketData+0x60>
			{
				u8SetRxDone = 0;
				
				if(s16Diff > 3)
    3476:	2a03      	cmp	r2, #3
    3478:	dd06      	ble.n	3488 <Socket_ReadSocketData+0x50>
				{
					u16Read		= gastrSockets[sock].u16UserBufferSize;
    347a:	4f1d      	ldr	r7, [pc, #116]	; (34f0 <Socket_ReadSocketData+0xb8>)
    347c:	1c3b      	adds	r3, r7, #0
    347e:	4443      	add	r3, r8
    3480:	889c      	ldrh	r4, [r3, #4]
    3482:	b2a4      	uxth	r4, r4
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    3484:	2300      	movs	r3, #0
    3486:	e009      	b.n	349c <Socket_ReadSocketData+0x64>
				{
					u16Read		= gastrSockets[sock].u16UserBufferSize;
				}
				else
				{
					u16Read		= gastrSockets[sock].u16UserBufferSize - 4;					
    3488:	4819      	ldr	r0, [pc, #100]	; (34f0 <Socket_ReadSocketData+0xb8>)
    348a:	1c03      	adds	r3, r0, #0
    348c:	4443      	add	r3, r8
    348e:	889c      	ldrh	r4, [r3, #4]
    3490:	3c04      	subs	r4, #4
    3492:	b2a4      	uxth	r4, r4
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    3494:	2300      	movs	r3, #0
    3496:	e001      	b.n	349c <Socket_ReadSocketData+0x64>

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
    3498:	1c34      	adds	r4, r6, #0
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    349a:	2301      	movs	r3, #1
				else
				{
					u16Read		= gastrSockets[sock].u16UserBufferSize - 4;					
				}
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    349c:	4a14      	ldr	r2, [pc, #80]	; (34f0 <Socket_ReadSocketData+0xb8>)
    349e:	4647      	mov	r7, r8
    34a0:	58b9      	ldr	r1, [r7, r2]
    34a2:	9801      	ldr	r0, [sp, #4]
    34a4:	1c22      	adds	r2, r4, #0
    34a6:	4f13      	ldr	r7, [pc, #76]	; (34f4 <Socket_ReadSocketData+0xbc>)
    34a8:	47b8      	blx	r7
    34aa:	2800      	cmp	r0, #0
    34ac:	d118      	bne.n	34e0 <Socket_ReadSocketData+0xa8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    34ae:	4b10      	ldr	r3, [pc, #64]	; (34f0 <Socket_ReadSocketData+0xb8>)
    34b0:	4640      	mov	r0, r8
    34b2:	58c3      	ldr	r3, [r0, r3]
    34b4:	602b      	str	r3, [r5, #0]
				pstrRecv->s16BufferSize		= u16Read;
    34b6:	80ac      	strh	r4, [r5, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    34b8:	88eb      	ldrh	r3, [r5, #6]
    34ba:	1b1b      	subs	r3, r3, r4
    34bc:	80eb      	strh	r3, [r5, #6]

				if (gpfAppSocketCb)
    34be:	4b0e      	ldr	r3, [pc, #56]	; (34f8 <Socket_ReadSocketData+0xc0>)
    34c0:	681b      	ldr	r3, [r3, #0]
    34c2:	2b00      	cmp	r3, #0
    34c4:	d005      	beq.n	34d2 <Socket_ReadSocketData+0x9a>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    34c6:	4b0c      	ldr	r3, [pc, #48]	; (34f8 <Socket_ReadSocketData+0xc0>)
    34c8:	681b      	ldr	r3, [r3, #0]
    34ca:	4650      	mov	r0, sl
    34cc:	4659      	mov	r1, fp
    34ce:	1c2a      	adds	r2, r5, #0
    34d0:	4798      	blx	r3

				u16ReadCount -= u16Read;
    34d2:	1b36      	subs	r6, r6, r4
    34d4:	b2b6      	uxth	r6, r6
				u32Address += u16Read;
    34d6:	9a01      	ldr	r2, [sp, #4]
    34d8:	1912      	adds	r2, r2, r4
    34da:	9201      	str	r2, [sp, #4]
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    34dc:	2e00      	cmp	r6, #0
    34de:	d1c3      	bne.n	3468 <Socket_ReadSocketData+0x30>
	}
}
    34e0:	b003      	add	sp, #12
    34e2:	bc3c      	pop	{r2, r3, r4, r5}
    34e4:	4690      	mov	r8, r2
    34e6:	4699      	mov	r9, r3
    34e8:	46a2      	mov	sl, r4
    34ea:	46ab      	mov	fp, r5
    34ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	20000cec 	.word	0x20000cec
    34f4:	000022b5 	.word	0x000022b5
    34f8:	20000d70 	.word	0x20000d70

000034fc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    34fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34fe:	4647      	mov	r7, r8
    3500:	b480      	push	{r7}
    3502:	b098      	sub	sp, #96	; 0x60
    3504:	1c0d      	adds	r5, r1, #0
    3506:	1c14      	adds	r4, r2, #0
	if(u8OpCode == SOCKET_CMD_BIND)
    3508:	2841      	cmp	r0, #65	; 0x41
    350a:	d11a      	bne.n	3542 <m2m_ip_cb+0x46>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    350c:	1c10      	adds	r0, r2, #0
    350e:	a907      	add	r1, sp, #28
    3510:	2204      	movs	r2, #4
    3512:	2300      	movs	r3, #0
    3514:	4c7f      	ldr	r4, [pc, #508]	; (3714 <m2m_ip_cb+0x218>)
    3516:	47a0      	blx	r4
    3518:	2800      	cmp	r0, #0
    351a:	d000      	beq.n	351e <m2m_ip_cb+0x22>
    351c:	e0f6      	b.n	370c <m2m_ip_cb+0x210>
		{
			strBind.status = strBindReply.s8Status;
    351e:	ab07      	add	r3, sp, #28
    3520:	785a      	ldrb	r2, [r3, #1]
    3522:	ab03      	add	r3, sp, #12
    3524:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3526:	4b7c      	ldr	r3, [pc, #496]	; (3718 <m2m_ip_cb+0x21c>)
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	2b00      	cmp	r3, #0
    352c:	d100      	bne.n	3530 <m2m_ip_cb+0x34>
    352e:	e0ed      	b.n	370c <m2m_ip_cb+0x210>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3530:	4b79      	ldr	r3, [pc, #484]	; (3718 <m2m_ip_cb+0x21c>)
    3532:	681b      	ldr	r3, [r3, #0]
    3534:	aa07      	add	r2, sp, #28
    3536:	2000      	movs	r0, #0
    3538:	5610      	ldrsb	r0, [r2, r0]
    353a:	2101      	movs	r1, #1
    353c:	aa03      	add	r2, sp, #12
    353e:	4798      	blx	r3
    3540:	e0e4      	b.n	370c <m2m_ip_cb+0x210>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3542:	2842      	cmp	r0, #66	; 0x42
    3544:	d11a      	bne.n	357c <m2m_ip_cb+0x80>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3546:	1c10      	adds	r0, r2, #0
    3548:	a907      	add	r1, sp, #28
    354a:	2204      	movs	r2, #4
    354c:	2300      	movs	r3, #0
    354e:	4c71      	ldr	r4, [pc, #452]	; (3714 <m2m_ip_cb+0x218>)
    3550:	47a0      	blx	r4
    3552:	2800      	cmp	r0, #0
    3554:	d000      	beq.n	3558 <m2m_ip_cb+0x5c>
    3556:	e0d9      	b.n	370c <m2m_ip_cb+0x210>
		{
			strListen.status = strListenReply.s8Status;
    3558:	ab07      	add	r3, sp, #28
    355a:	785a      	ldrb	r2, [r3, #1]
    355c:	ab03      	add	r3, sp, #12
    355e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3560:	4b6d      	ldr	r3, [pc, #436]	; (3718 <m2m_ip_cb+0x21c>)
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	2b00      	cmp	r3, #0
    3566:	d100      	bne.n	356a <m2m_ip_cb+0x6e>
    3568:	e0d0      	b.n	370c <m2m_ip_cb+0x210>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    356a:	4b6b      	ldr	r3, [pc, #428]	; (3718 <m2m_ip_cb+0x21c>)
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	aa07      	add	r2, sp, #28
    3570:	2000      	movs	r0, #0
    3572:	5610      	ldrsb	r0, [r2, r0]
    3574:	2102      	movs	r1, #2
    3576:	aa03      	add	r2, sp, #12
    3578:	4798      	blx	r3
    357a:	e0c7      	b.n	370c <m2m_ip_cb+0x210>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    357c:	2843      	cmp	r0, #67	; 0x43
    357e:	d12d      	bne.n	35dc <m2m_ip_cb+0xe0>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3580:	1c10      	adds	r0, r2, #0
    3582:	a903      	add	r1, sp, #12
    3584:	220c      	movs	r2, #12
    3586:	2300      	movs	r3, #0
    3588:	4c62      	ldr	r4, [pc, #392]	; (3714 <m2m_ip_cb+0x218>)
    358a:	47a0      	blx	r4
    358c:	2800      	cmp	r0, #0
    358e:	d000      	beq.n	3592 <m2m_ip_cb+0x96>
    3590:	e0bc      	b.n	370c <m2m_ip_cb+0x210>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    3592:	ab03      	add	r3, sp, #12
    3594:	7a5a      	ldrb	r2, [r3, #9]
    3596:	b253      	sxtb	r3, r2
    3598:	2b00      	cmp	r3, #0
    359a:	db08      	blt.n	35ae <m2m_ip_cb+0xb2>
			{
				gastrSockets[strAcceptReply.sConnectedSock].bIsSSLSock 	= 0;
    359c:	495f      	ldr	r1, [pc, #380]	; (371c <m2m_ip_cb+0x220>)
    359e:	0058      	lsls	r0, r3, #1
    35a0:	18c4      	adds	r4, r0, r3
    35a2:	00a4      	lsls	r4, r4, #2
    35a4:	190c      	adds	r4, r1, r4
    35a6:	2500      	movs	r5, #0
    35a8:	71e5      	strb	r5, [r4, #7]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    35aa:	2301      	movs	r3, #1
    35ac:	71a3      	strb	r3, [r4, #6]
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    35ae:	ab07      	add	r3, sp, #28
    35b0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    35b2:	2202      	movs	r2, #2
    35b4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    35b6:	aa03      	add	r2, sp, #12
    35b8:	8851      	ldrh	r1, [r2, #2]
    35ba:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    35bc:	9a04      	ldr	r2, [sp, #16]
    35be:	9209      	str	r2, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
    35c0:	4b55      	ldr	r3, [pc, #340]	; (3718 <m2m_ip_cb+0x21c>)
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d100      	bne.n	35ca <m2m_ip_cb+0xce>
    35c8:	e0a0      	b.n	370c <m2m_ip_cb+0x210>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    35ca:	4b53      	ldr	r3, [pc, #332]	; (3718 <m2m_ip_cb+0x21c>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	aa03      	add	r2, sp, #12
    35d0:	2008      	movs	r0, #8
    35d2:	5610      	ldrsb	r0, [r2, r0]
    35d4:	2104      	movs	r1, #4
    35d6:	aa07      	add	r2, sp, #28
    35d8:	4798      	blx	r3
    35da:	e097      	b.n	370c <m2m_ip_cb+0x210>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    35dc:	2844      	cmp	r0, #68	; 0x44
    35de:	d001      	beq.n	35e4 <m2m_ip_cb+0xe8>
    35e0:	284b      	cmp	r0, #75	; 0x4b
    35e2:	d11a      	bne.n	361a <m2m_ip_cb+0x11e>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    35e4:	1c20      	adds	r0, r4, #0
    35e6:	a907      	add	r1, sp, #28
    35e8:	2204      	movs	r2, #4
    35ea:	2300      	movs	r3, #0
    35ec:	4c49      	ldr	r4, [pc, #292]	; (3714 <m2m_ip_cb+0x218>)
    35ee:	47a0      	blx	r4
    35f0:	2800      	cmp	r0, #0
    35f2:	d000      	beq.n	35f6 <m2m_ip_cb+0xfa>
    35f4:	e08a      	b.n	370c <m2m_ip_cb+0x210>
		{
			strConnMsg.sock		= strConnectReply.sock;
    35f6:	aa07      	add	r2, sp, #28
    35f8:	7810      	ldrb	r0, [r2, #0]
    35fa:	ab03      	add	r3, sp, #12
    35fc:	7018      	strb	r0, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    35fe:	7852      	ldrb	r2, [r2, #1]
    3600:	705a      	strb	r2, [r3, #1]
			if(gpfAppSocketCb)
    3602:	4b45      	ldr	r3, [pc, #276]	; (3718 <m2m_ip_cb+0x21c>)
    3604:	681b      	ldr	r3, [r3, #0]
    3606:	2b00      	cmp	r3, #0
    3608:	d100      	bne.n	360c <m2m_ip_cb+0x110>
    360a:	e07f      	b.n	370c <m2m_ip_cb+0x210>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    360c:	4b42      	ldr	r3, [pc, #264]	; (3718 <m2m_ip_cb+0x21c>)
    360e:	681b      	ldr	r3, [r3, #0]
    3610:	b240      	sxtb	r0, r0
    3612:	2105      	movs	r1, #5
    3614:	aa03      	add	r2, sp, #12
    3616:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    3618:	e078      	b.n	370c <m2m_ip_cb+0x210>
			strConnMsg.s8Error	= strConnectReply.s8Error;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    361a:	284a      	cmp	r0, #74	; 0x4a
    361c:	d111      	bne.n	3642 <m2m_ip_cb+0x146>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    361e:	1c10      	adds	r0, r2, #0
    3620:	a907      	add	r1, sp, #28
    3622:	2244      	movs	r2, #68	; 0x44
    3624:	2300      	movs	r3, #0
    3626:	4c3b      	ldr	r4, [pc, #236]	; (3714 <m2m_ip_cb+0x218>)
    3628:	47a0      	blx	r4
    362a:	2800      	cmp	r0, #0
    362c:	d16e      	bne.n	370c <m2m_ip_cb+0x210>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    362e:	9917      	ldr	r1, [sp, #92]	; 0x5c
			if(gpfAppResolveCb)
    3630:	4b3b      	ldr	r3, [pc, #236]	; (3720 <m2m_ip_cb+0x224>)
    3632:	681b      	ldr	r3, [r3, #0]
    3634:	2b00      	cmp	r3, #0
    3636:	d069      	beq.n	370c <m2m_ip_cb+0x210>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3638:	4b39      	ldr	r3, [pc, #228]	; (3720 <m2m_ip_cb+0x224>)
    363a:	681b      	ldr	r3, [r3, #0]
    363c:	a807      	add	r0, sp, #28
    363e:	4798      	blx	r3
    3640:	e064      	b.n	370c <m2m_ip_cb+0x210>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3642:	2846      	cmp	r0, #70	; 0x46
    3644:	d006      	beq.n	3654 <m2m_ip_cb+0x158>
    3646:	2848      	cmp	r0, #72	; 0x48
    3648:	d007      	beq.n	365a <m2m_ip_cb+0x15e>
    364a:	284d      	cmp	r0, #77	; 0x4d
    364c:	d13c      	bne.n	36c8 <m2m_ip_cb+0x1cc>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    364e:	2206      	movs	r2, #6
    3650:	4690      	mov	r8, r2
    3652:	e004      	b.n	365e <m2m_ip_cb+0x162>
    3654:	2306      	movs	r3, #6
    3656:	4698      	mov	r8, r3
    3658:	e001      	b.n	365e <m2m_ip_cb+0x162>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    365a:	2209      	movs	r2, #9
    365c:	4690      	mov	r8, r2
		
		/* Read RECV REPLY data structure. 
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    365e:	1c20      	adds	r0, r4, #0
    3660:	a903      	add	r1, sp, #12
    3662:	2210      	movs	r2, #16
    3664:	2300      	movs	r3, #0
    3666:	4e2b      	ldr	r6, [pc, #172]	; (3714 <m2m_ip_cb+0x218>)
    3668:	47b0      	blx	r6
    366a:	2800      	cmp	r0, #0
    366c:	d14e      	bne.n	370c <m2m_ip_cb+0x210>
		{
			sock			= strRecvReply.sock;
    366e:	ae03      	add	r6, sp, #12
    3670:	7b30      	ldrb	r0, [r6, #12]
			
			/* Reset the Socket RX Pending Flag.
			*/ 
			gastrSockets[sock].bIsRecvPending = 0;
    3672:	b243      	sxtb	r3, r0
    3674:	005a      	lsls	r2, r3, #1
    3676:	18d3      	adds	r3, r2, r3
    3678:	009b      	lsls	r3, r3, #2
    367a:	4a28      	ldr	r2, [pc, #160]	; (371c <m2m_ip_cb+0x220>)
    367c:	18d3      	adds	r3, r2, r3
    367e:	2200      	movs	r2, #0
    3680:	721a      	strb	r2, [r3, #8]
	
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3682:	8937      	ldrh	r7, [r6, #8]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3684:	8971      	ldrh	r1, [r6, #10]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3686:	ab07      	add	r3, sp, #28
    3688:	8872      	ldrh	r2, [r6, #2]
    368a:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    368c:	9e04      	ldr	r6, [sp, #16]
    368e:	960a      	str	r6, [sp, #40]	; 0x28
			if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3690:	b23a      	sxth	r2, r7
    3692:	2a00      	cmp	r2, #0
    3694:	dd09      	ble.n	36aa <m2m_ip_cb+0x1ae>
    3696:	42aa      	cmp	r2, r5
    3698:	da07      	bge.n	36aa <m2m_ip_cb+0x1ae>
				/* Read the Application data and deliver it to the application callback in
				the given application buffer. If the buffer is smaller than the received data,
				the data is passed to the application in chunks according to its buffer size.
				*/
				u16ReadSize = (uint16)s16RecvStatus;
				Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    369a:	b240      	sxtb	r0, r0
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
			if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
			{
				/* Skip incoming bytes until reaching the Start of Application Data. 
				*/
				u32Address += u16DataOffset;
    369c:	1863      	adds	r3, r4, r1
				/* Read the Application data and deliver it to the application callback in
				the given application buffer. If the buffer is smaller than the received data,
				the data is passed to the application in chunks according to its buffer size.
				*/
				u16ReadSize = (uint16)s16RecvStatus;
				Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    369e:	9700      	str	r7, [sp, #0]
    36a0:	a907      	add	r1, sp, #28
    36a2:	4642      	mov	r2, r8
    36a4:	4c1f      	ldr	r4, [pc, #124]	; (3724 <m2m_ip_cb+0x228>)
    36a6:	47a0      	blx	r4
    36a8:	e030      	b.n	370c <m2m_ip_cb+0x210>
			}
			else
			{
				strRecvMsg.s16BufferSize	= s16RecvStatus;
    36aa:	ab07      	add	r3, sp, #28
    36ac:	809f      	strh	r7, [r3, #4]
				strRecvMsg.pu8Buffer		= NULL;
    36ae:	2300      	movs	r3, #0
    36b0:	9307      	str	r3, [sp, #28]
				if(gpfAppSocketCb)
    36b2:	4b19      	ldr	r3, [pc, #100]	; (3718 <m2m_ip_cb+0x21c>)
    36b4:	681b      	ldr	r3, [r3, #0]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d028      	beq.n	370c <m2m_ip_cb+0x210>
					gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    36ba:	4b17      	ldr	r3, [pc, #92]	; (3718 <m2m_ip_cb+0x21c>)
    36bc:	681b      	ldr	r3, [r3, #0]
    36be:	b240      	sxtb	r0, r0
    36c0:	4641      	mov	r1, r8
    36c2:	aa07      	add	r2, sp, #28
    36c4:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    36c6:	e021      	b.n	370c <m2m_ip_cb+0x210>
				if(gpfAppSocketCb)
					gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    36c8:	2845      	cmp	r0, #69	; 0x45
    36ca:	d005      	beq.n	36d8 <m2m_ip_cb+0x1dc>
    36cc:	2847      	cmp	r0, #71	; 0x47
    36ce:	d005      	beq.n	36dc <m2m_ip_cb+0x1e0>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    36d0:	2507      	movs	r5, #7
				if(gpfAppSocketCb)
					gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    36d2:	284c      	cmp	r0, #76	; 0x4c
    36d4:	d003      	beq.n	36de <m2m_ip_cb+0x1e2>
    36d6:	e019      	b.n	370c <m2m_ip_cb+0x210>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    36d8:	2507      	movs	r5, #7
    36da:	e000      	b.n	36de <m2m_ip_cb+0x1e2>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    36dc:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    36de:	1c20      	adds	r0, r4, #0
    36e0:	a907      	add	r1, sp, #28
    36e2:	2204      	movs	r2, #4
    36e4:	2300      	movs	r3, #0
    36e6:	4c0b      	ldr	r4, [pc, #44]	; (3714 <m2m_ip_cb+0x218>)
    36e8:	47a0      	blx	r4
    36ea:	2800      	cmp	r0, #0
    36ec:	d10e      	bne.n	370c <m2m_ip_cb+0x210>
		{
			sock = strReply.sock;
    36ee:	ab07      	add	r3, sp, #28
    36f0:	7818      	ldrb	r0, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    36f2:	885a      	ldrh	r2, [r3, #2]
    36f4:	ab03      	add	r3, sp, #12
    36f6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    36f8:	4b07      	ldr	r3, [pc, #28]	; (3718 <m2m_ip_cb+0x21c>)
    36fa:	681b      	ldr	r3, [r3, #0]
    36fc:	2b00      	cmp	r3, #0
    36fe:	d005      	beq.n	370c <m2m_ip_cb+0x210>
				gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3700:	4b05      	ldr	r3, [pc, #20]	; (3718 <m2m_ip_cb+0x21c>)
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	b240      	sxtb	r0, r0
    3706:	1c29      	adds	r1, r5, #0
    3708:	aa03      	add	r2, sp, #12
    370a:	4798      	blx	r3
		}
	}	
}
    370c:	b018      	add	sp, #96	; 0x60
    370e:	bc04      	pop	{r2}
    3710:	4690      	mov	r8, r2
    3712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3714:	000022b5 	.word	0x000022b5
    3718:	20000d70 	.word	0x20000d70
    371c:	20000cec 	.word	0x20000cec
    3720:	20000d74 	.word	0x20000d74
    3724:	00003439 	.word	0x00003439

00003728 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3728:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
    372a:	4b08      	ldr	r3, [pc, #32]	; (374c <socketInit+0x24>)
    372c:	781b      	ldrb	r3, [r3, #0]
    372e:	2b00      	cmp	r3, #0
    3730:	d10b      	bne.n	374a <socketInit+0x22>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3732:	4807      	ldr	r0, [pc, #28]	; (3750 <socketInit+0x28>)
    3734:	2100      	movs	r1, #0
    3736:	2284      	movs	r2, #132	; 0x84
    3738:	4b06      	ldr	r3, [pc, #24]	; (3754 <socketInit+0x2c>)
    373a:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GRP_IP,m2m_ip_cb);
    373c:	2002      	movs	r0, #2
    373e:	4906      	ldr	r1, [pc, #24]	; (3758 <socketInit+0x30>)
    3740:	4b06      	ldr	r3, [pc, #24]	; (375c <socketInit+0x34>)
    3742:	4798      	blx	r3
		gbSocketInit=1;
    3744:	2201      	movs	r2, #1
    3746:	4b01      	ldr	r3, [pc, #4]	; (374c <socketInit+0x24>)
    3748:	701a      	strb	r2, [r3, #0]
	}
}
    374a:	bd08      	pop	{r3, pc}
    374c:	20000bad 	.word	0x20000bad
    3750:	20000cec 	.word	0x20000cec
    3754:	00001d3d 	.word	0x00001d3d
    3758:	000034fd 	.word	0x000034fd
    375c:	00002351 	.word	0x00002351

00003760 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3760:	4b02      	ldr	r3, [pc, #8]	; (376c <registerSocketCallback+0xc>)
    3762:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3764:	4b02      	ldr	r3, [pc, #8]	; (3770 <registerSocketCallback+0x10>)
    3766:	6019      	str	r1, [r3, #0]
}
    3768:	4770      	bx	lr
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	20000d70 	.word	0x20000d70
    3770:	20000d74 	.word	0x20000d74

00003774 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3774:	b530      	push	{r4, r5, lr}
	SOCKET	sock = -1;
    3776:	23ff      	movs	r3, #255	; 0xff
	uint8	u8Count,u8SocketCount = MAX_SOCKET;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3778:	2802      	cmp	r0, #2
    377a:	d125      	bne.n	37c8 <socket+0x54>
	{
		if(u8Type == SOCK_STREAM)
    377c:	2901      	cmp	r1, #1
    377e:	d025      	beq.n	37cc <socket+0x58>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    3780:	240b      	movs	r4, #11
			u8Count = TCP_SOCK_MAX;
    3782:	2007      	movs	r0, #7
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    3784:	2902      	cmp	r1, #2
    3786:	d023      	beq.n	37d0 <socket+0x5c>
    3788:	e01e      	b.n	37c8 <socket+0x54>
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    378a:	1c01      	adds	r1, r0, #0
    378c:	0043      	lsls	r3, r0, #1
    378e:	181b      	adds	r3, r3, r0
    3790:	009b      	lsls	r3, r3, #2
    3792:	18eb      	adds	r3, r5, r3
    3794:	799b      	ldrb	r3, [r3, #6]
    3796:	2b00      	cmp	r3, #0
    3798:	d111      	bne.n	37be <socket+0x4a>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    379a:	004b      	lsls	r3, r1, #1
    379c:	185b      	adds	r3, r3, r1
    379e:	009b      	lsls	r3, r3, #2
    37a0:	4c11      	ldr	r4, [pc, #68]	; (37e8 <socket+0x74>)
    37a2:	18e3      	adds	r3, r4, r3
    37a4:	2401      	movs	r4, #1
    37a6:	719c      	strb	r4, [r3, #6]
				if(u8Flags & SOCKET_FLAGS_SSL)
    37a8:	07d3      	lsls	r3, r2, #31
    37aa:	d506      	bpl.n	37ba <socket+0x46>
					gastrSockets[u8Count].bIsSSLSock = 1;
    37ac:	004b      	lsls	r3, r1, #1
    37ae:	1859      	adds	r1, r3, r1
    37b0:	0089      	lsls	r1, r1, #2
    37b2:	4b0d      	ldr	r3, [pc, #52]	; (37e8 <socket+0x74>)
    37b4:	185b      	adds	r3, r3, r1
    37b6:	2201      	movs	r2, #1
    37b8:	71da      	strb	r2, [r3, #7]
				sock = (SOCKET)u8Count;
    37ba:	b2c3      	uxtb	r3, r0
				break;
    37bc:	e004      	b.n	37c8 <socket+0x54>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    37be:	3001      	adds	r0, #1
    37c0:	b2c0      	uxtb	r0, r0
    37c2:	4284      	cmp	r4, r0
    37c4:	d8e1      	bhi.n	378a <socket+0x16>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET	sock = -1;
    37c6:	23ff      	movs	r3, #255	; 0xff
    37c8:	b258      	sxtb	r0, r3
    37ca:	e00b      	b.n	37e4 <socket+0x70>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    37cc:	2407      	movs	r4, #7
			u8Count = 0;
    37ce:	2000      	movs	r0, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    37d0:	1c01      	adds	r1, r0, #0
    37d2:	0043      	lsls	r3, r0, #1
    37d4:	181b      	adds	r3, r3, r0
    37d6:	009b      	lsls	r3, r3, #2
    37d8:	4d03      	ldr	r5, [pc, #12]	; (37e8 <socket+0x74>)
    37da:	18eb      	adds	r3, r5, r3
    37dc:	799b      	ldrb	r3, [r3, #6]
    37de:	2b00      	cmp	r3, #0
    37e0:	d0db      	beq.n	379a <socket+0x26>
    37e2:	e7ec      	b.n	37be <socket+0x4a>
				break;
			}
		}
	}
	return sock;
}
    37e4:	bd30      	pop	{r4, r5, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	20000cec 	.word	0x20000cec

000037ec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    37ec:	b530      	push	{r4, r5, lr}
    37ee:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL))
    37f0:	2800      	cmp	r0, #0
    37f2:	db1f      	blt.n	3834 <connect+0x48>
    37f4:	2900      	cmp	r1, #0
    37f6:	d01f      	beq.n	3838 <connect+0x4c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if(gastrSockets[sock].bIsSSLSock)
    37f8:	0043      	lsls	r3, r0, #1
    37fa:	181b      	adds	r3, r3, r0
    37fc:	009b      	lsls	r3, r3, #2
    37fe:	4a10      	ldr	r2, [pc, #64]	; (3840 <connect+0x54>)
    3800:	18d3      	adds	r3, r2, r3
    3802:	79db      	ldrb	r3, [r3, #7]
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3804:	254b      	movs	r5, #75	; 0x4b
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if(gastrSockets[sock].bIsSSLSock)
    3806:	2b00      	cmp	r3, #0
    3808:	d100      	bne.n	380c <connect+0x20>
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    380a:	2544      	movs	r5, #68	; 0x44
		if(gastrSockets[sock].bIsSSLSock)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
		}
		strConnect.sock = sock;
    380c:	ac05      	add	r4, sp, #20
    380e:	7220      	strb	r0, [r4, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3810:	1c20      	adds	r0, r4, #0
    3812:	2208      	movs	r2, #8
    3814:	4b0b      	ldr	r3, [pc, #44]	; (3844 <connect+0x58>)
    3816:	4798      	blx	r3
		//strConnect.strAddr = *((tstrSockAddr*)pstrAddr);

		strConnect.strAddr.u16Family	= strConnect.strAddr.u16Family;
		strConnect.strAddr.u16Port		= strConnect.strAddr.u16Port;
		strConnect.strAddr.u32IPAddr	= strConnect.strAddr.u32IPAddr;
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3818:	2300      	movs	r3, #0
    381a:	9300      	str	r3, [sp, #0]
    381c:	9301      	str	r3, [sp, #4]
    381e:	9302      	str	r3, [sp, #8]
    3820:	2002      	movs	r0, #2
    3822:	1c29      	adds	r1, r5, #0
    3824:	1c22      	adds	r2, r4, #0
    3826:	230c      	movs	r3, #12
    3828:	4c07      	ldr	r4, [pc, #28]	; (3848 <connect+0x5c>)
    382a:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR) 
    382c:	2800      	cmp	r0, #0
    382e:	d004      	beq.n	383a <connect+0x4e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3830:	20f7      	movs	r0, #247	; 0xf7
    3832:	e002      	b.n	383a <connect+0x4e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3834:	20fa      	movs	r0, #250	; 0xfa
    3836:	e000      	b.n	383a <connect+0x4e>
    3838:	20fa      	movs	r0, #250	; 0xfa
		if(s8Ret != SOCK_ERR_NO_ERROR) 
		{
			s8Ret = SOCK_ERR_INVALID;
		} 
	}
	return s8Ret;
    383a:	b240      	sxtb	r0, r0
}
    383c:	b009      	add	sp, #36	; 0x24
    383e:	bd30      	pop	{r4, r5, pc}
    3840:	20000cec 	.word	0x20000cec
    3844:	00001d29 	.word	0x00001d29
    3848:	00001f69 	.word	0x00001f69

0000384c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    384c:	b510      	push	{r4, lr}
    384e:	b088      	sub	sp, #32
    3850:	1c0b      	adds	r3, r1, #0
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH))
    3852:	2800      	cmp	r0, #0
    3854:	db25      	blt.n	38a2 <send+0x56>
    3856:	2900      	cmp	r1, #0
    3858:	d025      	beq.n	38a6 <send+0x5a>
    385a:	21af      	movs	r1, #175	; 0xaf
    385c:	00c9      	lsls	r1, r1, #3
    385e:	428a      	cmp	r2, r1
    3860:	d823      	bhi.n	38aa <send+0x5e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock		= sock;
    3862:	a905      	add	r1, sp, #20
    3864:	7008      	strb	r0, [r1, #0]
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    3866:	804a      	strh	r2, [r1, #2]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3868:	2444      	movs	r4, #68	; 0x44
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock		= sock;
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);

		if(sock >= TCP_SOCK_MAX)
    386a:	2806      	cmp	r0, #6
    386c:	dc00      	bgt.n	3870 <send+0x24>
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    386e:	2450      	movs	r4, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].bIsSSLSock)
    3870:	0041      	lsls	r1, r0, #1
    3872:	1808      	adds	r0, r1, r0
    3874:	0080      	lsls	r0, r0, #2
    3876:	490f      	ldr	r1, [pc, #60]	; (38b4 <send+0x68>)
    3878:	1808      	adds	r0, r1, r0
    387a:	79c1      	ldrb	r1, [r0, #7]
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    387c:	2045      	movs	r0, #69	; 0x45

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].bIsSSLSock)
    387e:	2900      	cmp	r1, #0
    3880:	d001      	beq.n	3886 <send+0x3a>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3882:	204c      	movs	r0, #76	; 0x4c
			u16DataOffset	= SSL_TX_PACKET_OFFSET;
    3884:	2455      	movs	r4, #85	; 0x55
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3886:	2180      	movs	r1, #128	; 0x80
    3888:	4301      	orrs	r1, r0
    388a:	9300      	str	r3, [sp, #0]
    388c:	9201      	str	r2, [sp, #4]
    388e:	9402      	str	r4, [sp, #8]
    3890:	2002      	movs	r0, #2
    3892:	aa05      	add	r2, sp, #20
    3894:	230c      	movs	r3, #12
    3896:	4c08      	ldr	r4, [pc, #32]	; (38b8 <send+0x6c>)
    3898:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
    389a:	2800      	cmp	r0, #0
    389c:	d006      	beq.n	38ac <send+0x60>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    389e:	4807      	ldr	r0, [pc, #28]	; (38bc <send+0x70>)
    38a0:	e004      	b.n	38ac <send+0x60>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    38a2:	4807      	ldr	r0, [pc, #28]	; (38c0 <send+0x74>)
    38a4:	e002      	b.n	38ac <send+0x60>
    38a6:	4806      	ldr	r0, [pc, #24]	; (38c0 <send+0x74>)
    38a8:	e000      	b.n	38ac <send+0x60>
    38aa:	4805      	ldr	r0, [pc, #20]	; (38c0 <send+0x74>)
		if(s16Ret != SOCK_ERR_NO_ERROR)
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
    38ac:	b200      	sxth	r0, r0
}
    38ae:	b008      	add	sp, #32
    38b0:	bd10      	pop	{r4, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	20000cec 	.word	0x20000cec
    38b8:	00001f69 	.word	0x00001f69
    38bc:	0000fff2 	.word	0x0000fff2
    38c0:	0000fffa 	.word	0x0000fffa

000038c4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    38c4:	b570      	push	{r4, r5, r6, lr}
    38c6:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0))
    38c8:	2800      	cmp	r0, #0
    38ca:	db2d      	blt.n	3928 <recv+0x64>
    38cc:	2900      	cmp	r1, #0
    38ce:	d02d      	beq.n	392c <recv+0x68>
    38d0:	2a00      	cmp	r2, #0
    38d2:	d02d      	beq.n	3930 <recv+0x6c>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    38d4:	4c18      	ldr	r4, [pc, #96]	; (3938 <recv+0x74>)
    38d6:	0045      	lsls	r5, r0, #1
    38d8:	182e      	adds	r6, r5, r0
    38da:	00b6      	lsls	r6, r6, #2
    38dc:	5131      	str	r1, [r6, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    38de:	19a1      	adds	r1, r4, r6
    38e0:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    38e2:	7a09      	ldrb	r1, [r1, #8]
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    38e4:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    38e6:	2900      	cmp	r1, #0
    38e8:	d123      	bne.n	3932 <recv+0x6e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
    38ea:	1c22      	adds	r2, r4, #0
    38ec:	1994      	adds	r4, r2, r6
    38ee:	2501      	movs	r5, #1
    38f0:	7225      	strb	r5, [r4, #8]
			if(gastrSockets[sock].bIsSSLSock)
    38f2:	79e2      	ldrb	r2, [r4, #7]
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    38f4:	214d      	movs	r1, #77	; 0x4d
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
			
			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].bIsSSLSock)
    38f6:	2a00      	cmp	r2, #0
    38f8:	d100      	bne.n	38fc <recv+0x38>
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    38fa:	2146      	movs	r1, #70	; 0x46
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    38fc:	2b00      	cmp	r3, #0
    38fe:	d103      	bne.n	3908 <recv+0x44>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3900:	2301      	movs	r3, #1
    3902:	425b      	negs	r3, r3
    3904:	9304      	str	r3, [sp, #16]
    3906:	e000      	b.n	390a <recv+0x46>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3908:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    390a:	aa04      	add	r2, sp, #16
    390c:	7110      	strb	r0, [r2, #4]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    390e:	2300      	movs	r3, #0
    3910:	9300      	str	r3, [sp, #0]
    3912:	9301      	str	r3, [sp, #4]
    3914:	9302      	str	r3, [sp, #8]
    3916:	2002      	movs	r0, #2
    3918:	2308      	movs	r3, #8
    391a:	4c08      	ldr	r4, [pc, #32]	; (393c <recv+0x78>)
    391c:	47a0      	blx	r4
    391e:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3920:	2800      	cmp	r0, #0
    3922:	d006      	beq.n	3932 <recv+0x6e>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3924:	4a06      	ldr	r2, [pc, #24]	; (3940 <recv+0x7c>)
    3926:	e004      	b.n	3932 <recv+0x6e>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3928:	4a06      	ldr	r2, [pc, #24]	; (3944 <recv+0x80>)
    392a:	e002      	b.n	3932 <recv+0x6e>
    392c:	4a05      	ldr	r2, [pc, #20]	; (3944 <recv+0x80>)
    392e:	e000      	b.n	3932 <recv+0x6e>
    3930:	4a04      	ldr	r2, [pc, #16]	; (3944 <recv+0x80>)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
    3932:	b210      	sxth	r0, r2
}
    3934:	b006      	add	sp, #24
    3936:	bd70      	pop	{r4, r5, r6, pc}
    3938:	20000cec 	.word	0x20000cec
    393c:	00001f69 	.word	0x00001f69
    3940:	0000fff2 	.word	0x0000fff2
    3944:	0000fffa 	.word	0x0000fffa

00003948 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3948:	b530      	push	{r4, r5, lr}
    394a:	b087      	sub	sp, #28
    394c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0)
    394e:	db23      	blt.n	3998 <close+0x50>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3950:	ab05      	add	r3, sp, #20
    3952:	7018      	strb	r0, [r3, #0]
		gastrSockets[sock].bIsUsed = 0;
    3954:	0043      	lsls	r3, r0, #1
    3956:	181b      	adds	r3, r3, r0
    3958:	009b      	lsls	r3, r3, #2
    395a:	4a11      	ldr	r2, [pc, #68]	; (39a0 <close+0x58>)
    395c:	18d3      	adds	r3, r2, r3
    395e:	2200      	movs	r2, #0
    3960:	719a      	strb	r2, [r3, #6]
		if(gastrSockets[sock].bIsSSLSock)
    3962:	79db      	ldrb	r3, [r3, #7]
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3964:	214e      	movs	r1, #78	; 0x4e
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
		gastrSockets[sock].bIsUsed = 0;
		if(gastrSockets[sock].bIsSSLSock)
    3966:	2b00      	cmp	r3, #0
    3968:	d100      	bne.n	396c <close+0x24>
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0)
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    396a:	2149      	movs	r1, #73	; 0x49
		gastrSockets[sock].bIsUsed = 0;
		if(gastrSockets[sock].bIsSSLSock)
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    396c:	2300      	movs	r3, #0
    396e:	9300      	str	r3, [sp, #0]
    3970:	9301      	str	r3, [sp, #4]
    3972:	9302      	str	r3, [sp, #8]
    3974:	2002      	movs	r0, #2
    3976:	aa05      	add	r2, sp, #20
    3978:	2304      	movs	r3, #4
    397a:	4d0a      	ldr	r5, [pc, #40]	; (39a4 <close+0x5c>)
    397c:	47a8      	blx	r5
    397e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3980:	d000      	beq.n	3984 <close+0x3c>
		{
			s8Ret = SOCK_ERR_INVALID;
    3982:	25f7      	movs	r5, #247	; 0xf7
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3984:	0060      	lsls	r0, r4, #1
    3986:	1900      	adds	r0, r0, r4
    3988:	0080      	lsls	r0, r0, #2
    398a:	4b05      	ldr	r3, [pc, #20]	; (39a0 <close+0x58>)
    398c:	18c0      	adds	r0, r0, r3
    398e:	2100      	movs	r1, #0
    3990:	220c      	movs	r2, #12
    3992:	4b05      	ldr	r3, [pc, #20]	; (39a8 <close+0x60>)
    3994:	4798      	blx	r3
    3996:	e000      	b.n	399a <close+0x52>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3998:	25fa      	movs	r5, #250	; 0xfa
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
    399a:	b268      	sxtb	r0, r5
}
    399c:	b007      	add	sp, #28
    399e:	bd30      	pop	{r4, r5, pc}
    39a0:	20000cec 	.word	0x20000cec
    39a4:	00001f69 	.word	0x00001f69
    39a8:	00001d3d 	.word	0x00001d3d

000039ac <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    39ac:	b510      	push	{r4, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	1c04      	adds	r4, r0, #0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    39b2:	4b0d      	ldr	r3, [pc, #52]	; (39e8 <gethostbyname+0x3c>)
    39b4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    39b6:	b2c3      	uxtb	r3, r0
    39b8:	2b40      	cmp	r3, #64	; 0x40
    39ba:	d80e      	bhi.n	39da <gethostbyname+0x2e>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    39bc:	23ff      	movs	r3, #255	; 0xff
    39be:	4018      	ands	r0, r3
    39c0:	1c43      	adds	r3, r0, #1
    39c2:	2100      	movs	r1, #0
    39c4:	9100      	str	r1, [sp, #0]
    39c6:	9101      	str	r1, [sp, #4]
    39c8:	9102      	str	r1, [sp, #8]
    39ca:	2002      	movs	r0, #2
    39cc:	21ca      	movs	r1, #202	; 0xca
    39ce:	1c22      	adds	r2, r4, #0
    39d0:	4c06      	ldr	r4, [pc, #24]	; (39ec <gethostbyname+0x40>)
    39d2:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    39d4:	2800      	cmp	r0, #0
    39d6:	d003      	beq.n	39e0 <gethostbyname+0x34>
    39d8:	e001      	b.n	39de <gethostbyname+0x32>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    39da:	20fa      	movs	r0, #250	; 0xfa
    39dc:	e000      	b.n	39e0 <gethostbyname+0x34>
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
		if(s8Err != SOCK_ERR_NO_ERROR)
		{
			s8Err = SOCK_ERR_INVALID;
    39de:	20f7      	movs	r0, #247	; 0xf7
		}
	}
	return s8Err;
    39e0:	b240      	sxtb	r0, r0
}
    39e2:	b004      	add	sp, #16
    39e4:	bd10      	pop	{r4, pc}
    39e6:	46c0      	nop			; (mov r8, r8)
    39e8:	00001d4d 	.word	0x00001d4d
    39ec:	00001f69 	.word	0x00001f69

000039f0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    39f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f2:	4647      	mov	r7, r8
    39f4:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    39f6:	0080      	lsls	r0, r0, #2
    39f8:	4b0d      	ldr	r3, [pc, #52]	; (3a30 <_tcc_interrupt_handler+0x40>)
    39fa:	58c6      	ldr	r6, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    39fc:	6833      	ldr	r3, [r6, #0]
    39fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a00:	6b72      	ldr	r2, [r6, #52]	; 0x34
    3a02:	4013      	ands	r3, r2
    3a04:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    3a06:	401a      	ands	r2, r3
    3a08:	4690      	mov	r8, r2
    3a0a:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    3a0c:	4f09      	ldr	r7, [pc, #36]	; (3a34 <_tcc_interrupt_handler+0x44>)
    3a0e:	59e5      	ldr	r5, [r4, r7]
    3a10:	4643      	mov	r3, r8
    3a12:	422b      	tst	r3, r5
    3a14:	d005      	beq.n	3a22 <_tcc_interrupt_handler+0x32>
    3a16:	1933      	adds	r3, r6, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    3a18:	685b      	ldr	r3, [r3, #4]
    3a1a:	1c30      	adds	r0, r6, #0
    3a1c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    3a1e:	6833      	ldr	r3, [r6, #0]
    3a20:	62dd      	str	r5, [r3, #44]	; 0x2c
    3a22:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    3a24:	2c30      	cmp	r4, #48	; 0x30
    3a26:	d1f2      	bne.n	3a0e <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    3a28:	bc04      	pop	{r2}
    3a2a:	4690      	mov	r8, r2
    3a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	20000d78 	.word	0x20000d78
    3a34:	00008e2c 	.word	0x00008e2c

00003a38 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    3a38:	b508      	push	{r3, lr}
    3a3a:	2000      	movs	r0, #0
    3a3c:	4b01      	ldr	r3, [pc, #4]	; (3a44 <TCC0_Handler+0xc>)
    3a3e:	4798      	blx	r3
    3a40:	bd08      	pop	{r3, pc}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	000039f1 	.word	0x000039f1

00003a48 <TCC1_Handler>:
    3a48:	b508      	push	{r3, lr}
    3a4a:	2001      	movs	r0, #1
    3a4c:	4b01      	ldr	r3, [pc, #4]	; (3a54 <TCC1_Handler+0xc>)
    3a4e:	4798      	blx	r3
    3a50:	bd08      	pop	{r3, pc}
    3a52:	46c0      	nop			; (mov r8, r8)
    3a54:	000039f1 	.word	0x000039f1

00003a58 <TCC2_Handler>:
    3a58:	b508      	push	{r3, lr}
    3a5a:	2002      	movs	r0, #2
    3a5c:	4b01      	ldr	r3, [pc, #4]	; (3a64 <TCC2_Handler+0xc>)
    3a5e:	4798      	blx	r3
    3a60:	bd08      	pop	{r3, pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	000039f1 	.word	0x000039f1

00003a68 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a6a:	465f      	mov	r7, fp
    3a6c:	4656      	mov	r6, sl
    3a6e:	464d      	mov	r5, r9
    3a70:	4644      	mov	r4, r8
    3a72:	b4f0      	push	{r4, r5, r6, r7}
    3a74:	b089      	sub	sp, #36	; 0x24
    3a76:	1c07      	adds	r7, r0, #0
    3a78:	1c0d      	adds	r5, r1, #0
    3a7a:	1c14      	adds	r4, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3a7c:	6039      	str	r1, [r7, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3a7e:	680b      	ldr	r3, [r1, #0]
    3a80:	0798      	lsls	r0, r3, #30
    3a82:	d400      	bmi.n	3a86 <spi_init+0x1e>
    3a84:	e08d      	b.n	3ba2 <spi_init+0x13a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    3a86:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3a88:	9103      	str	r1, [sp, #12]
    3a8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3a8c:	9204      	str	r2, [sp, #16]
    3a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3a90:	9305      	str	r3, [sp, #20]
    3a92:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3a94:	9006      	str	r0, [sp, #24]
    3a96:	2600      	movs	r6, #0
	} else {
		Assert(false);
		return NULL;
    3a98:	46b1      	mov	r9, r6
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    3a9a:	221f      	movs	r2, #31
    3a9c:	4690      	mov	r8, r2
    3a9e:	b2f1      	uxtb	r1, r6
    3aa0:	00b3      	lsls	r3, r6, #2
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3aa2:	aa03      	add	r2, sp, #12
    3aa4:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d102      	bne.n	3ab0 <spi_init+0x48>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3aaa:	1c28      	adds	r0, r5, #0
    3aac:	4b8d      	ldr	r3, [pc, #564]	; (3ce4 <spi_init+0x27c>)
    3aae:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    3ab0:	1c41      	adds	r1, r0, #1
    3ab2:	d029      	beq.n	3b08 <spi_init+0xa0>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3ab4:	0402      	lsls	r2, r0, #16
    3ab6:	0c12      	lsrs	r2, r2, #16
    3ab8:	4694      	mov	ip, r2
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    3aba:	0c03      	lsrs	r3, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3abc:	b2da      	uxtb	r2, r3
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3abe:	4649      	mov	r1, r9
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ac0:	0618      	lsls	r0, r3, #24
    3ac2:	d403      	bmi.n	3acc <spi_init+0x64>
		return &(ports[port_index]->Group[group_index]);
    3ac4:	0951      	lsrs	r1, r2, #5
    3ac6:	01c9      	lsls	r1, r1, #7
    3ac8:	4b87      	ldr	r3, [pc, #540]	; (3ce8 <spi_init+0x280>)
    3aca:	18c9      	adds	r1, r1, r3
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    3acc:	4640      	mov	r0, r8
    3ace:	4010      	ands	r0, r2

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3ad0:	180b      	adds	r3, r1, r0
    3ad2:	3340      	adds	r3, #64	; 0x40
    3ad4:	781b      	ldrb	r3, [r3, #0]
    3ad6:	469a      	mov	sl, r3
		return SYSTEM_PINMUX_GPIO;
    3ad8:	2380      	movs	r3, #128	; 0x80
    3ada:	469b      	mov	fp, r3
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3adc:	4653      	mov	r3, sl
    3ade:	07db      	lsls	r3, r3, #31
    3ae0:	d50c      	bpl.n	3afc <spi_init+0x94>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3ae2:	0840      	lsrs	r0, r0, #1
    3ae4:	1809      	adds	r1, r1, r0
    3ae6:	3130      	adds	r1, #48	; 0x30
    3ae8:	780b      	ldrb	r3, [r1, #0]
    3aea:	b2db      	uxtb	r3, r3

	if (pin_index & 1) {
    3aec:	07d0      	lsls	r0, r2, #31
    3aee:	d502      	bpl.n	3af6 <spi_init+0x8e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3af0:	091b      	lsrs	r3, r3, #4
    3af2:	469b      	mov	fp, r3
    3af4:	e002      	b.n	3afc <spi_init+0x94>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3af6:	220f      	movs	r2, #15
    3af8:	4013      	ands	r3, r2
    3afa:	469b      	mov	fp, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3afc:	45dc      	cmp	ip, fp
    3afe:	d003      	beq.n	3b08 <spi_init+0xa0>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    3b00:	2300      	movs	r3, #0
    3b02:	603b      	str	r3, [r7, #0]
			return STATUS_ERR_DENIED;
    3b04:	201c      	movs	r0, #28
    3b06:	e0e5      	b.n	3cd4 <spi_init+0x26c>
    3b08:	3601      	adds	r6, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3b0a:	2e04      	cmp	r6, #4
    3b0c:	d1c7      	bne.n	3a9e <spi_init+0x36>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    3b0e:	2013      	movs	r0, #19
    3b10:	4b76      	ldr	r3, [pc, #472]	; (3cec <spi_init+0x284>)
    3b12:	4798      	blx	r3
    3b14:	1c01      	adds	r1, r0, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    3b16:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    3b18:	2600      	movs	r6, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    3b1a:	2b01      	cmp	r3, #1
    3b1c:	d111      	bne.n	3b42 <spi_init+0xda>
		enum status_code error_code = _sercom_get_sync_baud_val(
    3b1e:	69a0      	ldr	r0, [r4, #24]
    3b20:	aa02      	add	r2, sp, #8
    3b22:	4b73      	ldr	r3, [pc, #460]	; (3cf0 <spi_init+0x288>)
    3b24:	4798      	blx	r3
    3b26:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3b28:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d000      	beq.n	3b30 <spi_init+0xc8>
    3b2e:	e0d1      	b.n	3cd4 <spi_init+0x26c>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3b30:	7b2b      	ldrb	r3, [r5, #12]
    3b32:	b2db      	uxtb	r3, r3
    3b34:	aa02      	add	r2, sp, #8
    3b36:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    3b38:	201c      	movs	r0, #28
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    3b3a:	429a      	cmp	r2, r3
    3b3c:	d000      	beq.n	3b40 <spi_init+0xd8>
    3b3e:	e0c9      	b.n	3cd4 <spi_init+0x26c>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    3b40:	260c      	movs	r6, #12
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    3b42:	68a2      	ldr	r2, [r4, #8]
    3b44:	6861      	ldr	r1, [r4, #4]
    3b46:	430a      	orrs	r2, r1

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3b48:	68e3      	ldr	r3, [r4, #12]
    3b4a:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3b4c:	4332      	orrs	r2, r6

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3b4e:	7c23      	ldrb	r3, [r4, #16]

	if (config->run_in_standby) {
    3b50:	7c61      	ldrb	r1, [r4, #17]
    3b52:	2900      	cmp	r1, #0
    3b54:	d001      	beq.n	3b5a <spi_init+0xf2>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3b56:	2180      	movs	r1, #128	; 0x80
    3b58:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    3b5a:	7ca1      	ldrb	r1, [r4, #18]
    3b5c:	2900      	cmp	r1, #0
    3b5e:	d002      	beq.n	3b66 <spi_init+0xfe>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3b60:	2180      	movs	r1, #128	; 0x80
    3b62:	0289      	lsls	r1, r1, #10
    3b64:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3b66:	7ce1      	ldrb	r1, [r4, #19]
    3b68:	2900      	cmp	r1, #0
    3b6a:	d002      	beq.n	3b72 <spi_init+0x10a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3b6c:	2180      	movs	r1, #128	; 0x80
    3b6e:	0089      	lsls	r1, r1, #2
    3b70:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3b72:	7d21      	ldrb	r1, [r4, #20]
    3b74:	2900      	cmp	r1, #0
    3b76:	d002      	beq.n	3b7e <spi_init+0x116>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3b78:	2180      	movs	r1, #128	; 0x80
    3b7a:	0189      	lsls	r1, r1, #6
    3b7c:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3b7e:	6829      	ldr	r1, [r5, #0]
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    3b80:	2002      	movs	r0, #2
    3b82:	4302      	orrs	r2, r0

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3b84:	428a      	cmp	r2, r1
    3b86:	d108      	bne.n	3b9a <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
    3b88:	686a      	ldr	r2, [r5, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3b8a:	429a      	cmp	r2, r3
    3b8c:	d105      	bne.n	3b9a <spi_init+0x132>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    3b8e:	7823      	ldrb	r3, [r4, #0]
    3b90:	717b      	strb	r3, [r7, #5]
		module->character_size = config->character_size;
    3b92:	7c23      	ldrb	r3, [r4, #16]
    3b94:	71bb      	strb	r3, [r7, #6]
		return STATUS_OK;
    3b96:	2000      	movs	r0, #0
    3b98:	e09c      	b.n	3cd4 <spi_init+0x26c>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    3b9a:	2300      	movs	r3, #0
    3b9c:	603b      	str	r3, [r7, #0]

	return STATUS_ERR_DENIED;
    3b9e:	201c      	movs	r0, #28
    3ba0:	e098      	b.n	3cd4 <spi_init+0x26c>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3ba2:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3ba4:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3ba6:	07d9      	lsls	r1, r3, #31
    3ba8:	d500      	bpl.n	3bac <spi_init+0x144>
    3baa:	e093      	b.n	3cd4 <spi_init+0x26c>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3bac:	1c28      	adds	r0, r5, #0
    3bae:	4b51      	ldr	r3, [pc, #324]	; (3cf4 <spi_init+0x28c>)
    3bb0:	4798      	blx	r3
    3bb2:	4b51      	ldr	r3, [pc, #324]	; (3cf8 <spi_init+0x290>)
    3bb4:	6a19      	ldr	r1, [r3, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3bb6:	1c82      	adds	r2, r0, #2
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3bb8:	2601      	movs	r6, #1
    3bba:	4096      	lsls	r6, r2
    3bbc:	1c32      	adds	r2, r6, #0
    3bbe:	430a      	orrs	r2, r1
    3bc0:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3bc2:	a907      	add	r1, sp, #28
    3bc4:	2624      	movs	r6, #36	; 0x24
    3bc6:	5da3      	ldrb	r3, [r4, r6]
    3bc8:	700b      	strb	r3, [r1, #0]
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3bca:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3bcc:	b2c0      	uxtb	r0, r0
    3bce:	4680      	mov	r8, r0
    3bd0:	4b4a      	ldr	r3, [pc, #296]	; (3cfc <spi_init+0x294>)
    3bd2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3bd4:	4640      	mov	r0, r8
    3bd6:	4b4a      	ldr	r3, [pc, #296]	; (3d00 <spi_init+0x298>)
    3bd8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3bda:	5da0      	ldrb	r0, [r4, r6]
    3bdc:	2100      	movs	r1, #0
    3bde:	4b49      	ldr	r3, [pc, #292]	; (3d04 <spi_init+0x29c>)
    3be0:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    3be2:	7823      	ldrb	r3, [r4, #0]
    3be4:	2b01      	cmp	r3, #1
    3be6:	d103      	bne.n	3bf0 <spi_init+0x188>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    3be8:	682a      	ldr	r2, [r5, #0]
    3bea:	230c      	movs	r3, #12
    3bec:	4313      	orrs	r3, r2
    3bee:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3bf0:	683e      	ldr	r6, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3bf2:	ab02      	add	r3, sp, #8
    3bf4:	2280      	movs	r2, #128	; 0x80
    3bf6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3bf8:	2200      	movs	r2, #0
    3bfa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3bfc:	2101      	movs	r1, #1
    3bfe:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    3c00:	70da      	strb	r2, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    3c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c04:	9203      	str	r2, [sp, #12]
    3c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3c08:	9304      	str	r3, [sp, #16]
    3c0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3c0c:	9005      	str	r0, [sp, #20]
    3c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3c10:	9106      	str	r1, [sp, #24]
    3c12:	2500      	movs	r5, #0
    3c14:	b2e9      	uxtb	r1, r5
    3c16:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3c18:	aa03      	add	r2, sp, #12
    3c1a:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    3c1c:	2800      	cmp	r0, #0
    3c1e:	d102      	bne.n	3c26 <spi_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3c20:	1c30      	adds	r0, r6, #0
    3c22:	4a30      	ldr	r2, [pc, #192]	; (3ce4 <spi_init+0x27c>)
    3c24:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3c26:	1c43      	adds	r3, r0, #1
    3c28:	d006      	beq.n	3c38 <spi_init+0x1d0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3c2a:	4669      	mov	r1, sp
    3c2c:	7208      	strb	r0, [r1, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3c2e:	0c00      	lsrs	r0, r0, #16
    3c30:	b2c0      	uxtb	r0, r0
    3c32:	a902      	add	r1, sp, #8
    3c34:	4a34      	ldr	r2, [pc, #208]	; (3d08 <spi_init+0x2a0>)
    3c36:	4790      	blx	r2
    3c38:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3c3a:	2d04      	cmp	r5, #4
    3c3c:	d1ea      	bne.n	3c14 <spi_init+0x1ac>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    3c3e:	7823      	ldrb	r3, [r4, #0]
    3c40:	717b      	strb	r3, [r7, #5]
	module->character_size   = config->character_size;
    3c42:	7c23      	ldrb	r3, [r4, #16]
    3c44:	71bb      	strb	r3, [r7, #6]
	module->receiver_enabled = config->receiver_enable;
    3c46:	7ca3      	ldrb	r3, [r4, #18]
    3c48:	71fb      	strb	r3, [r7, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3c4a:	7d23      	ldrb	r3, [r4, #20]
    3c4c:	723b      	strb	r3, [r7, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3c4e:	2200      	movs	r2, #0
    3c50:	466b      	mov	r3, sp
    3c52:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3c54:	7823      	ldrb	r3, [r4, #0]
    3c56:	2b01      	cmp	r3, #1
    3c58:	d114      	bne.n	3c84 <spi_init+0x21c>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3c5a:	6838      	ldr	r0, [r7, #0]
    3c5c:	4b25      	ldr	r3, [pc, #148]	; (3cf4 <spi_init+0x28c>)
    3c5e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3c60:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3c62:	b2c0      	uxtb	r0, r0
    3c64:	4b21      	ldr	r3, [pc, #132]	; (3cec <spi_init+0x284>)
    3c66:	4798      	blx	r3
    3c68:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3c6a:	69a0      	ldr	r0, [r4, #24]
    3c6c:	466a      	mov	r2, sp
    3c6e:	3206      	adds	r2, #6
    3c70:	4b1f      	ldr	r3, [pc, #124]	; (3cf0 <spi_init+0x288>)
    3c72:	4798      	blx	r3
    3c74:	1c03      	adds	r3, r0, #0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3c76:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3c78:	2b00      	cmp	r3, #0
    3c7a:	d12b      	bne.n	3cd4 <spi_init+0x26c>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3c7c:	466b      	mov	r3, sp
    3c7e:	3306      	adds	r3, #6
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	7333      	strb	r3, [r6, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3c84:	68a2      	ldr	r2, [r4, #8]
    3c86:	6863      	ldr	r3, [r4, #4]
    3c88:	431a      	orrs	r2, r3

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3c8a:	68e0      	ldr	r0, [r4, #12]
    3c8c:	4302      	orrs	r2, r0

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3c8e:	7c23      	ldrb	r3, [r4, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3c90:	7c61      	ldrb	r1, [r4, #17]
    3c92:	2900      	cmp	r1, #0
    3c94:	d103      	bne.n	3c9e <spi_init+0x236>
    3c96:	491d      	ldr	r1, [pc, #116]	; (3d0c <spi_init+0x2a4>)
    3c98:	7889      	ldrb	r1, [r1, #2]
    3c9a:	0788      	lsls	r0, r1, #30
    3c9c:	d501      	bpl.n	3ca2 <spi_init+0x23a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3c9e:	2180      	movs	r1, #128	; 0x80
    3ca0:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    3ca2:	7ca1      	ldrb	r1, [r4, #18]
    3ca4:	2900      	cmp	r1, #0
    3ca6:	d002      	beq.n	3cae <spi_init+0x246>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3ca8:	2180      	movs	r1, #128	; 0x80
    3caa:	0289      	lsls	r1, r1, #10
    3cac:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3cae:	7ce1      	ldrb	r1, [r4, #19]
    3cb0:	2900      	cmp	r1, #0
    3cb2:	d002      	beq.n	3cba <spi_init+0x252>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3cb4:	2180      	movs	r1, #128	; 0x80
    3cb6:	0089      	lsls	r1, r1, #2
    3cb8:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3cba:	7d21      	ldrb	r1, [r4, #20]
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d002      	beq.n	3cc6 <spi_init+0x25e>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3cc0:	2180      	movs	r1, #128	; 0x80
    3cc2:	0189      	lsls	r1, r1, #6
    3cc4:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3cc6:	6831      	ldr	r1, [r6, #0]
    3cc8:	430a      	orrs	r2, r1
    3cca:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3ccc:	6872      	ldr	r2, [r6, #4]
    3cce:	4313      	orrs	r3, r2
    3cd0:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    3cd2:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3cd4:	b009      	add	sp, #36	; 0x24
    3cd6:	bc3c      	pop	{r2, r3, r4, r5}
    3cd8:	4690      	mov	r8, r2
    3cda:	4699      	mov	r9, r3
    3cdc:	46a2      	mov	sl, r4
    3cde:	46ab      	mov	fp, r5
    3ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	00004401 	.word	0x00004401
    3ce8:	41004400 	.word	0x41004400
    3cec:	00004fbd 	.word	0x00004fbd
    3cf0:	000041d5 	.word	0x000041d5
    3cf4:	0000458d 	.word	0x0000458d
    3cf8:	40000400 	.word	0x40000400
    3cfc:	00004fa1 	.word	0x00004fa1
    3d00:	00004f15 	.word	0x00004f15
    3d04:	000043b1 	.word	0x000043b1
    3d08:	0000507d 	.word	0x0000507d
    3d0c:	41002000 	.word	0x41002000

00003d10 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3d10:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3d12:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3d14:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3d16:	2c01      	cmp	r4, #1
    3d18:	d16c      	bne.n	3df4 <spi_select_slave+0xe4>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3d1a:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3d1c:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    3d1e:	2c00      	cmp	r4, #0
    3d20:	d168      	bne.n	3df4 <spi_select_slave+0xe4>
#  endif
	{
		if (select) {
    3d22:	2a00      	cmp	r2, #0
    3d24:	d057      	beq.n	3dd6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3d26:	784b      	ldrb	r3, [r1, #1]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d044      	beq.n	3db6 <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d2c:	6802      	ldr	r2, [r0, #0]
    3d2e:	7e13      	ldrb	r3, [r2, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3d30:	07dc      	lsls	r4, r3, #31
    3d32:	d40f      	bmi.n	3d54 <spi_select_slave+0x44>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3d34:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d36:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3d38:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d3a:	2900      	cmp	r1, #0
    3d3c:	d103      	bne.n	3d46 <spi_select_slave+0x36>
		return &(ports[port_index]->Group[group_index]);
    3d3e:	095a      	lsrs	r2, r3, #5
    3d40:	01d2      	lsls	r2, r2, #7
    3d42:	492d      	ldr	r1, [pc, #180]	; (3df8 <spi_select_slave+0xe8>)
    3d44:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d46:	211f      	movs	r1, #31
    3d48:	400b      	ands	r3, r1
    3d4a:	2101      	movs	r1, #1
    3d4c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3d4e:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    3d50:	2305      	movs	r3, #5
    3d52:	e04f      	b.n	3df4 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3d54:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d56:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3d58:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3d5a:	2c00      	cmp	r4, #0
    3d5c:	d103      	bne.n	3d66 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    3d5e:	095a      	lsrs	r2, r3, #5
    3d60:	01d2      	lsls	r2, r2, #7
    3d62:	4c25      	ldr	r4, [pc, #148]	; (3df8 <spi_select_slave+0xe8>)
    3d64:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d66:	241f      	movs	r4, #31
    3d68:	4023      	ands	r3, r4
    3d6a:	2401      	movs	r4, #1
    3d6c:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d6e:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    3d70:	7889      	ldrb	r1, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d72:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d74:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3d76:	07d4      	lsls	r4, r2, #31
    3d78:	d500      	bpl.n	3d7c <spi_select_slave+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d7a:	6299      	str	r1, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    3d7c:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3d7e:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    3d80:	2a00      	cmp	r2, #0
    3d82:	d137      	bne.n	3df4 <spi_select_slave+0xe4>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d84:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d86:	2104      	movs	r1, #4
    3d88:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3d8a:	420b      	tst	r3, r1
    3d8c:	d0fc      	beq.n	3d88 <spi_select_slave+0x78>
    3d8e:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3d90:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3d92:	074c      	lsls	r4, r1, #29
    3d94:	d52e      	bpl.n	3df4 <spi_select_slave+0xe4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d96:	8b53      	ldrh	r3, [r2, #26]
    3d98:	0759      	lsls	r1, r3, #29
    3d9a:	d503      	bpl.n	3da4 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3d9c:	8b51      	ldrh	r1, [r2, #26]
    3d9e:	2304      	movs	r3, #4
    3da0:	430b      	orrs	r3, r1
    3da2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3da4:	7983      	ldrb	r3, [r0, #6]
    3da6:	2b01      	cmp	r3, #1
    3da8:	d102      	bne.n	3db0 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3daa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3dac:	2300      	movs	r3, #0
    3dae:	e021      	b.n	3df4 <spi_select_slave+0xe4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3db0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3db2:	2300      	movs	r3, #0
    3db4:	e01e      	b.n	3df4 <spi_select_slave+0xe4>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3db6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3db8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3dba:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3dbc:	2900      	cmp	r1, #0
    3dbe:	d103      	bne.n	3dc8 <spi_select_slave+0xb8>
		return &(ports[port_index]->Group[group_index]);
    3dc0:	095a      	lsrs	r2, r3, #5
    3dc2:	01d2      	lsls	r2, r2, #7
    3dc4:	4c0c      	ldr	r4, [pc, #48]	; (3df8 <spi_select_slave+0xe8>)
    3dc6:	1912      	adds	r2, r2, r4
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3dc8:	211f      	movs	r1, #31
    3dca:	400b      	ands	r3, r1
    3dcc:	2101      	movs	r1, #1
    3dce:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3dd0:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    3dd2:	2300      	movs	r3, #0
    3dd4:	e00e      	b.n	3df4 <spi_select_slave+0xe4>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    3dd6:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3dd8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3dda:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3ddc:	2900      	cmp	r1, #0
    3dde:	d103      	bne.n	3de8 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    3de0:	095a      	lsrs	r2, r3, #5
    3de2:	01d2      	lsls	r2, r2, #7
    3de4:	4904      	ldr	r1, [pc, #16]	; (3df8 <spi_select_slave+0xe8>)
    3de6:	1852      	adds	r2, r2, r1
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3de8:	211f      	movs	r1, #31
    3dea:	400b      	ands	r3, r1
    3dec:	2101      	movs	r1, #1
    3dee:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3df0:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    3df2:	2300      	movs	r3, #0
}
    3df4:	1c18      	adds	r0, r3, #0
    3df6:	bd10      	pop	{r4, pc}
    3df8:	41004400 	.word	0x41004400

00003dfc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    3dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dfe:	465f      	mov	r7, fp
    3e00:	4656      	mov	r6, sl
    3e02:	464d      	mov	r5, r9
    3e04:	4644      	mov	r4, r8
    3e06:	b4f0      	push	{r4, r5, r6, r7}
    3e08:	1c06      	adds	r6, r0, #0
    3e0a:	468b      	mov	fp, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    3e0c:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    3e0e:	2a00      	cmp	r2, #0
    3e10:	d04f      	beq.n	3eb2 <spi_write_buffer_wait+0xb6>
    3e12:	e044      	b.n	3e9e <spi_write_buffer_wait+0xa2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e14:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3e16:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    3e18:	4223      	tst	r3, r4
    3e1a:	d0fc      	beq.n	3e16 <spi_write_buffer_wait+0x1a>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3e1c:	1c43      	adds	r3, r0, #1
    3e1e:	b29b      	uxth	r3, r3
    3e20:	469a      	mov	sl, r3
    3e22:	4659      	mov	r1, fp
    3e24:	5c09      	ldrb	r1, [r1, r0]
    3e26:	4689      	mov	r9, r1

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e28:	79b3      	ldrb	r3, [r6, #6]
    3e2a:	2b01      	cmp	r3, #1
    3e2c:	d001      	beq.n	3e32 <spi_write_buffer_wait+0x36>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    3e2e:	4650      	mov	r0, sl
    3e30:	e007      	b.n	3e42 <spi_write_buffer_wait+0x46>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    3e32:	3002      	adds	r0, #2
    3e34:	b280      	uxth	r0, r0
    3e36:	465b      	mov	r3, fp
    3e38:	4453      	add	r3, sl
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	021b      	lsls	r3, r3, #8
    3e3e:	4319      	orrs	r1, r3
    3e40:	4689      	mov	r9, r1
    3e42:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3e44:	4223      	tst	r3, r4
    3e46:	d003      	beq.n	3e50 <spi_write_buffer_wait+0x54>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3e48:	464b      	mov	r3, r9
    3e4a:	05db      	lsls	r3, r3, #23
    3e4c:	0ddb      	lsrs	r3, r3, #23
    3e4e:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    3e50:	79f3      	ldrb	r3, [r6, #7]
    3e52:	2b00      	cmp	r3, #0
    3e54:	d014      	beq.n	3e80 <spi_write_buffer_wait+0x84>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e56:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3e58:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    3e5a:	422b      	tst	r3, r5
    3e5c:	d0fc      	beq.n	3e58 <spi_write_buffer_wait+0x5c>
    3e5e:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3e60:	422b      	tst	r3, r5
    3e62:	d00d      	beq.n	3e80 <spi_write_buffer_wait+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e64:	8b53      	ldrh	r3, [r2, #26]
    3e66:	422b      	tst	r3, r5
    3e68:	d004      	beq.n	3e74 <spi_write_buffer_wait+0x78>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3e6a:	8b51      	ldrh	r1, [r2, #26]
    3e6c:	4643      	mov	r3, r8
    3e6e:	4319      	orrs	r1, r3
    3e70:	b28b      	uxth	r3, r1
    3e72:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e74:	79b3      	ldrb	r3, [r6, #6]
    3e76:	2b01      	cmp	r3, #1
    3e78:	d101      	bne.n	3e7e <spi_write_buffer_wait+0x82>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3e7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e7c:	e000      	b.n	3e80 <spi_write_buffer_wait+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3e7e:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    3e80:	3f01      	subs	r7, #1
    3e82:	b2bf      	uxth	r7, r7
    3e84:	4567      	cmp	r7, ip
    3e86:	d1c5      	bne.n	3e14 <spi_write_buffer_wait+0x18>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    3e88:	7973      	ldrb	r3, [r6, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    3e8a:	2000      	movs	r0, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    3e8c:	2b01      	cmp	r3, #1
    3e8e:	d110      	bne.n	3eb2 <spi_write_buffer_wait+0xb6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e90:	6831      	ldr	r1, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3e92:	2202      	movs	r2, #2
    3e94:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    3e96:	4213      	tst	r3, r2
    3e98:	d0fc      	beq.n	3e94 <spi_write_buffer_wait+0x98>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    3e9a:	2000      	movs	r0, #0
    3e9c:	e009      	b.n	3eb2 <spi_write_buffer_wait+0xb6>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    3e9e:	3a01      	subs	r2, #1
    3ea0:	b297      	uxth	r7, r2
    3ea2:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ea4:	2401      	movs	r4, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ea6:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    3ea8:	2104      	movs	r1, #4
    3eaa:	4688      	mov	r8, r1
    3eac:	4b04      	ldr	r3, [pc, #16]	; (3ec0 <spi_write_buffer_wait+0xc4>)
    3eae:	469c      	mov	ip, r3
    3eb0:	e7b0      	b.n	3e14 <spi_write_buffer_wait+0x18>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    3eb2:	bc3c      	pop	{r2, r3, r4, r5}
    3eb4:	4690      	mov	r8, r2
    3eb6:	4699      	mov	r9, r3
    3eb8:	46a2      	mov	sl, r4
    3eba:	46ab      	mov	fp, r5
    3ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	0000ffff 	.word	0x0000ffff

00003ec4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    3ec4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    3ec6:	2000      	movs	r0, #0
    3ec8:	4b08      	ldr	r3, [pc, #32]	; (3eec <delay_init+0x28>)
    3eca:	4798      	blx	r3
	cycles_per_ms /= 1000;
    3ecc:	4c08      	ldr	r4, [pc, #32]	; (3ef0 <delay_init+0x2c>)
    3ece:	21fa      	movs	r1, #250	; 0xfa
    3ed0:	0089      	lsls	r1, r1, #2
    3ed2:	47a0      	blx	r4
    3ed4:	4b07      	ldr	r3, [pc, #28]	; (3ef4 <delay_init+0x30>)
    3ed6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    3ed8:	21fa      	movs	r1, #250	; 0xfa
    3eda:	0089      	lsls	r1, r1, #2
    3edc:	47a0      	blx	r4
    3ede:	4b06      	ldr	r3, [pc, #24]	; (3ef8 <delay_init+0x34>)
    3ee0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    3ee2:	2205      	movs	r2, #5
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <delay_init+0x38>)
    3ee6:	601a      	str	r2, [r3, #0]
}
    3ee8:	bd10      	pop	{r4, pc}
    3eea:	46c0      	nop			; (mov r8, r8)
    3eec:	00004e89 	.word	0x00004e89
    3ef0:	000059c9 	.word	0x000059c9
    3ef4:	20000408 	.word	0x20000408
    3ef8:	20000404 	.word	0x20000404
    3efc:	e000e010 	.word	0xe000e010

00003f00 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    3f00:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    3f02:	4b08      	ldr	r3, [pc, #32]	; (3f24 <delay_cycles_ms+0x24>)
    3f04:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    3f06:	4a08      	ldr	r2, [pc, #32]	; (3f28 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    3f08:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f0a:	2180      	movs	r1, #128	; 0x80
    3f0c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    3f0e:	e006      	b.n	3f1e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    3f10:	2c00      	cmp	r4, #0
    3f12:	d004      	beq.n	3f1e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    3f14:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    3f16:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3f18:	6813      	ldr	r3, [r2, #0]
    3f1a:	420b      	tst	r3, r1
    3f1c:	d0fc      	beq.n	3f18 <delay_cycles_ms+0x18>
    3f1e:	3801      	subs	r0, #1
    3f20:	d2f6      	bcs.n	3f10 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    3f22:	bd30      	pop	{r4, r5, pc}
    3f24:	20000408 	.word	0x20000408
    3f28:	e000e010 	.word	0xe000e010

00003f2c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3f2c:	4b0c      	ldr	r3, [pc, #48]	; (3f60 <cpu_irq_enter_critical+0x34>)
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	2b00      	cmp	r3, #0
    3f32:	d110      	bne.n	3f56 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f34:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d109      	bne.n	3f50 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3f3c:	b672      	cpsid	i
    3f3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3f42:	2200      	movs	r2, #0
    3f44:	4b07      	ldr	r3, [pc, #28]	; (3f64 <cpu_irq_enter_critical+0x38>)
    3f46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3f48:	2201      	movs	r2, #1
    3f4a:	4b07      	ldr	r3, [pc, #28]	; (3f68 <cpu_irq_enter_critical+0x3c>)
    3f4c:	701a      	strb	r2, [r3, #0]
    3f4e:	e002      	b.n	3f56 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3f50:	2200      	movs	r2, #0
    3f52:	4b05      	ldr	r3, [pc, #20]	; (3f68 <cpu_irq_enter_critical+0x3c>)
    3f54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3f56:	4b02      	ldr	r3, [pc, #8]	; (3f60 <cpu_irq_enter_critical+0x34>)
    3f58:	681a      	ldr	r2, [r3, #0]
    3f5a:	3201      	adds	r2, #1
    3f5c:	601a      	str	r2, [r3, #0]
}
    3f5e:	4770      	bx	lr
    3f60:	20000bb0 	.word	0x20000bb0
    3f64:	2000040c 	.word	0x2000040c
    3f68:	20000bb4 	.word	0x20000bb4

00003f6c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3f6c:	4b08      	ldr	r3, [pc, #32]	; (3f90 <cpu_irq_leave_critical+0x24>)
    3f6e:	681a      	ldr	r2, [r3, #0]
    3f70:	3a01      	subs	r2, #1
    3f72:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3f74:	681b      	ldr	r3, [r3, #0]
    3f76:	2b00      	cmp	r3, #0
    3f78:	d109      	bne.n	3f8e <cpu_irq_leave_critical+0x22>
    3f7a:	4b06      	ldr	r3, [pc, #24]	; (3f94 <cpu_irq_leave_critical+0x28>)
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d005      	beq.n	3f8e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3f82:	2201      	movs	r2, #1
    3f84:	4b04      	ldr	r3, [pc, #16]	; (3f98 <cpu_irq_leave_critical+0x2c>)
    3f86:	701a      	strb	r2, [r3, #0]
    3f88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f8c:	b662      	cpsie	i
	}
}
    3f8e:	4770      	bx	lr
    3f90:	20000bb0 	.word	0x20000bb0
    3f94:	20000bb4 	.word	0x20000bb4
    3f98:	2000040c 	.word	0x2000040c

00003f9c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3fa0:	ac01      	add	r4, sp, #4
    3fa2:	2501      	movs	r5, #1
    3fa4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3fa6:	2700      	movs	r7, #0
    3fa8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3faa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3fac:	203e      	movs	r0, #62	; 0x3e
    3fae:	1c21      	adds	r1, r4, #0
    3fb0:	4e06      	ldr	r6, [pc, #24]	; (3fcc <system_board_init+0x30>)
    3fb2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3fb4:	2280      	movs	r2, #128	; 0x80
    3fb6:	05d2      	lsls	r2, r2, #23
    3fb8:	4b05      	ldr	r3, [pc, #20]	; (3fd0 <system_board_init+0x34>)
    3fba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3fbc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3fbe:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3fc0:	200f      	movs	r0, #15
    3fc2:	1c21      	adds	r1, r4, #0
    3fc4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    3fc6:	b003      	add	sp, #12
    3fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fca:	46c0      	nop			; (mov r8, r8)
    3fcc:	000041b1 	.word	0x000041b1
    3fd0:	41004480 	.word	0x41004480

00003fd4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3fd4:	4b05      	ldr	r3, [pc, #20]	; (3fec <_extint_enable+0x18>)
    3fd6:	7819      	ldrb	r1, [r3, #0]
    3fd8:	2202      	movs	r2, #2
    3fda:	430a      	orrs	r2, r1
    3fdc:	701a      	strb	r2, [r3, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3fde:	1c1a      	adds	r2, r3, #0
    3fe0:	7853      	ldrb	r3, [r2, #1]
    3fe2:	b25b      	sxtb	r3, r3
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	dbfb      	blt.n	3fe0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3fe8:	4770      	bx	lr
    3fea:	46c0      	nop			; (mov r8, r8)
    3fec:	40001800 	.word	0x40001800

00003ff0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3ff0:	b500      	push	{lr}
    3ff2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ff4:	4b12      	ldr	r3, [pc, #72]	; (4040 <_system_extint_init+0x50>)
    3ff6:	6999      	ldr	r1, [r3, #24]
    3ff8:	2240      	movs	r2, #64	; 0x40
    3ffa:	430a      	orrs	r2, r1
    3ffc:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3ffe:	a901      	add	r1, sp, #4
    4000:	2300      	movs	r3, #0
    4002:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4004:	2005      	movs	r0, #5
    4006:	4b0f      	ldr	r3, [pc, #60]	; (4044 <_system_extint_init+0x54>)
    4008:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    400a:	2005      	movs	r0, #5
    400c:	4b0e      	ldr	r3, [pc, #56]	; (4048 <_system_extint_init+0x58>)
    400e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4010:	4b0e      	ldr	r3, [pc, #56]	; (404c <_system_extint_init+0x5c>)
    4012:	7819      	ldrb	r1, [r3, #0]
    4014:	2201      	movs	r2, #1
    4016:	430a      	orrs	r2, r1
    4018:	701a      	strb	r2, [r3, #0]
    401a:	1c1a      	adds	r2, r3, #0
    401c:	7853      	ldrb	r3, [r2, #1]
    401e:	b25b      	sxtb	r3, r3
    4020:	2b00      	cmp	r3, #0
    4022:	dbfb      	blt.n	401c <_system_extint_init+0x2c>
    4024:	4b0a      	ldr	r3, [pc, #40]	; (4050 <_system_extint_init+0x60>)
    4026:	1c19      	adds	r1, r3, #0
    4028:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    402a:	2200      	movs	r2, #0
    402c:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    402e:	428b      	cmp	r3, r1
    4030:	d1fc      	bne.n	402c <_system_extint_init+0x3c>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4032:	2210      	movs	r2, #16
    4034:	4b07      	ldr	r3, [pc, #28]	; (4054 <_system_extint_init+0x64>)
    4036:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4038:	4b07      	ldr	r3, [pc, #28]	; (4058 <_system_extint_init+0x68>)
    403a:	4798      	blx	r3
}
    403c:	b003      	add	sp, #12
    403e:	bd00      	pop	{pc}
    4040:	40000400 	.word	0x40000400
    4044:	00004fa1 	.word	0x00004fa1
    4048:	00004f15 	.word	0x00004f15
    404c:	40001800 	.word	0x40001800
    4050:	20000d84 	.word	0x20000d84
    4054:	e000e100 	.word	0xe000e100
    4058:	00003fd5 	.word	0x00003fd5

0000405c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    405c:	b5f0      	push	{r4, r5, r6, r7, lr}
    405e:	b083      	sub	sp, #12
    4060:	1c05      	adds	r5, r0, #0
    4062:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4064:	a901      	add	r1, sp, #4
    4066:	2300      	movs	r3, #0
    4068:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    406a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    406c:	6863      	ldr	r3, [r4, #4]
    406e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4070:	7a23      	ldrb	r3, [r4, #8]
    4072:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4074:	7820      	ldrb	r0, [r4, #0]
    4076:	4b15      	ldr	r3, [pc, #84]	; (40cc <extint_chan_set_config+0x70>)
    4078:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    407a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    407c:	2d1f      	cmp	r5, #31
    407e:	d800      	bhi.n	4082 <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    4080:	4b13      	ldr	r3, [pc, #76]	; (40d0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4082:	2107      	movs	r1, #7
    4084:	4029      	ands	r1, r5
    4086:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4088:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    408a:	7aa2      	ldrb	r2, [r4, #10]
    408c:	2a00      	cmp	r2, #0
    408e:	d001      	beq.n	4094 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    4090:	2208      	movs	r2, #8
    4092:	4310      	orrs	r0, r2
    4094:	08ea      	lsrs	r2, r5, #3
    4096:	0092      	lsls	r2, r2, #2
    4098:	189a      	adds	r2, r3, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    409a:	6996      	ldr	r6, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    409c:	4088      	lsls	r0, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    409e:	270f      	movs	r7, #15
    40a0:	408f      	lsls	r7, r1
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40a2:	43be      	bics	r6, r7
    40a4:	1c31      	adds	r1, r6, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    40a6:	4301      	orrs	r1, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40a8:	6191      	str	r1, [r2, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    40aa:	7a62      	ldrb	r2, [r4, #9]
    40ac:	2a00      	cmp	r2, #0
    40ae:	d006      	beq.n	40be <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    40b0:	695a      	ldr	r2, [r3, #20]
    40b2:	2101      	movs	r1, #1
    40b4:	40a9      	lsls	r1, r5
    40b6:	1c0d      	adds	r5, r1, #0
    40b8:	4315      	orrs	r5, r2
    40ba:	615d      	str	r5, [r3, #20]
    40bc:	e004      	b.n	40c8 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    40be:	695a      	ldr	r2, [r3, #20]
    40c0:	2101      	movs	r1, #1
    40c2:	40a9      	lsls	r1, r5
    40c4:	438a      	bics	r2, r1
    40c6:	615a      	str	r2, [r3, #20]
	}
}
    40c8:	b003      	add	sp, #12
    40ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40cc:	0000507d 	.word	0x0000507d
    40d0:	40001800 	.word	0x40001800

000040d4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40d4:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    40d6:	2a00      	cmp	r2, #0
    40d8:	d10f      	bne.n	40fa <extint_register_callback+0x26>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    40da:	008b      	lsls	r3, r1, #2
    40dc:	4a08      	ldr	r2, [pc, #32]	; (4100 <extint_register_callback+0x2c>)
    40de:	589a      	ldr	r2, [r3, r2]
    40e0:	2a00      	cmp	r2, #0
    40e2:	d104      	bne.n	40ee <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    40e4:	1c19      	adds	r1, r3, #0
    40e6:	4b06      	ldr	r3, [pc, #24]	; (4100 <extint_register_callback+0x2c>)
    40e8:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    40ea:	2300      	movs	r3, #0
    40ec:	e005      	b.n	40fa <extint_register_callback+0x26>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    40ee:	231d      	movs	r3, #29

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    40f0:	1a12      	subs	r2, r2, r0
    40f2:	1e50      	subs	r0, r2, #1
    40f4:	4182      	sbcs	r2, r0
    40f6:	4252      	negs	r2, r2
    40f8:	4013      	ands	r3, r2
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    40fa:	1c18      	adds	r0, r3, #0
    40fc:	4770      	bx	lr
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	20000d84 	.word	0x20000d84

00004104 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4104:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4106:	2900      	cmp	r1, #0
    4108:	d107      	bne.n	411a <extint_chan_enable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    410a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    410c:	281f      	cmp	r0, #31
    410e:	d800      	bhi.n	4112 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    4110:	4b03      	ldr	r3, [pc, #12]	; (4120 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    4112:	2201      	movs	r2, #1
    4114:	4082      	lsls	r2, r0
    4116:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4118:	2300      	movs	r3, #0
}
    411a:	1c18      	adds	r0, r3, #0
    411c:	4770      	bx	lr
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	40001800 	.word	0x40001800

00004124 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4124:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4126:	2900      	cmp	r1, #0
    4128:	d107      	bne.n	413a <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    412a:	2300      	movs	r3, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    412c:	281f      	cmp	r0, #31
    412e:	d800      	bhi.n	4132 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    4130:	4b03      	ldr	r3, [pc, #12]	; (4140 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    4132:	2201      	movs	r2, #1
    4134:	4082      	lsls	r2, r0
    4136:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4138:	2300      	movs	r3, #0
}
    413a:	1c18      	adds	r0, r3, #0
    413c:	4770      	bx	lr
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	40001800 	.word	0x40001800

00004144 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4144:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4146:	2200      	movs	r2, #0
    4148:	4b16      	ldr	r3, [pc, #88]	; (41a4 <EIC_Handler+0x60>)
    414a:	701a      	strb	r2, [r3, #0]
    414c:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    414e:	261f      	movs	r6, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4150:	4d15      	ldr	r5, [pc, #84]	; (41a8 <EIC_Handler+0x64>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4152:	4c14      	ldr	r4, [pc, #80]	; (41a4 <EIC_Handler+0x60>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    4154:	2b1f      	cmp	r3, #31
    4156:	d910      	bls.n	417a <EIC_Handler+0x36>
    4158:	e019      	b.n	418e <EIC_Handler+0x4a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    415a:	4914      	ldr	r1, [pc, #80]	; (41ac <EIC_Handler+0x68>)
    415c:	e000      	b.n	4160 <EIC_Handler+0x1c>
	} else {
		Assert(false);
		return NULL;
    415e:	2100      	movs	r1, #0
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4160:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4162:	009b      	lsls	r3, r3, #2
    4164:	595b      	ldr	r3, [r3, r5]
    4166:	2b00      	cmp	r3, #0
    4168:	d000      	beq.n	416c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    416a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    416c:	7823      	ldrb	r3, [r4, #0]
    416e:	3301      	adds	r3, #1
    4170:	b2db      	uxtb	r3, r3
    4172:	7023      	strb	r3, [r4, #0]
    4174:	2b0f      	cmp	r3, #15
    4176:	d814      	bhi.n	41a2 <EIC_Handler+0x5e>
    4178:	e7ec      	b.n	4154 <EIC_Handler+0x10>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    417a:	1c32      	adds	r2, r6, #0
    417c:	401a      	ands	r2, r3
    417e:	2101      	movs	r1, #1
    4180:	4091      	lsls	r1, r2
    4182:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    4184:	4909      	ldr	r1, [pc, #36]	; (41ac <EIC_Handler+0x68>)
    4186:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4188:	4211      	tst	r1, r2
    418a:	d1e6      	bne.n	415a <EIC_Handler+0x16>
    418c:	e7ee      	b.n	416c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    418e:	1c32      	adds	r2, r6, #0
    4190:	401a      	ands	r2, r3
    4192:	2101      	movs	r1, #1
    4194:	4091      	lsls	r1, r2
    4196:	1c0a      	adds	r2, r1, #0

	return (eic_module->INTFLAG.reg & eic_mask);
    4198:	2100      	movs	r1, #0
    419a:	6909      	ldr	r1, [r1, #16]
    419c:	4211      	tst	r1, r2
    419e:	d1de      	bne.n	415e <EIC_Handler+0x1a>
    41a0:	e7e4      	b.n	416c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	20000dc4 	.word	0x20000dc4
    41a8:	20000d84 	.word	0x20000d84
    41ac:	40001800 	.word	0x40001800

000041b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    41b0:	b500      	push	{lr}
    41b2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    41b4:	ab01      	add	r3, sp, #4
    41b6:	2280      	movs	r2, #128	; 0x80
    41b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41ba:	780a      	ldrb	r2, [r1, #0]
    41bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41be:	784a      	ldrb	r2, [r1, #1]
    41c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41c2:	788a      	ldrb	r2, [r1, #2]
    41c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41c6:	1c19      	adds	r1, r3, #0
    41c8:	4b01      	ldr	r3, [pc, #4]	; (41d0 <port_pin_set_config+0x20>)
    41ca:	4798      	blx	r3
}
    41cc:	b003      	add	sp, #12
    41ce:	bd00      	pop	{pc}
    41d0:	0000507d 	.word	0x0000507d

000041d4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    41d4:	b510      	push	{r4, lr}
    41d6:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    41d8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41da:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    41dc:	4299      	cmp	r1, r3
    41de:	d30c      	bcc.n	41fa <_sercom_get_sync_baud_val+0x26>
    41e0:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    41e2:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
    41e4:	1c60      	adds	r0, r4, #1
    41e6:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    41e8:	428b      	cmp	r3, r1
    41ea:	d801      	bhi.n	41f0 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
    41ec:	1c04      	adds	r4, r0, #0
    41ee:	e7f8      	b.n	41e2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    41f0:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    41f2:	2cff      	cmp	r4, #255	; 0xff
    41f4:	d801      	bhi.n	41fa <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    41f6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    41f8:	2000      	movs	r0, #0
	}
}
    41fa:	bd10      	pop	{r4, pc}
    41fc:	0000      	movs	r0, r0
	...

00004200 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4200:	b5f0      	push	{r4, r5, r6, r7, lr}
    4202:	465f      	mov	r7, fp
    4204:	4656      	mov	r6, sl
    4206:	464d      	mov	r5, r9
    4208:	4644      	mov	r4, r8
    420a:	b4f0      	push	{r4, r5, r6, r7}
    420c:	b087      	sub	sp, #28
    420e:	1c06      	adds	r6, r0, #0
    4210:	1c0d      	adds	r5, r1, #0
    4212:	9204      	str	r2, [sp, #16]
    4214:	aa10      	add	r2, sp, #64	; 0x40
    4216:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4218:	1c32      	adds	r2, r6, #0
    421a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    421c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    421e:	428a      	cmp	r2, r1
    4220:	d900      	bls.n	4224 <_sercom_get_async_baud_val+0x24>
    4222:	e0b3      	b.n	438c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4224:	2b00      	cmp	r3, #0
    4226:	d14b      	bne.n	42c0 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4228:	2100      	movs	r1, #0
    422a:	1c32      	adds	r2, r6, #0
    422c:	4c5e      	ldr	r4, [pc, #376]	; (43a8 <_sercom_get_async_baud_val+0x1a8>)
    422e:	47a0      	blx	r4
    4230:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    4232:	1c2e      	adds	r6, r5, #0
    4234:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4236:	2000      	movs	r0, #0
    4238:	2100      	movs	r1, #0
    423a:	2200      	movs	r2, #0
    423c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    423e:	243f      	movs	r4, #63	; 0x3f
    4240:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
    4242:	2501      	movs	r5, #1
    4244:	46a8      	mov	r8, r5
    4246:	9002      	str	r0, [sp, #8]
    4248:	9103      	str	r1, [sp, #12]
    424a:	4661      	mov	r1, ip
    424c:	3920      	subs	r1, #32
    424e:	d403      	bmi.n	4258 <_sercom_get_async_baud_val+0x58>
    4250:	4640      	mov	r0, r8
    4252:	4088      	lsls	r0, r1
    4254:	4681      	mov	r9, r0
    4256:	e005      	b.n	4264 <_sercom_get_async_baud_val+0x64>
    4258:	2120      	movs	r1, #32
    425a:	4665      	mov	r5, ip
    425c:	1b4c      	subs	r4, r1, r5
    425e:	4640      	mov	r0, r8
    4260:	40e0      	lsrs	r0, r4
    4262:	4681      	mov	r9, r0
    4264:	4641      	mov	r1, r8
    4266:	4664      	mov	r4, ip
    4268:	40a1      	lsls	r1, r4
    426a:	468a      	mov	sl, r1

		r = r << 1;
    426c:	1c10      	adds	r0, r2, #0
    426e:	1c19      	adds	r1, r3, #0
    4270:	1880      	adds	r0, r0, r2
    4272:	4159      	adcs	r1, r3
    4274:	1c02      	adds	r2, r0, #0
    4276:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    4278:	465d      	mov	r5, fp
    427a:	464c      	mov	r4, r9
    427c:	4225      	tst	r5, r4
    427e:	d002      	beq.n	4286 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
    4280:	4642      	mov	r2, r8
    4282:	4302      	orrs	r2, r0
    4284:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    4286:	429f      	cmp	r7, r3
    4288:	d80c      	bhi.n	42a4 <_sercom_get_async_baud_val+0xa4>
    428a:	d101      	bne.n	4290 <_sercom_get_async_baud_val+0x90>
    428c:	4296      	cmp	r6, r2
    428e:	d809      	bhi.n	42a4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
    4290:	1b92      	subs	r2, r2, r6
    4292:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    4294:	4650      	mov	r0, sl
    4296:	9d02      	ldr	r5, [sp, #8]
    4298:	4328      	orrs	r0, r5
    429a:	4649      	mov	r1, r9
    429c:	9c03      	ldr	r4, [sp, #12]
    429e:	4321      	orrs	r1, r4
    42a0:	9002      	str	r0, [sp, #8]
    42a2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    42a4:	4665      	mov	r5, ip
    42a6:	3d01      	subs	r5, #1
    42a8:	46ac      	mov	ip, r5
    42aa:	d2ce      	bcs.n	424a <_sercom_get_async_baud_val+0x4a>
    42ac:	9802      	ldr	r0, [sp, #8]
    42ae:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    42b0:	4b3c      	ldr	r3, [pc, #240]	; (43a4 <_sercom_get_async_baud_val+0x1a4>)
    42b2:	4a3b      	ldr	r2, [pc, #236]	; (43a0 <_sercom_get_async_baud_val+0x1a0>)
    42b4:	1a12      	subs	r2, r2, r0
    42b6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    42b8:	0c12      	lsrs	r2, r2, #16
    42ba:	041b      	lsls	r3, r3, #16
    42bc:	431a      	orrs	r2, r3
    42be:	e062      	b.n	4386 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    42c0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    42c2:	2b01      	cmp	r3, #1
    42c4:	d15f      	bne.n	4386 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    42c6:	0f4f      	lsrs	r7, r1, #29
    42c8:	46b9      	mov	r9, r7
    42ca:	00cd      	lsls	r5, r1, #3
    42cc:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
    42ce:	2100      	movs	r1, #0
    42d0:	1c32      	adds	r2, r6, #0
    42d2:	2300      	movs	r3, #0
    42d4:	4c34      	ldr	r4, [pc, #208]	; (43a8 <_sercom_get_async_baud_val+0x1a8>)
    42d6:	47a0      	blx	r4
    42d8:	1c06      	adds	r6, r0, #0
    42da:	1c0f      	adds	r7, r1, #0
    42dc:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    42de:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    42e0:	9602      	str	r6, [sp, #8]
    42e2:	9703      	str	r7, [sp, #12]
    42e4:	469a      	mov	sl, r3
    42e6:	4650      	mov	r0, sl
    42e8:	b2c0      	uxtb	r0, r0
    42ea:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    42ec:	2100      	movs	r1, #0
    42ee:	4688      	mov	r8, r1
    42f0:	2200      	movs	r2, #0
    42f2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    42f4:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    42f6:	1c27      	adds	r7, r4, #0
    42f8:	3f20      	subs	r7, #32
    42fa:	d403      	bmi.n	4304 <_sercom_get_async_baud_val+0x104>
    42fc:	1c2e      	adds	r6, r5, #0
    42fe:	40be      	lsls	r6, r7
    4300:	9601      	str	r6, [sp, #4]
    4302:	e004      	b.n	430e <_sercom_get_async_baud_val+0x10e>
    4304:	2020      	movs	r0, #32
    4306:	1b07      	subs	r7, r0, r4
    4308:	1c29      	adds	r1, r5, #0
    430a:	40f9      	lsrs	r1, r7
    430c:	9101      	str	r1, [sp, #4]
    430e:	1c2e      	adds	r6, r5, #0
    4310:	40a6      	lsls	r6, r4
    4312:	9600      	str	r6, [sp, #0]

		r = r << 1;
    4314:	1c10      	adds	r0, r2, #0
    4316:	1c19      	adds	r1, r3, #0
    4318:	1880      	adds	r0, r0, r2
    431a:	4159      	adcs	r1, r3
    431c:	1c02      	adds	r2, r0, #0
    431e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
    4320:	465f      	mov	r7, fp
    4322:	4037      	ands	r7, r6
    4324:	46bc      	mov	ip, r7
    4326:	9e01      	ldr	r6, [sp, #4]
    4328:	464f      	mov	r7, r9
    432a:	403e      	ands	r6, r7
    432c:	4667      	mov	r7, ip
    432e:	433e      	orrs	r6, r7
    4330:	d002      	beq.n	4338 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
    4332:	1c2a      	adds	r2, r5, #0
    4334:	4302      	orrs	r2, r0
    4336:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
    4338:	9803      	ldr	r0, [sp, #12]
    433a:	4298      	cmp	r0, r3
    433c:	d80b      	bhi.n	4356 <_sercom_get_async_baud_val+0x156>
    433e:	d102      	bne.n	4346 <_sercom_get_async_baud_val+0x146>
    4340:	9902      	ldr	r1, [sp, #8]
    4342:	4291      	cmp	r1, r2
    4344:	d807      	bhi.n	4356 <_sercom_get_async_baud_val+0x156>
			r = r - d;
    4346:	9e02      	ldr	r6, [sp, #8]
    4348:	9f03      	ldr	r7, [sp, #12]
    434a:	1b92      	subs	r2, r2, r6
    434c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
    434e:	4647      	mov	r7, r8
    4350:	9800      	ldr	r0, [sp, #0]
    4352:	4307      	orrs	r7, r0
    4354:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    4356:	3c01      	subs	r4, #1
    4358:	d2cd      	bcs.n	42f6 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    435a:	4641      	mov	r1, r8
    435c:	4652      	mov	r2, sl
    435e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    4360:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    4362:	4c12      	ldr	r4, [pc, #72]	; (43ac <_sercom_get_async_baud_val+0x1ac>)
    4364:	42a3      	cmp	r3, r4
    4366:	d908      	bls.n	437a <_sercom_get_async_baud_val+0x17a>
    4368:	9a05      	ldr	r2, [sp, #20]
    436a:	3201      	adds	r2, #1
    436c:	b2d2      	uxtb	r2, r2
    436e:	9205      	str	r2, [sp, #20]
    4370:	2601      	movs	r6, #1
    4372:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4374:	4657      	mov	r7, sl
    4376:	2f08      	cmp	r7, #8
    4378:	d1b5      	bne.n	42e6 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    437a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    437c:	9805      	ldr	r0, [sp, #20]
    437e:	2808      	cmp	r0, #8
    4380:	d004      	beq.n	438c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    4382:	0342      	lsls	r2, r0, #13
    4384:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    4386:	9c04      	ldr	r4, [sp, #16]
    4388:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
    438a:	2400      	movs	r4, #0
}
    438c:	1c20      	adds	r0, r4, #0
    438e:	b007      	add	sp, #28
    4390:	bc3c      	pop	{r2, r3, r4, r5}
    4392:	4690      	mov	r8, r2
    4394:	4699      	mov	r9, r3
    4396:	46a2      	mov	sl, r4
    4398:	46ab      	mov	fp, r5
    439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    439c:	46c0      	nop			; (mov r8, r8)
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	00000000 	.word	0x00000000
    43a4:	00000001 	.word	0x00000001
    43a8:	00005b29 	.word	0x00005b29
    43ac:	00001fff 	.word	0x00001fff

000043b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    43b0:	b510      	push	{r4, lr}
    43b2:	b082      	sub	sp, #8
    43b4:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    43b6:	4b0f      	ldr	r3, [pc, #60]	; (43f4 <sercom_set_gclk_generator+0x44>)
    43b8:	781b      	ldrb	r3, [r3, #0]
    43ba:	2b00      	cmp	r3, #0
    43bc:	d001      	beq.n	43c2 <sercom_set_gclk_generator+0x12>
    43be:	2900      	cmp	r1, #0
    43c0:	d00d      	beq.n	43de <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    43c2:	a901      	add	r1, sp, #4
    43c4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    43c6:	2013      	movs	r0, #19
    43c8:	4b0b      	ldr	r3, [pc, #44]	; (43f8 <sercom_set_gclk_generator+0x48>)
    43ca:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    43cc:	2013      	movs	r0, #19
    43ce:	4b0b      	ldr	r3, [pc, #44]	; (43fc <sercom_set_gclk_generator+0x4c>)
    43d0:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    43d2:	4b08      	ldr	r3, [pc, #32]	; (43f4 <sercom_set_gclk_generator+0x44>)
    43d4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    43d6:	2201      	movs	r2, #1
    43d8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    43da:	2000      	movs	r0, #0
    43dc:	e007      	b.n	43ee <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
    43de:	4b05      	ldr	r3, [pc, #20]	; (43f4 <sercom_set_gclk_generator+0x44>)
    43e0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    43e2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
    43e4:	1b14      	subs	r4, r2, r4
    43e6:	1e62      	subs	r2, r4, #1
    43e8:	4194      	sbcs	r4, r2
    43ea:	4264      	negs	r4, r4
    43ec:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    43ee:	b002      	add	sp, #8
    43f0:	bd10      	pop	{r4, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	20000bb8 	.word	0x20000bb8
    43f8:	00004fa1 	.word	0x00004fa1
    43fc:	00004f15 	.word	0x00004f15

00004400 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4400:	4b44      	ldr	r3, [pc, #272]	; (4514 <_sercom_get_default_pad+0x114>)
    4402:	4298      	cmp	r0, r3
    4404:	d033      	beq.n	446e <_sercom_get_default_pad+0x6e>
    4406:	d806      	bhi.n	4416 <_sercom_get_default_pad+0x16>
    4408:	4b43      	ldr	r3, [pc, #268]	; (4518 <_sercom_get_default_pad+0x118>)
    440a:	4298      	cmp	r0, r3
    440c:	d00d      	beq.n	442a <_sercom_get_default_pad+0x2a>
    440e:	4b43      	ldr	r3, [pc, #268]	; (451c <_sercom_get_default_pad+0x11c>)
    4410:	4298      	cmp	r0, r3
    4412:	d01b      	beq.n	444c <_sercom_get_default_pad+0x4c>
    4414:	e06f      	b.n	44f6 <_sercom_get_default_pad+0xf6>
    4416:	4b42      	ldr	r3, [pc, #264]	; (4520 <_sercom_get_default_pad+0x120>)
    4418:	4298      	cmp	r0, r3
    441a:	d04a      	beq.n	44b2 <_sercom_get_default_pad+0xb2>
    441c:	4b41      	ldr	r3, [pc, #260]	; (4524 <_sercom_get_default_pad+0x124>)
    441e:	4298      	cmp	r0, r3
    4420:	d058      	beq.n	44d4 <_sercom_get_default_pad+0xd4>
    4422:	4b41      	ldr	r3, [pc, #260]	; (4528 <_sercom_get_default_pad+0x128>)
    4424:	4298      	cmp	r0, r3
    4426:	d166      	bne.n	44f6 <_sercom_get_default_pad+0xf6>
    4428:	e032      	b.n	4490 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    442a:	2901      	cmp	r1, #1
    442c:	d065      	beq.n	44fa <_sercom_get_default_pad+0xfa>
    442e:	2900      	cmp	r1, #0
    4430:	d004      	beq.n	443c <_sercom_get_default_pad+0x3c>
    4432:	2902      	cmp	r1, #2
    4434:	d006      	beq.n	4444 <_sercom_get_default_pad+0x44>
    4436:	2903      	cmp	r1, #3
    4438:	d006      	beq.n	4448 <_sercom_get_default_pad+0x48>
    443a:	e001      	b.n	4440 <_sercom_get_default_pad+0x40>
    443c:	483b      	ldr	r0, [pc, #236]	; (452c <_sercom_get_default_pad+0x12c>)
    443e:	e067      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4440:	2000      	movs	r0, #0
    4442:	e065      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4444:	483a      	ldr	r0, [pc, #232]	; (4530 <_sercom_get_default_pad+0x130>)
    4446:	e063      	b.n	4510 <_sercom_get_default_pad+0x110>
    4448:	483a      	ldr	r0, [pc, #232]	; (4534 <_sercom_get_default_pad+0x134>)
    444a:	e061      	b.n	4510 <_sercom_get_default_pad+0x110>
    444c:	2901      	cmp	r1, #1
    444e:	d056      	beq.n	44fe <_sercom_get_default_pad+0xfe>
    4450:	2900      	cmp	r1, #0
    4452:	d004      	beq.n	445e <_sercom_get_default_pad+0x5e>
    4454:	2902      	cmp	r1, #2
    4456:	d006      	beq.n	4466 <_sercom_get_default_pad+0x66>
    4458:	2903      	cmp	r1, #3
    445a:	d006      	beq.n	446a <_sercom_get_default_pad+0x6a>
    445c:	e001      	b.n	4462 <_sercom_get_default_pad+0x62>
    445e:	2003      	movs	r0, #3
    4460:	e056      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4462:	2000      	movs	r0, #0
    4464:	e054      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4466:	4834      	ldr	r0, [pc, #208]	; (4538 <_sercom_get_default_pad+0x138>)
    4468:	e052      	b.n	4510 <_sercom_get_default_pad+0x110>
    446a:	4834      	ldr	r0, [pc, #208]	; (453c <_sercom_get_default_pad+0x13c>)
    446c:	e050      	b.n	4510 <_sercom_get_default_pad+0x110>
    446e:	2901      	cmp	r1, #1
    4470:	d047      	beq.n	4502 <_sercom_get_default_pad+0x102>
    4472:	2900      	cmp	r1, #0
    4474:	d004      	beq.n	4480 <_sercom_get_default_pad+0x80>
    4476:	2902      	cmp	r1, #2
    4478:	d006      	beq.n	4488 <_sercom_get_default_pad+0x88>
    447a:	2903      	cmp	r1, #3
    447c:	d006      	beq.n	448c <_sercom_get_default_pad+0x8c>
    447e:	e001      	b.n	4484 <_sercom_get_default_pad+0x84>
    4480:	482f      	ldr	r0, [pc, #188]	; (4540 <_sercom_get_default_pad+0x140>)
    4482:	e045      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4484:	2000      	movs	r0, #0
    4486:	e043      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4488:	482e      	ldr	r0, [pc, #184]	; (4544 <_sercom_get_default_pad+0x144>)
    448a:	e041      	b.n	4510 <_sercom_get_default_pad+0x110>
    448c:	482e      	ldr	r0, [pc, #184]	; (4548 <_sercom_get_default_pad+0x148>)
    448e:	e03f      	b.n	4510 <_sercom_get_default_pad+0x110>
    4490:	2901      	cmp	r1, #1
    4492:	d038      	beq.n	4506 <_sercom_get_default_pad+0x106>
    4494:	2900      	cmp	r1, #0
    4496:	d004      	beq.n	44a2 <_sercom_get_default_pad+0xa2>
    4498:	2902      	cmp	r1, #2
    449a:	d006      	beq.n	44aa <_sercom_get_default_pad+0xaa>
    449c:	2903      	cmp	r1, #3
    449e:	d006      	beq.n	44ae <_sercom_get_default_pad+0xae>
    44a0:	e001      	b.n	44a6 <_sercom_get_default_pad+0xa6>
    44a2:	482a      	ldr	r0, [pc, #168]	; (454c <_sercom_get_default_pad+0x14c>)
    44a4:	e034      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    44a6:	2000      	movs	r0, #0
    44a8:	e032      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44aa:	4829      	ldr	r0, [pc, #164]	; (4550 <_sercom_get_default_pad+0x150>)
    44ac:	e030      	b.n	4510 <_sercom_get_default_pad+0x110>
    44ae:	4829      	ldr	r0, [pc, #164]	; (4554 <_sercom_get_default_pad+0x154>)
    44b0:	e02e      	b.n	4510 <_sercom_get_default_pad+0x110>
    44b2:	2901      	cmp	r1, #1
    44b4:	d029      	beq.n	450a <_sercom_get_default_pad+0x10a>
    44b6:	2900      	cmp	r1, #0
    44b8:	d004      	beq.n	44c4 <_sercom_get_default_pad+0xc4>
    44ba:	2902      	cmp	r1, #2
    44bc:	d006      	beq.n	44cc <_sercom_get_default_pad+0xcc>
    44be:	2903      	cmp	r1, #3
    44c0:	d006      	beq.n	44d0 <_sercom_get_default_pad+0xd0>
    44c2:	e001      	b.n	44c8 <_sercom_get_default_pad+0xc8>
    44c4:	4824      	ldr	r0, [pc, #144]	; (4558 <_sercom_get_default_pad+0x158>)
    44c6:	e023      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    44c8:	2000      	movs	r0, #0
    44ca:	e021      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44cc:	4823      	ldr	r0, [pc, #140]	; (455c <_sercom_get_default_pad+0x15c>)
    44ce:	e01f      	b.n	4510 <_sercom_get_default_pad+0x110>
    44d0:	4823      	ldr	r0, [pc, #140]	; (4560 <_sercom_get_default_pad+0x160>)
    44d2:	e01d      	b.n	4510 <_sercom_get_default_pad+0x110>
    44d4:	2901      	cmp	r1, #1
    44d6:	d01a      	beq.n	450e <_sercom_get_default_pad+0x10e>
    44d8:	2900      	cmp	r1, #0
    44da:	d004      	beq.n	44e6 <_sercom_get_default_pad+0xe6>
    44dc:	2902      	cmp	r1, #2
    44de:	d006      	beq.n	44ee <_sercom_get_default_pad+0xee>
    44e0:	2903      	cmp	r1, #3
    44e2:	d006      	beq.n	44f2 <_sercom_get_default_pad+0xf2>
    44e4:	e001      	b.n	44ea <_sercom_get_default_pad+0xea>
    44e6:	481f      	ldr	r0, [pc, #124]	; (4564 <_sercom_get_default_pad+0x164>)
    44e8:	e012      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    44ea:	2000      	movs	r0, #0
    44ec:	e010      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44ee:	481e      	ldr	r0, [pc, #120]	; (4568 <_sercom_get_default_pad+0x168>)
    44f0:	e00e      	b.n	4510 <_sercom_get_default_pad+0x110>
    44f2:	481e      	ldr	r0, [pc, #120]	; (456c <_sercom_get_default_pad+0x16c>)
    44f4:	e00c      	b.n	4510 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    44f6:	2000      	movs	r0, #0
    44f8:	e00a      	b.n	4510 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44fa:	481d      	ldr	r0, [pc, #116]	; (4570 <_sercom_get_default_pad+0x170>)
    44fc:	e008      	b.n	4510 <_sercom_get_default_pad+0x110>
    44fe:	481d      	ldr	r0, [pc, #116]	; (4574 <_sercom_get_default_pad+0x174>)
    4500:	e006      	b.n	4510 <_sercom_get_default_pad+0x110>
    4502:	481d      	ldr	r0, [pc, #116]	; (4578 <_sercom_get_default_pad+0x178>)
    4504:	e004      	b.n	4510 <_sercom_get_default_pad+0x110>
    4506:	481d      	ldr	r0, [pc, #116]	; (457c <_sercom_get_default_pad+0x17c>)
    4508:	e002      	b.n	4510 <_sercom_get_default_pad+0x110>
    450a:	481d      	ldr	r0, [pc, #116]	; (4580 <_sercom_get_default_pad+0x180>)
    450c:	e000      	b.n	4510 <_sercom_get_default_pad+0x110>
    450e:	481d      	ldr	r0, [pc, #116]	; (4584 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    4510:	4770      	bx	lr
    4512:	46c0      	nop			; (mov r8, r8)
    4514:	42001000 	.word	0x42001000
    4518:	42000800 	.word	0x42000800
    451c:	42000c00 	.word	0x42000c00
    4520:	42001800 	.word	0x42001800
    4524:	42001c00 	.word	0x42001c00
    4528:	42001400 	.word	0x42001400
    452c:	00040003 	.word	0x00040003
    4530:	00060003 	.word	0x00060003
    4534:	00070003 	.word	0x00070003
    4538:	001e0003 	.word	0x001e0003
    453c:	001f0003 	.word	0x001f0003
    4540:	00080003 	.word	0x00080003
    4544:	000a0003 	.word	0x000a0003
    4548:	000b0003 	.word	0x000b0003
    454c:	00100003 	.word	0x00100003
    4550:	00120003 	.word	0x00120003
    4554:	00130003 	.word	0x00130003
    4558:	000c0003 	.word	0x000c0003
    455c:	000e0003 	.word	0x000e0003
    4560:	000f0003 	.word	0x000f0003
    4564:	00160003 	.word	0x00160003
    4568:	00180003 	.word	0x00180003
    456c:	00190003 	.word	0x00190003
    4570:	00050003 	.word	0x00050003
    4574:	00010003 	.word	0x00010003
    4578:	00090003 	.word	0x00090003
    457c:	00110003 	.word	0x00110003
    4580:	000d0003 	.word	0x000d0003
    4584:	00170003 	.word	0x00170003

00004588 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4588:	4770      	bx	lr
    458a:	46c0      	nop			; (mov r8, r8)

0000458c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    458c:	b570      	push	{r4, r5, r6, lr}
    458e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4590:	4a0c      	ldr	r2, [pc, #48]	; (45c4 <_sercom_get_sercom_inst_index+0x38>)
    4592:	466b      	mov	r3, sp
    4594:	ca70      	ldmia	r2!, {r4, r5, r6}
    4596:	c370      	stmia	r3!, {r4, r5, r6}
    4598:	ca32      	ldmia	r2!, {r1, r4, r5}
    459a:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    459c:	9e00      	ldr	r6, [sp, #0]
    459e:	4286      	cmp	r6, r0
    45a0:	d006      	beq.n	45b0 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    45a2:	2301      	movs	r3, #1
    45a4:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    45a6:	4669      	mov	r1, sp
    45a8:	5852      	ldr	r2, [r2, r1]
    45aa:	4282      	cmp	r2, r0
    45ac:	d103      	bne.n	45b6 <_sercom_get_sercom_inst_index+0x2a>
    45ae:	e000      	b.n	45b2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    45b0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    45b2:	b2d8      	uxtb	r0, r3
    45b4:	e003      	b.n	45be <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    45b6:	3301      	adds	r3, #1
    45b8:	2b06      	cmp	r3, #6
    45ba:	d1f3      	bne.n	45a4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    45bc:	2000      	movs	r0, #0
}
    45be:	b006      	add	sp, #24
    45c0:	bd70      	pop	{r4, r5, r6, pc}
    45c2:	46c0      	nop			; (mov r8, r8)
    45c4:	00008e5c 	.word	0x00008e5c

000045c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    45c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    45ca:	4b0a      	ldr	r3, [pc, #40]	; (45f4 <_sercom_set_handler+0x2c>)
    45cc:	781b      	ldrb	r3, [r3, #0]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d10c      	bne.n	45ec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    45d2:	4f09      	ldr	r7, [pc, #36]	; (45f8 <_sercom_set_handler+0x30>)
    45d4:	4e09      	ldr	r6, [pc, #36]	; (45fc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    45d6:	4d0a      	ldr	r5, [pc, #40]	; (4600 <_sercom_set_handler+0x38>)
    45d8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    45da:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    45dc:	195a      	adds	r2, r3, r5
    45de:	6014      	str	r4, [r2, #0]
    45e0:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    45e2:	2b18      	cmp	r3, #24
    45e4:	d1f9      	bne.n	45da <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    45e6:	2201      	movs	r2, #1
    45e8:	4b02      	ldr	r3, [pc, #8]	; (45f4 <_sercom_set_handler+0x2c>)
    45ea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    45ec:	0080      	lsls	r0, r0, #2
    45ee:	4b02      	ldr	r3, [pc, #8]	; (45f8 <_sercom_set_handler+0x30>)
    45f0:	50c1      	str	r1, [r0, r3]
}
    45f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f4:	20000bbc 	.word	0x20000bbc
    45f8:	20000bc0 	.word	0x20000bc0
    45fc:	00004589 	.word	0x00004589
    4600:	20000dc8 	.word	0x20000dc8

00004604 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4604:	b510      	push	{r4, lr}
    4606:	b082      	sub	sp, #8
    4608:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    460a:	4668      	mov	r0, sp
    460c:	4905      	ldr	r1, [pc, #20]	; (4624 <_sercom_get_interrupt_vector+0x20>)
    460e:	3118      	adds	r1, #24
    4610:	2206      	movs	r2, #6
    4612:	4b05      	ldr	r3, [pc, #20]	; (4628 <_sercom_get_interrupt_vector+0x24>)
    4614:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4616:	1c20      	adds	r0, r4, #0
    4618:	4b04      	ldr	r3, [pc, #16]	; (462c <_sercom_get_interrupt_vector+0x28>)
    461a:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    461c:	466b      	mov	r3, sp
    461e:	5618      	ldrsb	r0, [r3, r0]
}
    4620:	b002      	add	sp, #8
    4622:	bd10      	pop	{r4, pc}
    4624:	00008e5c 	.word	0x00008e5c
    4628:	0000725d 	.word	0x0000725d
    462c:	0000458d 	.word	0x0000458d

00004630 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4630:	b508      	push	{r3, lr}
    4632:	4b02      	ldr	r3, [pc, #8]	; (463c <SERCOM0_Handler+0xc>)
    4634:	681b      	ldr	r3, [r3, #0]
    4636:	2000      	movs	r0, #0
    4638:	4798      	blx	r3
    463a:	bd08      	pop	{r3, pc}
    463c:	20000bc0 	.word	0x20000bc0

00004640 <SERCOM1_Handler>:
    4640:	b508      	push	{r3, lr}
    4642:	4b02      	ldr	r3, [pc, #8]	; (464c <SERCOM1_Handler+0xc>)
    4644:	685b      	ldr	r3, [r3, #4]
    4646:	2001      	movs	r0, #1
    4648:	4798      	blx	r3
    464a:	bd08      	pop	{r3, pc}
    464c:	20000bc0 	.word	0x20000bc0

00004650 <SERCOM2_Handler>:
    4650:	b508      	push	{r3, lr}
    4652:	4b02      	ldr	r3, [pc, #8]	; (465c <SERCOM2_Handler+0xc>)
    4654:	689b      	ldr	r3, [r3, #8]
    4656:	2002      	movs	r0, #2
    4658:	4798      	blx	r3
    465a:	bd08      	pop	{r3, pc}
    465c:	20000bc0 	.word	0x20000bc0

00004660 <SERCOM3_Handler>:
    4660:	b508      	push	{r3, lr}
    4662:	4b02      	ldr	r3, [pc, #8]	; (466c <SERCOM3_Handler+0xc>)
    4664:	68db      	ldr	r3, [r3, #12]
    4666:	2003      	movs	r0, #3
    4668:	4798      	blx	r3
    466a:	bd08      	pop	{r3, pc}
    466c:	20000bc0 	.word	0x20000bc0

00004670 <SERCOM4_Handler>:
    4670:	b508      	push	{r3, lr}
    4672:	4b02      	ldr	r3, [pc, #8]	; (467c <SERCOM4_Handler+0xc>)
    4674:	691b      	ldr	r3, [r3, #16]
    4676:	2004      	movs	r0, #4
    4678:	4798      	blx	r3
    467a:	bd08      	pop	{r3, pc}
    467c:	20000bc0 	.word	0x20000bc0

00004680 <SERCOM5_Handler>:
    4680:	b508      	push	{r3, lr}
    4682:	4b02      	ldr	r3, [pc, #8]	; (468c <SERCOM5_Handler+0xc>)
    4684:	695b      	ldr	r3, [r3, #20]
    4686:	2005      	movs	r0, #5
    4688:	4798      	blx	r3
    468a:	bd08      	pop	{r3, pc}
    468c:	20000bc0 	.word	0x20000bc0

00004690 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4690:	b5f0      	push	{r4, r5, r6, r7, lr}
    4692:	465f      	mov	r7, fp
    4694:	4656      	mov	r6, sl
    4696:	464d      	mov	r5, r9
    4698:	4644      	mov	r4, r8
    469a:	b4f0      	push	{r4, r5, r6, r7}
    469c:	b091      	sub	sp, #68	; 0x44
    469e:	1c05      	adds	r5, r0, #0
    46a0:	1c0c      	adds	r4, r1, #0
    46a2:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    46a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    46a6:	1c08      	adds	r0, r1, #0
    46a8:	4b9c      	ldr	r3, [pc, #624]	; (491c <usart_init+0x28c>)
    46aa:	4798      	blx	r3
    46ac:	1c02      	adds	r2, r0, #0
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    46ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    46b0:	2005      	movs	r0, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    46b2:	07d9      	lsls	r1, r3, #31
    46b4:	d500      	bpl.n	46b8 <usart_init+0x28>
    46b6:	e129      	b.n	490c <usart_init+0x27c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    46b8:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    46ba:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    46bc:	079f      	lsls	r7, r3, #30
    46be:	d500      	bpl.n	46c2 <usart_init+0x32>
    46c0:	e124      	b.n	490c <usart_init+0x27c>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    46c2:	4b97      	ldr	r3, [pc, #604]	; (4920 <usart_init+0x290>)
    46c4:	6a18      	ldr	r0, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    46c6:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    46c8:	2701      	movs	r7, #1
    46ca:	408f      	lsls	r7, r1
    46cc:	1c39      	adds	r1, r7, #0
    46ce:	4301      	orrs	r1, r0
    46d0:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    46d2:	a90f      	add	r1, sp, #60	; 0x3c
    46d4:	272d      	movs	r7, #45	; 0x2d
    46d6:	5df3      	ldrb	r3, [r6, r7]
    46d8:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    46da:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    46dc:	b2d2      	uxtb	r2, r2
    46de:	4690      	mov	r8, r2
    46e0:	1c10      	adds	r0, r2, #0
    46e2:	4b90      	ldr	r3, [pc, #576]	; (4924 <usart_init+0x294>)
    46e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    46e6:	4640      	mov	r0, r8
    46e8:	4b8f      	ldr	r3, [pc, #572]	; (4928 <usart_init+0x298>)
    46ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    46ec:	5df0      	ldrb	r0, [r6, r7]
    46ee:	2100      	movs	r1, #0
    46f0:	4b8e      	ldr	r3, [pc, #568]	; (492c <usart_init+0x29c>)
    46f2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    46f4:	7af3      	ldrb	r3, [r6, #11]
    46f6:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    46f8:	2324      	movs	r3, #36	; 0x24
    46fa:	5cf3      	ldrb	r3, [r6, r3]
    46fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    46fe:	2325      	movs	r3, #37	; 0x25
    4700:	5cf3      	ldrb	r3, [r6, r3]
    4702:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4704:	7ef3      	ldrb	r3, [r6, #27]
    4706:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4708:	7f33      	ldrb	r3, [r6, #28]
    470a:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    470c:	6829      	ldr	r1, [r5, #0]
    470e:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4710:	1c08      	adds	r0, r1, #0
    4712:	4b82      	ldr	r3, [pc, #520]	; (491c <usart_init+0x28c>)
    4714:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4716:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    4718:	2200      	movs	r2, #0
    471a:	466b      	mov	r3, sp
    471c:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    471e:	8a32      	ldrh	r2, [r6, #16]
    4720:	9202      	str	r2, [sp, #8]
    4722:	2380      	movs	r3, #128	; 0x80
    4724:	01db      	lsls	r3, r3, #7
    4726:	429a      	cmp	r2, r3
    4728:	d021      	beq.n	476e <usart_init+0xde>
    472a:	2380      	movs	r3, #128	; 0x80
    472c:	01db      	lsls	r3, r3, #7
    472e:	429a      	cmp	r2, r3
    4730:	d804      	bhi.n	473c <usart_init+0xac>
    4732:	2380      	movs	r3, #128	; 0x80
    4734:	019b      	lsls	r3, r3, #6
    4736:	429a      	cmp	r2, r3
    4738:	d011      	beq.n	475e <usart_init+0xce>
    473a:	e008      	b.n	474e <usart_init+0xbe>
    473c:	23c0      	movs	r3, #192	; 0xc0
    473e:	01db      	lsls	r3, r3, #7
    4740:	9f02      	ldr	r7, [sp, #8]
    4742:	429f      	cmp	r7, r3
    4744:	d00f      	beq.n	4766 <usart_init+0xd6>
    4746:	2380      	movs	r3, #128	; 0x80
    4748:	021b      	lsls	r3, r3, #8
    474a:	429f      	cmp	r7, r3
    474c:	d003      	beq.n	4756 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    474e:	2710      	movs	r7, #16
    4750:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4752:	2700      	movs	r7, #0
    4754:	e00e      	b.n	4774 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4756:	2703      	movs	r7, #3
    4758:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    475a:	2700      	movs	r7, #0
    475c:	e00a      	b.n	4774 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    475e:	2710      	movs	r7, #16
    4760:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4762:	2701      	movs	r7, #1
    4764:	e006      	b.n	4774 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4766:	2708      	movs	r7, #8
    4768:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    476a:	2701      	movs	r7, #1
    476c:	e002      	b.n	4774 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    476e:	2708      	movs	r7, #8
    4770:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4772:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4774:	6831      	ldr	r1, [r6, #0]
    4776:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    4778:	68f2      	ldr	r2, [r6, #12]
    477a:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    477c:	6973      	ldr	r3, [r6, #20]
    477e:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4780:	7e31      	ldrb	r1, [r6, #24]
    4782:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4784:	2326      	movs	r3, #38	; 0x26
    4786:	5cf3      	ldrb	r3, [r6, r3]
    4788:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    478a:	6873      	ldr	r3, [r6, #4]
    478c:	2b00      	cmp	r3, #0
    478e:	d013      	beq.n	47b8 <usart_init+0x128>
    4790:	2280      	movs	r2, #128	; 0x80
    4792:	0552      	lsls	r2, r2, #21
    4794:	4293      	cmp	r3, r2
    4796:	d12e      	bne.n	47f6 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4798:	2327      	movs	r3, #39	; 0x27
    479a:	5cf3      	ldrb	r3, [r6, r3]
    479c:	2b00      	cmp	r3, #0
    479e:	d12e      	bne.n	47fe <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    47a0:	6a37      	ldr	r7, [r6, #32]
    47a2:	b2c0      	uxtb	r0, r0
    47a4:	4b62      	ldr	r3, [pc, #392]	; (4930 <usart_init+0x2a0>)
    47a6:	4798      	blx	r3
    47a8:	1c01      	adds	r1, r0, #0
    47aa:	1c38      	adds	r0, r7, #0
    47ac:	466a      	mov	r2, sp
    47ae:	3226      	adds	r2, #38	; 0x26
    47b0:	4b60      	ldr	r3, [pc, #384]	; (4934 <usart_init+0x2a4>)
    47b2:	4798      	blx	r3
    47b4:	1c03      	adds	r3, r0, #0
    47b6:	e01f      	b.n	47f8 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    47b8:	2327      	movs	r3, #39	; 0x27
    47ba:	5cf3      	ldrb	r3, [r6, r3]
    47bc:	2b00      	cmp	r3, #0
    47be:	d00a      	beq.n	47d6 <usart_init+0x146>
				status_code =
    47c0:	9a06      	ldr	r2, [sp, #24]
    47c2:	9200      	str	r2, [sp, #0]
    47c4:	6a30      	ldr	r0, [r6, #32]
    47c6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    47c8:	466a      	mov	r2, sp
    47ca:	3226      	adds	r2, #38	; 0x26
    47cc:	1c3b      	adds	r3, r7, #0
    47ce:	4f5a      	ldr	r7, [pc, #360]	; (4938 <usart_init+0x2a8>)
    47d0:	47b8      	blx	r7
    47d2:	1c03      	adds	r3, r0, #0
    47d4:	e010      	b.n	47f8 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    47d6:	6a31      	ldr	r1, [r6, #32]
    47d8:	9107      	str	r1, [sp, #28]
    47da:	b2c0      	uxtb	r0, r0
    47dc:	4b54      	ldr	r3, [pc, #336]	; (4930 <usart_init+0x2a0>)
    47de:	4798      	blx	r3
    47e0:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    47e2:	9a06      	ldr	r2, [sp, #24]
    47e4:	9200      	str	r2, [sp, #0]
    47e6:	9807      	ldr	r0, [sp, #28]
    47e8:	466a      	mov	r2, sp
    47ea:	3226      	adds	r2, #38	; 0x26
    47ec:	1c3b      	adds	r3, r7, #0
    47ee:	4f52      	ldr	r7, [pc, #328]	; (4938 <usart_init+0x2a8>)
    47f0:	47b8      	blx	r7
    47f2:	1c03      	adds	r3, r0, #0
    47f4:	e000      	b.n	47f8 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    47f6:	2300      	movs	r3, #0
    47f8:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
    47fa:	d000      	beq.n	47fe <usart_init+0x16e>
    47fc:	e086      	b.n	490c <usart_init+0x27c>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    47fe:	7e73      	ldrb	r3, [r6, #25]
    4800:	2b00      	cmp	r3, #0
    4802:	d002      	beq.n	480a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4804:	7eb3      	ldrb	r3, [r6, #26]
    4806:	4641      	mov	r1, r8
    4808:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    480a:	682a      	ldr	r2, [r5, #0]
    480c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    480e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4810:	2b00      	cmp	r3, #0
    4812:	d1fc      	bne.n	480e <usart_init+0x17e>
    4814:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4816:	466b      	mov	r3, sp
    4818:	3326      	adds	r3, #38	; 0x26
    481a:	881b      	ldrh	r3, [r3, #0]
    481c:	4642      	mov	r2, r8
    481e:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4820:	464b      	mov	r3, r9
    4822:	9f03      	ldr	r7, [sp, #12]
    4824:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    4826:	9f04      	ldr	r7, [sp, #16]
    4828:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    482a:	6871      	ldr	r1, [r6, #4]
    482c:	430b      	orrs	r3, r1
		config->sample_rate |
    482e:	9f02      	ldr	r7, [sp, #8]
    4830:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4832:	4652      	mov	r2, sl
    4834:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4836:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4838:	4659      	mov	r1, fp
    483a:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    483c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    483e:	2327      	movs	r3, #39	; 0x27
    4840:	5cf3      	ldrb	r3, [r6, r3]
    4842:	2b00      	cmp	r3, #0
    4844:	d101      	bne.n	484a <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    4846:	2304      	movs	r3, #4
    4848:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    484a:	7e71      	ldrb	r1, [r6, #25]
    484c:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    484e:	7f33      	ldrb	r3, [r6, #28]
    4850:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4852:	4319      	orrs	r1, r3
    4854:	7af2      	ldrb	r2, [r6, #11]
    4856:	7ab3      	ldrb	r3, [r6, #10]
    4858:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    485a:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    485c:	7f73      	ldrb	r3, [r6, #29]
    485e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4860:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4862:	2324      	movs	r3, #36	; 0x24
    4864:	5cf3      	ldrb	r3, [r6, r3]
    4866:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4868:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    486a:	2325      	movs	r3, #37	; 0x25
    486c:	5cf3      	ldrb	r3, [r6, r3]
    486e:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4870:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4872:	8933      	ldrh	r3, [r6, #8]
    4874:	2bff      	cmp	r3, #255	; 0xff
    4876:	d007      	beq.n	4888 <usart_init+0x1f8>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4878:	7ef2      	ldrb	r2, [r6, #27]
    487a:	2a00      	cmp	r2, #0
    487c:	d002      	beq.n	4884 <usart_init+0x1f4>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    487e:	22a0      	movs	r2, #160	; 0xa0
    4880:	04d2      	lsls	r2, r2, #19
    4882:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    4884:	4319      	orrs	r1, r3
    4886:	e005      	b.n	4894 <usart_init+0x204>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4888:	7ef3      	ldrb	r3, [r6, #27]
    488a:	2b00      	cmp	r3, #0
    488c:	d002      	beq.n	4894 <usart_init+0x204>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    488e:	2380      	movs	r3, #128	; 0x80
    4890:	04db      	lsls	r3, r3, #19
    4892:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4894:	232c      	movs	r3, #44	; 0x2c
    4896:	5cf3      	ldrb	r3, [r6, r3]
    4898:	2b00      	cmp	r3, #0
    489a:	d103      	bne.n	48a4 <usart_init+0x214>
    489c:	4b27      	ldr	r3, [pc, #156]	; (493c <usart_init+0x2ac>)
    489e:	789b      	ldrb	r3, [r3, #2]
    48a0:	079a      	lsls	r2, r3, #30
    48a2:	d501      	bpl.n	48a8 <usart_init+0x218>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    48a4:	2380      	movs	r3, #128	; 0x80
    48a6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    48a8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    48aa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    48ac:	2b00      	cmp	r3, #0
    48ae:	d1fc      	bne.n	48aa <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    48b0:	4643      	mov	r3, r8
    48b2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    48b4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    48b6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    48b8:	2b00      	cmp	r3, #0
    48ba:	d1fc      	bne.n	48b6 <usart_init+0x226>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    48bc:	4641      	mov	r1, r8
    48be:	600f      	str	r7, [r1, #0]
    48c0:	ab0e      	add	r3, sp, #56	; 0x38
    48c2:	2280      	movs	r2, #128	; 0x80
    48c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    48c6:	2200      	movs	r2, #0
    48c8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    48ca:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    48cc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    48ce:	6b32      	ldr	r2, [r6, #48]	; 0x30
    48d0:	920a      	str	r2, [sp, #40]	; 0x28
    48d2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    48d4:	930b      	str	r3, [sp, #44]	; 0x2c
    48d6:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    48d8:	970c      	str	r7, [sp, #48]	; 0x30
    48da:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    48dc:	960d      	str	r6, [sp, #52]	; 0x34
    48de:	2500      	movs	r5, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    48e0:	ae0e      	add	r6, sp, #56	; 0x38
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    48e2:	4f17      	ldr	r7, [pc, #92]	; (4940 <usart_init+0x2b0>)
    48e4:	b2e9      	uxtb	r1, r5
    48e6:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    48e8:	aa0a      	add	r2, sp, #40	; 0x28
    48ea:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    48ec:	2800      	cmp	r0, #0
    48ee:	d102      	bne.n	48f6 <usart_init+0x266>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    48f0:	1c20      	adds	r0, r4, #0
    48f2:	4a14      	ldr	r2, [pc, #80]	; (4944 <usart_init+0x2b4>)
    48f4:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    48f6:	1c43      	adds	r3, r0, #1
    48f8:	d004      	beq.n	4904 <usart_init+0x274>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    48fa:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    48fc:	0c00      	lsrs	r0, r0, #16
    48fe:	b2c0      	uxtb	r0, r0
    4900:	1c31      	adds	r1, r6, #0
    4902:	47b8      	blx	r7
    4904:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4906:	2d04      	cmp	r5, #4
    4908:	d1ec      	bne.n	48e4 <usart_init+0x254>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    490a:	2000      	movs	r0, #0
}
    490c:	b011      	add	sp, #68	; 0x44
    490e:	bc3c      	pop	{r2, r3, r4, r5}
    4910:	4690      	mov	r8, r2
    4912:	4699      	mov	r9, r3
    4914:	46a2      	mov	sl, r4
    4916:	46ab      	mov	fp, r5
    4918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	0000458d 	.word	0x0000458d
    4920:	40000400 	.word	0x40000400
    4924:	00004fa1 	.word	0x00004fa1
    4928:	00004f15 	.word	0x00004f15
    492c:	000043b1 	.word	0x000043b1
    4930:	00004fbd 	.word	0x00004fbd
    4934:	000041d5 	.word	0x000041d5
    4938:	00004201 	.word	0x00004201
    493c:	41002000 	.word	0x41002000
    4940:	0000507d 	.word	0x0000507d
    4944:	00004401 	.word	0x00004401

00004948 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    4948:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    494a:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    494c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    494e:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4950:	2a00      	cmp	r2, #0
    4952:	d00c      	beq.n	496e <usart_write_wait+0x26>
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    4954:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
    4956:	2005      	movs	r0, #5
		return STATUS_BUSY;
	}

#else
	/* Check if USART is ready for new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)) {
    4958:	07d4      	lsls	r4, r2, #31
    495a:	d508      	bpl.n	496e <usart_write_wait+0x26>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    495c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    495e:	2a00      	cmp	r2, #0
    4960:	d1fc      	bne.n	495c <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    4962:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4964:	2102      	movs	r1, #2
    4966:	7e1a      	ldrb	r2, [r3, #24]
    4968:	420a      	tst	r2, r1
    496a:	d0fc      	beq.n	4966 <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    496c:	2000      	movs	r0, #0
}
    496e:	bd10      	pop	{r4, pc}

00004970 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4970:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4972:	6803      	ldr	r3, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4974:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4976:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4978:	2a00      	cmp	r2, #0
    497a:	d02f      	beq.n	49dc <usart_read_wait+0x6c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    497c:	7e1a      	ldrb	r2, [r3, #24]
		/* Return error code */
		return STATUS_BUSY;
    497e:	2005      	movs	r0, #5
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4980:	0754      	lsls	r4, r2, #29
    4982:	d52b      	bpl.n	49dc <usart_read_wait+0x6c>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4984:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4986:	2a00      	cmp	r2, #0
    4988:	d1fc      	bne.n	4984 <usart_read_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    498a:	8b5a      	ldrh	r2, [r3, #26]
    498c:	b2d2      	uxtb	r2, r2

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    498e:	0690      	lsls	r0, r2, #26
    4990:	d021      	beq.n	49d6 <usart_read_wait+0x66>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4992:	0794      	lsls	r4, r2, #30
    4994:	d503      	bpl.n	499e <usart_read_wait+0x2e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4996:	2202      	movs	r2, #2
    4998:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    499a:	201a      	movs	r0, #26
    499c:	e01e      	b.n	49dc <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    499e:	0750      	lsls	r0, r2, #29
    49a0:	d503      	bpl.n	49aa <usart_read_wait+0x3a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    49a2:	2204      	movs	r2, #4
    49a4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    49a6:	201e      	movs	r0, #30
    49a8:	e018      	b.n	49dc <usart_read_wait+0x6c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    49aa:	07d4      	lsls	r4, r2, #31
    49ac:	d503      	bpl.n	49b6 <usart_read_wait+0x46>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    49ae:	2201      	movs	r2, #1
    49b0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    49b2:	2013      	movs	r0, #19
    49b4:	e012      	b.n	49dc <usart_read_wait+0x6c>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    49b6:	06d0      	lsls	r0, r2, #27
    49b8:	d505      	bpl.n	49c6 <usart_read_wait+0x56>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    49ba:	8b59      	ldrh	r1, [r3, #26]
    49bc:	2210      	movs	r2, #16
    49be:	430a      	orrs	r2, r1
    49c0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    49c2:	2042      	movs	r0, #66	; 0x42
    49c4:	e00a      	b.n	49dc <usart_read_wait+0x6c>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    49c6:	0694      	lsls	r4, r2, #26
    49c8:	d505      	bpl.n	49d6 <usart_read_wait+0x66>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    49ca:	8b59      	ldrh	r1, [r3, #26]
    49cc:	2220      	movs	r2, #32
    49ce:	430a      	orrs	r2, r1
    49d0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    49d2:	2041      	movs	r0, #65	; 0x41
    49d4:	e002      	b.n	49dc <usart_read_wait+0x6c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    49d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    49d8:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    49da:	2000      	movs	r0, #0
}
    49dc:	bd10      	pop	{r4, pc}
    49de:	46c0      	nop			; (mov r8, r8)

000049e0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    49e0:	b508      	push	{r3, lr}
	switch (clock_source) {
    49e2:	2808      	cmp	r0, #8
    49e4:	d834      	bhi.n	4a50 <system_clock_source_get_hz+0x70>
    49e6:	0080      	lsls	r0, r0, #2
    49e8:	4b1b      	ldr	r3, [pc, #108]	; (4a58 <system_clock_source_get_hz+0x78>)
    49ea:	581b      	ldr	r3, [r3, r0]
    49ec:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    49ee:	2080      	movs	r0, #128	; 0x80
    49f0:	0200      	lsls	r0, r0, #8
    49f2:	e030      	b.n	4a56 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    49f4:	4b19      	ldr	r3, [pc, #100]	; (4a5c <system_clock_source_get_hz+0x7c>)
    49f6:	6918      	ldr	r0, [r3, #16]
    49f8:	e02d      	b.n	4a56 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    49fa:	4b19      	ldr	r3, [pc, #100]	; (4a60 <system_clock_source_get_hz+0x80>)
    49fc:	6a18      	ldr	r0, [r3, #32]
    49fe:	0580      	lsls	r0, r0, #22
    4a00:	0f80      	lsrs	r0, r0, #30
    4a02:	4b18      	ldr	r3, [pc, #96]	; (4a64 <system_clock_source_get_hz+0x84>)
    4a04:	40c3      	lsrs	r3, r0
    4a06:	1c18      	adds	r0, r3, #0
    4a08:	e025      	b.n	4a56 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4a0a:	4b14      	ldr	r3, [pc, #80]	; (4a5c <system_clock_source_get_hz+0x7c>)
    4a0c:	6958      	ldr	r0, [r3, #20]
    4a0e:	e022      	b.n	4a56 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4a10:	4b12      	ldr	r3, [pc, #72]	; (4a5c <system_clock_source_get_hz+0x7c>)
    4a12:	681b      	ldr	r3, [r3, #0]
    4a14:	2002      	movs	r0, #2
    4a16:	4018      	ands	r0, r3
    4a18:	d01d      	beq.n	4a56 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4a1a:	4911      	ldr	r1, [pc, #68]	; (4a60 <system_clock_source_get_hz+0x80>)
    4a1c:	2210      	movs	r2, #16
    4a1e:	68cb      	ldr	r3, [r1, #12]
    4a20:	421a      	tst	r2, r3
    4a22:	d0fc      	beq.n	4a1e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4a24:	4b0d      	ldr	r3, [pc, #52]	; (4a5c <system_clock_source_get_hz+0x7c>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	075a      	lsls	r2, r3, #29
    4a2a:	d513      	bpl.n	4a54 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4a2c:	2000      	movs	r0, #0
    4a2e:	4b0e      	ldr	r3, [pc, #56]	; (4a68 <system_clock_source_get_hz+0x88>)
    4a30:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4a32:	4b0a      	ldr	r3, [pc, #40]	; (4a5c <system_clock_source_get_hz+0x7c>)
    4a34:	689b      	ldr	r3, [r3, #8]
    4a36:	041b      	lsls	r3, r3, #16
    4a38:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4a3a:	4358      	muls	r0, r3
    4a3c:	e00b      	b.n	4a56 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4a3e:	2350      	movs	r3, #80	; 0x50
    4a40:	4a07      	ldr	r2, [pc, #28]	; (4a60 <system_clock_source_get_hz+0x80>)
    4a42:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4a44:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4a46:	075a      	lsls	r2, r3, #29
    4a48:	d505      	bpl.n	4a56 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4a4a:	4b04      	ldr	r3, [pc, #16]	; (4a5c <system_clock_source_get_hz+0x7c>)
    4a4c:	68d8      	ldr	r0, [r3, #12]
    4a4e:	e002      	b.n	4a56 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    4a50:	2000      	movs	r0, #0
    4a52:	e000      	b.n	4a56 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4a54:	4805      	ldr	r0, [pc, #20]	; (4a6c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4a56:	bd08      	pop	{r3, pc}
    4a58:	00008e7c 	.word	0x00008e7c
    4a5c:	20000bd8 	.word	0x20000bd8
    4a60:	40000800 	.word	0x40000800
    4a64:	007a1200 	.word	0x007a1200
    4a68:	00004fbd 	.word	0x00004fbd
    4a6c:	02dc6c00 	.word	0x02dc6c00

00004a70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4a70:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4a72:	4b0c      	ldr	r3, [pc, #48]	; (4aa4 <system_clock_source_osc8m_set_config+0x34>)
    4a74:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4a76:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4a78:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4a7a:	7840      	ldrb	r0, [r0, #1]
    4a7c:	2201      	movs	r2, #1
    4a7e:	4010      	ands	r0, r2
    4a80:	0180      	lsls	r0, r0, #6
    4a82:	2640      	movs	r6, #64	; 0x40
    4a84:	43b4      	bics	r4, r6
    4a86:	4304      	orrs	r4, r0
    4a88:	402a      	ands	r2, r5
    4a8a:	01d0      	lsls	r0, r2, #7
    4a8c:	2280      	movs	r2, #128	; 0x80
    4a8e:	4394      	bics	r4, r2
    4a90:	1c22      	adds	r2, r4, #0
    4a92:	4302      	orrs	r2, r0
    4a94:	2003      	movs	r0, #3
    4a96:	4001      	ands	r1, r0
    4a98:	0209      	lsls	r1, r1, #8
    4a9a:	4803      	ldr	r0, [pc, #12]	; (4aa8 <system_clock_source_osc8m_set_config+0x38>)
    4a9c:	4002      	ands	r2, r0
    4a9e:	430a      	orrs	r2, r1
    4aa0:	621a      	str	r2, [r3, #32]
}
    4aa2:	bd70      	pop	{r4, r5, r6, pc}
    4aa4:	40000800 	.word	0x40000800
    4aa8:	fffffcff 	.word	0xfffffcff

00004aac <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aae:	464f      	mov	r7, r9
    4ab0:	4646      	mov	r6, r8
    4ab2:	b4c0      	push	{r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    4ab4:	4a19      	ldr	r2, [pc, #100]	; (4b1c <system_clock_source_osc32k_set_config+0x70>)
    4ab6:	6994      	ldr	r4, [r2, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4ab8:	7841      	ldrb	r1, [r0, #1]
    4aba:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    4abc:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4abe:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4ac0:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    4ac2:	7943      	ldrb	r3, [r0, #5]
    4ac4:	4699      	mov	r9, r3

	SYSCTRL->OSC32K  = temp;
    4ac6:	7880      	ldrb	r0, [r0, #2]
    4ac8:	2301      	movs	r3, #1
    4aca:	4018      	ands	r0, r3
    4acc:	0080      	lsls	r0, r0, #2
    4ace:	2104      	movs	r1, #4
    4ad0:	438c      	bics	r4, r1
    4ad2:	4304      	orrs	r4, r0
    4ad4:	4660      	mov	r0, ip
    4ad6:	4018      	ands	r0, r3
    4ad8:	00c0      	lsls	r0, r0, #3
    4ada:	2108      	movs	r1, #8
    4adc:	438c      	bics	r4, r1
    4ade:	4304      	orrs	r4, r0
    4ae0:	1c18      	adds	r0, r3, #0
    4ae2:	4038      	ands	r0, r7
    4ae4:	0180      	lsls	r0, r0, #6
    4ae6:	2740      	movs	r7, #64	; 0x40
    4ae8:	43bc      	bics	r4, r7
    4aea:	4304      	orrs	r4, r0
    4aec:	1c18      	adds	r0, r3, #0
    4aee:	4030      	ands	r0, r6
    4af0:	01c0      	lsls	r0, r0, #7
    4af2:	2680      	movs	r6, #128	; 0x80
    4af4:	43b4      	bics	r4, r6
    4af6:	4304      	orrs	r4, r0
    4af8:	2007      	movs	r0, #7
    4afa:	4028      	ands	r0, r5
    4afc:	0200      	lsls	r0, r0, #8
    4afe:	4d08      	ldr	r5, [pc, #32]	; (4b20 <system_clock_source_osc32k_set_config+0x74>)
    4b00:	402c      	ands	r4, r5
    4b02:	4304      	orrs	r4, r0
    4b04:	4649      	mov	r1, r9
    4b06:	400b      	ands	r3, r1
    4b08:	0319      	lsls	r1, r3, #12
    4b0a:	4806      	ldr	r0, [pc, #24]	; (4b24 <system_clock_source_osc32k_set_config+0x78>)
    4b0c:	1c23      	adds	r3, r4, #0
    4b0e:	4003      	ands	r3, r0
    4b10:	430b      	orrs	r3, r1
    4b12:	6193      	str	r3, [r2, #24]
}
    4b14:	bc0c      	pop	{r2, r3}
    4b16:	4690      	mov	r8, r2
    4b18:	4699      	mov	r9, r3
    4b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b1c:	40000800 	.word	0x40000800
    4b20:	fffff8ff 	.word	0xfffff8ff
    4b24:	ffffefff 	.word	0xffffefff

00004b28 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4b28:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4b2a:	7a02      	ldrb	r2, [r0, #8]
    4b2c:	0692      	lsls	r2, r2, #26
    4b2e:	0c12      	lsrs	r2, r2, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4b30:	8943      	ldrh	r3, [r0, #10]
    4b32:	059b      	lsls	r3, r3, #22
    4b34:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4b36:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    4b38:	4b15      	ldr	r3, [pc, #84]	; (4b90 <system_clock_source_dfll_set_config+0x68>)
    4b3a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    4b3c:	8881      	ldrh	r1, [r0, #4]
    4b3e:	8842      	ldrh	r2, [r0, #2]
    4b40:	4311      	orrs	r1, r2
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4b42:	79c4      	ldrb	r4, [r0, #7]
    4b44:	7982      	ldrb	r2, [r0, #6]
    4b46:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4b48:	430a      	orrs	r2, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4b4a:	7841      	ldrb	r1, [r0, #1]
    4b4c:	01c9      	lsls	r1, r1, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4b4e:	430a      	orrs	r2, r1
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    4b50:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4b52:	7803      	ldrb	r3, [r0, #0]
    4b54:	2b04      	cmp	r3, #4
    4b56:	d10f      	bne.n	4b78 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4b58:	7b02      	ldrb	r2, [r0, #12]
    4b5a:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4b5c:	8a03      	ldrh	r3, [r0, #16]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4b5e:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4b60:	89c3      	ldrh	r3, [r0, #14]
    4b62:	041b      	lsls	r3, r3, #16
    4b64:	490b      	ldr	r1, [pc, #44]	; (4b94 <system_clock_source_dfll_set_config+0x6c>)
    4b66:	400b      	ands	r3, r1
    4b68:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4b6a:	4b09      	ldr	r3, [pc, #36]	; (4b90 <system_clock_source_dfll_set_config+0x68>)
    4b6c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4b6e:	6819      	ldr	r1, [r3, #0]
    4b70:	2204      	movs	r2, #4
    4b72:	430a      	orrs	r2, r1
    4b74:	601a      	str	r2, [r3, #0]
    4b76:	e009      	b.n	4b8c <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4b78:	2b20      	cmp	r3, #32
    4b7a:	d107      	bne.n	4b8c <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
    4b7c:	8a02      	ldrh	r2, [r0, #16]
    4b7e:	4b04      	ldr	r3, [pc, #16]	; (4b90 <system_clock_source_dfll_set_config+0x68>)
    4b80:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4b82:	6819      	ldr	r1, [r3, #0]
    4b84:	2284      	movs	r2, #132	; 0x84
    4b86:	00d2      	lsls	r2, r2, #3
    4b88:	430a      	orrs	r2, r1
    4b8a:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	20000bd8 	.word	0x20000bd8
    4b94:	03ff0000 	.word	0x03ff0000

00004b98 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4b98:	2808      	cmp	r0, #8
    4b9a:	d843      	bhi.n	4c24 <system_clock_source_enable+0x8c>
    4b9c:	0080      	lsls	r0, r0, #2
    4b9e:	4b22      	ldr	r3, [pc, #136]	; (4c28 <system_clock_source_enable+0x90>)
    4ba0:	581b      	ldr	r3, [r3, r0]
    4ba2:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4ba4:	2000      	movs	r0, #0
    4ba6:	e03e      	b.n	4c26 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4ba8:	4b20      	ldr	r3, [pc, #128]	; (4c2c <system_clock_source_enable+0x94>)
    4baa:	6a19      	ldr	r1, [r3, #32]
    4bac:	2202      	movs	r2, #2
    4bae:	430a      	orrs	r2, r1
    4bb0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    4bb2:	2000      	movs	r0, #0
    4bb4:	e037      	b.n	4c26 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4bb6:	4b1d      	ldr	r3, [pc, #116]	; (4c2c <system_clock_source_enable+0x94>)
    4bb8:	6999      	ldr	r1, [r3, #24]
    4bba:	2202      	movs	r2, #2
    4bbc:	430a      	orrs	r2, r1
    4bbe:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bc0:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4bc2:	e030      	b.n	4c26 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4bc4:	4b19      	ldr	r3, [pc, #100]	; (4c2c <system_clock_source_enable+0x94>)
    4bc6:	8a19      	ldrh	r1, [r3, #16]
    4bc8:	2202      	movs	r2, #2
    4bca:	430a      	orrs	r2, r1
    4bcc:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bce:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4bd0:	e029      	b.n	4c26 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4bd2:	4b16      	ldr	r3, [pc, #88]	; (4c2c <system_clock_source_enable+0x94>)
    4bd4:	8a99      	ldrh	r1, [r3, #20]
    4bd6:	2202      	movs	r2, #2
    4bd8:	430a      	orrs	r2, r1
    4bda:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4bdc:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4bde:	e022      	b.n	4c26 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4be0:	4b13      	ldr	r3, [pc, #76]	; (4c30 <system_clock_source_enable+0x98>)
    4be2:	6819      	ldr	r1, [r3, #0]
    4be4:	2202      	movs	r2, #2
    4be6:	430a      	orrs	r2, r1
    4be8:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4bea:	681a      	ldr	r2, [r3, #0]
    4bec:	4b11      	ldr	r3, [pc, #68]	; (4c34 <system_clock_source_enable+0x9c>)
    4bee:	401a      	ands	r2, r3
    4bf0:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <system_clock_source_enable+0x94>)
    4bf2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bf4:	1c19      	adds	r1, r3, #0
    4bf6:	2210      	movs	r2, #16
    4bf8:	68cb      	ldr	r3, [r1, #12]
    4bfa:	421a      	tst	r2, r3
    4bfc:	d0fc      	beq.n	4bf8 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4bfe:	4a0c      	ldr	r2, [pc, #48]	; (4c30 <system_clock_source_enable+0x98>)
    4c00:	6891      	ldr	r1, [r2, #8]
    4c02:	4b0a      	ldr	r3, [pc, #40]	; (4c2c <system_clock_source_enable+0x94>)
    4c04:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4c06:	6851      	ldr	r1, [r2, #4]
    4c08:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4c0a:	6812      	ldr	r2, [r2, #0]
    4c0c:	b292      	uxth	r2, r2
    4c0e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c10:	2000      	movs	r0, #0
    4c12:	e008      	b.n	4c26 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4c14:	4a05      	ldr	r2, [pc, #20]	; (4c2c <system_clock_source_enable+0x94>)
    4c16:	2344      	movs	r3, #68	; 0x44
    4c18:	5cd0      	ldrb	r0, [r2, r3]
    4c1a:	2102      	movs	r1, #2
    4c1c:	4301      	orrs	r1, r0
    4c1e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4c20:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4c22:	e000      	b.n	4c26 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4c24:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    4c26:	4770      	bx	lr
    4c28:	00008ea0 	.word	0x00008ea0
    4c2c:	40000800 	.word	0x40000800
    4c30:	20000bd8 	.word	0x20000bd8
    4c34:	0000ff7f 	.word	0x0000ff7f

00004c38 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    4c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c3a:	464f      	mov	r7, r9
    4c3c:	4646      	mov	r6, r8
    4c3e:	b4c0      	push	{r6, r7}
    4c40:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4c42:	4b3c      	ldr	r3, [pc, #240]	; (4d34 <system_clock_init+0xfc>)
    4c44:	22c2      	movs	r2, #194	; 0xc2
    4c46:	00d2      	lsls	r2, r2, #3
    4c48:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c4a:	4a3b      	ldr	r2, [pc, #236]	; (4d38 <system_clock_init+0x100>)
    4c4c:	6851      	ldr	r1, [r2, #4]
    4c4e:	201e      	movs	r0, #30
    4c50:	4381      	bics	r1, r0
    4c52:	2704      	movs	r7, #4
    4c54:	4339      	orrs	r1, r7
    4c56:	6051      	str	r1, [r2, #4]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    4c58:	4a38      	ldr	r2, [pc, #224]	; (4d3c <system_clock_init+0x104>)
    4c5a:	6811      	ldr	r1, [r2, #0]
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    4c5c:	04c9      	lsls	r1, r1, #19
    4c5e:	0e49      	lsrs	r1, r1, #25
    4c60:	0409      	lsls	r1, r1, #16
    4c62:	6998      	ldr	r0, [r3, #24]
    4c64:	4a36      	ldr	r2, [pc, #216]	; (4d40 <system_clock_init+0x108>)
    4c66:	4002      	ands	r2, r0
    4c68:	430a      	orrs	r2, r1
    4c6a:	619a      	str	r2, [r3, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    4c6c:	a80a      	add	r0, sp, #40	; 0x28
    4c6e:	2501      	movs	r5, #1
    4c70:	7045      	strb	r5, [r0, #1]
	config->enable_32khz_output = true;
    4c72:	7085      	strb	r5, [r0, #2]
	config->run_in_standby      = false;
    4c74:	2400      	movs	r4, #0
    4c76:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    4c78:	7105      	strb	r5, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    4c7a:	2207      	movs	r2, #7
    4c7c:	4691      	mov	r9, r2
    4c7e:	7002      	strb	r2, [r0, #0]
	config->write_once          = false;
    4c80:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4c82:	4b30      	ldr	r3, [pc, #192]	; (4d44 <system_clock_init+0x10c>)
    4c84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    4c86:	2004      	movs	r0, #4
    4c88:	4a2f      	ldr	r2, [pc, #188]	; (4d48 <system_clock_init+0x110>)
    4c8a:	4690      	mov	r8, r2
    4c8c:	4790      	blx	r2
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4c8e:	a805      	add	r0, sp, #20
    4c90:	2600      	movs	r6, #0
    4c92:	8044      	strh	r4, [r0, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4c94:	8084      	strh	r4, [r0, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4c96:	7186      	strb	r6, [r0, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4c98:	71c6      	strb	r6, [r0, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    4c9a:	464b      	mov	r3, r9
    4c9c:	7203      	strb	r3, [r0, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4c9e:	233f      	movs	r3, #63	; 0x3f
    4ca0:	8143      	strh	r3, [r0, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4ca2:	7007      	strb	r7, [r0, #0]
	dfll_conf.on_demand      = false;
    4ca4:	7046      	strb	r6, [r0, #1]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4ca6:	22b7      	movs	r2, #183	; 0xb7
    4ca8:	00d2      	lsls	r2, r2, #3
    4caa:	8202      	strh	r2, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4cac:	464a      	mov	r2, r9
    4cae:	7302      	strb	r2, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4cb0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4cb2:	4b26      	ldr	r3, [pc, #152]	; (4d4c <system_clock_init+0x114>)
    4cb4:	4798      	blx	r3
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
	config->on_demand       = true;
    4cb6:	a804      	add	r0, sp, #16
    4cb8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4cba:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    4cbc:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4cbe:	4b24      	ldr	r3, [pc, #144]	; (4d50 <system_clock_init+0x118>)
    4cc0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4cc2:	2006      	movs	r0, #6
    4cc4:	47c0      	blx	r8


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4cc6:	4b23      	ldr	r3, [pc, #140]	; (4d54 <system_clock_init+0x11c>)
    4cc8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4cca:	ac01      	add	r4, sp, #4
    4ccc:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    4cce:	7066      	strb	r6, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    4cd0:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    4cd2:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4cd4:	7027      	strb	r7, [r4, #0]
    4cd6:	2001      	movs	r0, #1
    4cd8:	1c21      	adds	r1, r4, #0
    4cda:	4b1f      	ldr	r3, [pc, #124]	; (4d58 <system_clock_init+0x120>)
    4cdc:	4798      	blx	r3
    4cde:	2001      	movs	r0, #1
    4ce0:	4b1e      	ldr	r3, [pc, #120]	; (4d5c <system_clock_init+0x124>)
    4ce2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4ce4:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4ce6:	2000      	movs	r0, #0
    4ce8:	1c21      	adds	r1, r4, #0
    4cea:	4b1d      	ldr	r3, [pc, #116]	; (4d60 <system_clock_init+0x128>)
    4cec:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4cee:	2000      	movs	r0, #0
    4cf0:	4b1c      	ldr	r3, [pc, #112]	; (4d64 <system_clock_init+0x12c>)
    4cf2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4cf4:	2007      	movs	r0, #7
    4cf6:	47c0      	blx	r8

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4cf8:	490e      	ldr	r1, [pc, #56]	; (4d34 <system_clock_init+0xfc>)
    4cfa:	22d0      	movs	r2, #208	; 0xd0
    4cfc:	68cb      	ldr	r3, [r1, #12]
    4cfe:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4d00:	2bd0      	cmp	r3, #208	; 0xd0
    4d02:	d1fb      	bne.n	4cfc <system_clock_init+0xc4>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4d04:	4a18      	ldr	r2, [pc, #96]	; (4d68 <system_clock_init+0x130>)
    4d06:	2300      	movs	r3, #0
    4d08:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4d0a:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4d0c:	7293      	strb	r3, [r2, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4d0e:	a901      	add	r1, sp, #4
    4d10:	2201      	movs	r2, #1
    4d12:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4d14:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
	config->run_in_standby     = false;
    4d16:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4d18:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4d1a:	2307      	movs	r3, #7
    4d1c:	700b      	strb	r3, [r1, #0]
    4d1e:	2000      	movs	r0, #0
    4d20:	4b0d      	ldr	r3, [pc, #52]	; (4d58 <system_clock_init+0x120>)
    4d22:	4798      	blx	r3
    4d24:	2000      	movs	r0, #0
    4d26:	4b0d      	ldr	r3, [pc, #52]	; (4d5c <system_clock_init+0x124>)
    4d28:	4798      	blx	r3
#endif
}
    4d2a:	b00d      	add	sp, #52	; 0x34
    4d2c:	bc0c      	pop	{r2, r3}
    4d2e:	4690      	mov	r8, r2
    4d30:	4699      	mov	r9, r3
    4d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d34:	40000800 	.word	0x40000800
    4d38:	41004000 	.word	0x41004000
    4d3c:	00806024 	.word	0x00806024
    4d40:	ff80ffff 	.word	0xff80ffff
    4d44:	00004aad 	.word	0x00004aad
    4d48:	00004b99 	.word	0x00004b99
    4d4c:	00004b29 	.word	0x00004b29
    4d50:	00004a71 	.word	0x00004a71
    4d54:	00004d6d 	.word	0x00004d6d
    4d58:	00004d91 	.word	0x00004d91
    4d5c:	00004e45 	.word	0x00004e45
    4d60:	00004fa1 	.word	0x00004fa1
    4d64:	00004f15 	.word	0x00004f15
    4d68:	40000400 	.word	0x40000400

00004d6c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4d6c:	4b06      	ldr	r3, [pc, #24]	; (4d88 <system_gclk_init+0x1c>)
    4d6e:	6999      	ldr	r1, [r3, #24]
    4d70:	2208      	movs	r2, #8
    4d72:	430a      	orrs	r2, r1
    4d74:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4d76:	2201      	movs	r2, #1
    4d78:	4b04      	ldr	r3, [pc, #16]	; (4d8c <system_gclk_init+0x20>)
    4d7a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4d7c:	1c19      	adds	r1, r3, #0
    4d7e:	780b      	ldrb	r3, [r1, #0]
    4d80:	4213      	tst	r3, r2
    4d82:	d1fc      	bne.n	4d7e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4d84:	4770      	bx	lr
    4d86:	46c0      	nop			; (mov r8, r8)
    4d88:	40000400 	.word	0x40000400
    4d8c:	40000c00 	.word	0x40000c00

00004d90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d92:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4d94:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4d96:	780d      	ldrb	r5, [r1, #0]
    4d98:	022d      	lsls	r5, r5, #8
    4d9a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4d9c:	784b      	ldrb	r3, [r1, #1]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d002      	beq.n	4da8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4da2:	2380      	movs	r3, #128	; 0x80
    4da4:	02db      	lsls	r3, r3, #11
    4da6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4da8:	7a4b      	ldrb	r3, [r1, #9]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d002      	beq.n	4db4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4dae:	2380      	movs	r3, #128	; 0x80
    4db0:	031b      	lsls	r3, r3, #12
    4db2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4db4:	684c      	ldr	r4, [r1, #4]
    4db6:	2c01      	cmp	r4, #1
    4db8:	d917      	bls.n	4dea <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4dba:	1e63      	subs	r3, r4, #1
    4dbc:	421c      	tst	r4, r3
    4dbe:	d10f      	bne.n	4de0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4dc0:	2c02      	cmp	r4, #2
    4dc2:	d906      	bls.n	4dd2 <system_gclk_gen_set_config+0x42>
    4dc4:	2302      	movs	r3, #2
    4dc6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4dc8:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4dca:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4dcc:	429c      	cmp	r4, r3
    4dce:	d8fb      	bhi.n	4dc8 <system_gclk_gen_set_config+0x38>
    4dd0:	e000      	b.n	4dd4 <system_gclk_gen_set_config+0x44>
    4dd2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4dd4:	0217      	lsls	r7, r2, #8
    4dd6:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4dd8:	2380      	movs	r3, #128	; 0x80
    4dda:	035b      	lsls	r3, r3, #13
    4ddc:	431d      	orrs	r5, r3
    4dde:	e004      	b.n	4dea <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4de0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4de2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4de4:	2380      	movs	r3, #128	; 0x80
    4de6:	029b      	lsls	r3, r3, #10
    4de8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4dea:	7a0b      	ldrb	r3, [r1, #8]
    4dec:	2b00      	cmp	r3, #0
    4dee:	d002      	beq.n	4df6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4df0:	2380      	movs	r3, #128	; 0x80
    4df2:	039b      	lsls	r3, r3, #14
    4df4:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    4df6:	4a0f      	ldr	r2, [pc, #60]	; (4e34 <system_gclk_gen_set_config+0xa4>)
    4df8:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4dfa:	b25b      	sxtb	r3, r3
    4dfc:	2b00      	cmp	r3, #0
    4dfe:	dbfb      	blt.n	4df8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4e00:	4b0d      	ldr	r3, [pc, #52]	; (4e38 <system_gclk_gen_set_config+0xa8>)
    4e02:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4e04:	4b0d      	ldr	r3, [pc, #52]	; (4e3c <system_gclk_gen_set_config+0xac>)
    4e06:	701e      	strb	r6, [r3, #0]
    4e08:	4a0a      	ldr	r2, [pc, #40]	; (4e34 <system_gclk_gen_set_config+0xa4>)
    4e0a:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4e0c:	b25b      	sxtb	r3, r3
    4e0e:	2b00      	cmp	r3, #0
    4e10:	dbfb      	blt.n	4e0a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4e12:	4b08      	ldr	r3, [pc, #32]	; (4e34 <system_gclk_gen_set_config+0xa4>)
    4e14:	609f      	str	r7, [r3, #8]
    4e16:	1c1a      	adds	r2, r3, #0
    4e18:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4e1a:	b25b      	sxtb	r3, r3
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	dbfb      	blt.n	4e18 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4e20:	4b04      	ldr	r3, [pc, #16]	; (4e34 <system_gclk_gen_set_config+0xa4>)
    4e22:	6859      	ldr	r1, [r3, #4]
    4e24:	2280      	movs	r2, #128	; 0x80
    4e26:	0252      	lsls	r2, r2, #9
    4e28:	400a      	ands	r2, r1
    4e2a:	4315      	orrs	r5, r2
    4e2c:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4e2e:	4b04      	ldr	r3, [pc, #16]	; (4e40 <system_gclk_gen_set_config+0xb0>)
    4e30:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e34:	40000c00 	.word	0x40000c00
    4e38:	00003f2d 	.word	0x00003f2d
    4e3c:	40000c08 	.word	0x40000c08
    4e40:	00003f6d 	.word	0x00003f6d

00004e44 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4e44:	b510      	push	{r4, lr}
    4e46:	1c04      	adds	r4, r0, #0
    4e48:	4a0b      	ldr	r2, [pc, #44]	; (4e78 <system_gclk_gen_enable+0x34>)
    4e4a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e4c:	b25b      	sxtb	r3, r3
    4e4e:	2b00      	cmp	r3, #0
    4e50:	dbfb      	blt.n	4e4a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4e52:	4b0a      	ldr	r3, [pc, #40]	; (4e7c <system_gclk_gen_enable+0x38>)
    4e54:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e56:	4b0a      	ldr	r3, [pc, #40]	; (4e80 <system_gclk_gen_enable+0x3c>)
    4e58:	701c      	strb	r4, [r3, #0]
    4e5a:	4a07      	ldr	r2, [pc, #28]	; (4e78 <system_gclk_gen_enable+0x34>)
    4e5c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e5e:	b25b      	sxtb	r3, r3
    4e60:	2b00      	cmp	r3, #0
    4e62:	dbfb      	blt.n	4e5c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4e64:	4b04      	ldr	r3, [pc, #16]	; (4e78 <system_gclk_gen_enable+0x34>)
    4e66:	6859      	ldr	r1, [r3, #4]
    4e68:	2280      	movs	r2, #128	; 0x80
    4e6a:	0252      	lsls	r2, r2, #9
    4e6c:	430a      	orrs	r2, r1
    4e6e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4e70:	4b04      	ldr	r3, [pc, #16]	; (4e84 <system_gclk_gen_enable+0x40>)
    4e72:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e74:	bd10      	pop	{r4, pc}
    4e76:	46c0      	nop			; (mov r8, r8)
    4e78:	40000c00 	.word	0x40000c00
    4e7c:	00003f2d 	.word	0x00003f2d
    4e80:	40000c04 	.word	0x40000c04
    4e84:	00003f6d 	.word	0x00003f6d

00004e88 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4e88:	b570      	push	{r4, r5, r6, lr}
    4e8a:	1c04      	adds	r4, r0, #0
    4e8c:	4a1a      	ldr	r2, [pc, #104]	; (4ef8 <system_gclk_gen_get_hz+0x70>)
    4e8e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e90:	b25b      	sxtb	r3, r3
    4e92:	2b00      	cmp	r3, #0
    4e94:	dbfb      	blt.n	4e8e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4e96:	4b19      	ldr	r3, [pc, #100]	; (4efc <system_gclk_gen_get_hz+0x74>)
    4e98:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e9a:	4b19      	ldr	r3, [pc, #100]	; (4f00 <system_gclk_gen_get_hz+0x78>)
    4e9c:	701c      	strb	r4, [r3, #0]
    4e9e:	4a16      	ldr	r2, [pc, #88]	; (4ef8 <system_gclk_gen_get_hz+0x70>)
    4ea0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4ea2:	b25b      	sxtb	r3, r3
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	dbfb      	blt.n	4ea0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4ea8:	4e13      	ldr	r6, [pc, #76]	; (4ef8 <system_gclk_gen_get_hz+0x70>)
    4eaa:	6870      	ldr	r0, [r6, #4]
    4eac:	04c0      	lsls	r0, r0, #19
    4eae:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4eb0:	4b14      	ldr	r3, [pc, #80]	; (4f04 <system_gclk_gen_get_hz+0x7c>)
    4eb2:	4798      	blx	r3
    4eb4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4eb6:	4b12      	ldr	r3, [pc, #72]	; (4f00 <system_gclk_gen_get_hz+0x78>)
    4eb8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4eba:	6876      	ldr	r6, [r6, #4]
    4ebc:	02f6      	lsls	r6, r6, #11
    4ebe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4ec0:	4b11      	ldr	r3, [pc, #68]	; (4f08 <system_gclk_gen_get_hz+0x80>)
    4ec2:	701c      	strb	r4, [r3, #0]
    4ec4:	4a0c      	ldr	r2, [pc, #48]	; (4ef8 <system_gclk_gen_get_hz+0x70>)
    4ec6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4ec8:	b25b      	sxtb	r3, r3
    4eca:	2b00      	cmp	r3, #0
    4ecc:	dbfb      	blt.n	4ec6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4ece:	4b0a      	ldr	r3, [pc, #40]	; (4ef8 <system_gclk_gen_get_hz+0x70>)
    4ed0:	689c      	ldr	r4, [r3, #8]
    4ed2:	0a24      	lsrs	r4, r4, #8
    4ed4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4ed6:	4b0d      	ldr	r3, [pc, #52]	; (4f0c <system_gclk_gen_get_hz+0x84>)
    4ed8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4eda:	2e00      	cmp	r6, #0
    4edc:	d107      	bne.n	4eee <system_gclk_gen_get_hz+0x66>
    4ede:	2c01      	cmp	r4, #1
    4ee0:	d907      	bls.n	4ef2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4ee2:	1c28      	adds	r0, r5, #0
    4ee4:	1c21      	adds	r1, r4, #0
    4ee6:	4b0a      	ldr	r3, [pc, #40]	; (4f10 <system_gclk_gen_get_hz+0x88>)
    4ee8:	4798      	blx	r3
    4eea:	1c05      	adds	r5, r0, #0
    4eec:	e001      	b.n	4ef2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4eee:	3401      	adds	r4, #1
    4ef0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4ef2:	1c28      	adds	r0, r5, #0
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
    4ef6:	46c0      	nop			; (mov r8, r8)
    4ef8:	40000c00 	.word	0x40000c00
    4efc:	00003f2d 	.word	0x00003f2d
    4f00:	40000c04 	.word	0x40000c04
    4f04:	000049e1 	.word	0x000049e1
    4f08:	40000c08 	.word	0x40000c08
    4f0c:	00003f6d 	.word	0x00003f6d
    4f10:	000059c9 	.word	0x000059c9

00004f14 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4f14:	b510      	push	{r4, lr}
    4f16:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4f18:	4b06      	ldr	r3, [pc, #24]	; (4f34 <system_gclk_chan_enable+0x20>)
    4f1a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f1c:	4b06      	ldr	r3, [pc, #24]	; (4f38 <system_gclk_chan_enable+0x24>)
    4f1e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4f20:	4b06      	ldr	r3, [pc, #24]	; (4f3c <system_gclk_chan_enable+0x28>)
    4f22:	8859      	ldrh	r1, [r3, #2]
    4f24:	2280      	movs	r2, #128	; 0x80
    4f26:	01d2      	lsls	r2, r2, #7
    4f28:	430a      	orrs	r2, r1
    4f2a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4f2c:	4b04      	ldr	r3, [pc, #16]	; (4f40 <system_gclk_chan_enable+0x2c>)
    4f2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f30:	bd10      	pop	{r4, pc}
    4f32:	46c0      	nop			; (mov r8, r8)
    4f34:	00003f2d 	.word	0x00003f2d
    4f38:	40000c02 	.word	0x40000c02
    4f3c:	40000c00 	.word	0x40000c00
    4f40:	00003f6d 	.word	0x00003f6d

00004f44 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4f44:	b510      	push	{r4, lr}
    4f46:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4f48:	4b0f      	ldr	r3, [pc, #60]	; (4f88 <system_gclk_chan_disable+0x44>)
    4f4a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f4c:	4b0f      	ldr	r3, [pc, #60]	; (4f8c <system_gclk_chan_disable+0x48>)
    4f4e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4f50:	4b0f      	ldr	r3, [pc, #60]	; (4f90 <system_gclk_chan_disable+0x4c>)
    4f52:	8858      	ldrh	r0, [r3, #2]
    4f54:	0500      	lsls	r0, r0, #20
    4f56:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4f58:	8859      	ldrh	r1, [r3, #2]
    4f5a:	4a0e      	ldr	r2, [pc, #56]	; (4f94 <system_gclk_chan_disable+0x50>)
    4f5c:	400a      	ands	r2, r1
    4f5e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4f60:	8859      	ldrh	r1, [r3, #2]
    4f62:	4a0d      	ldr	r2, [pc, #52]	; (4f98 <system_gclk_chan_disable+0x54>)
    4f64:	400a      	ands	r2, r1
    4f66:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4f68:	1c19      	adds	r1, r3, #0
    4f6a:	2280      	movs	r2, #128	; 0x80
    4f6c:	01d2      	lsls	r2, r2, #7
    4f6e:	884b      	ldrh	r3, [r1, #2]
    4f70:	4213      	tst	r3, r2
    4f72:	d1fc      	bne.n	4f6e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4f74:	4b06      	ldr	r3, [pc, #24]	; (4f90 <system_gclk_chan_disable+0x4c>)
    4f76:	0201      	lsls	r1, r0, #8
    4f78:	8858      	ldrh	r0, [r3, #2]
    4f7a:	4a06      	ldr	r2, [pc, #24]	; (4f94 <system_gclk_chan_disable+0x50>)
    4f7c:	4002      	ands	r2, r0
    4f7e:	430a      	orrs	r2, r1
    4f80:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4f82:	4b06      	ldr	r3, [pc, #24]	; (4f9c <system_gclk_chan_disable+0x58>)
    4f84:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f86:	bd10      	pop	{r4, pc}
    4f88:	00003f2d 	.word	0x00003f2d
    4f8c:	40000c02 	.word	0x40000c02
    4f90:	40000c00 	.word	0x40000c00
    4f94:	fffff0ff 	.word	0xfffff0ff
    4f98:	ffffbfff 	.word	0xffffbfff
    4f9c:	00003f6d 	.word	0x00003f6d

00004fa0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    4fa0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4fa2:	780c      	ldrb	r4, [r1, #0]
    4fa4:	0224      	lsls	r4, r4, #8
    4fa6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    4fa8:	4b02      	ldr	r3, [pc, #8]	; (4fb4 <system_gclk_chan_set_config+0x14>)
    4faa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4fac:	b2a4      	uxth	r4, r4
    4fae:	4b02      	ldr	r3, [pc, #8]	; (4fb8 <system_gclk_chan_set_config+0x18>)
    4fb0:	805c      	strh	r4, [r3, #2]
}
    4fb2:	bd10      	pop	{r4, pc}
    4fb4:	00004f45 	.word	0x00004f45
    4fb8:	40000c00 	.word	0x40000c00

00004fbc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4fbc:	b510      	push	{r4, lr}
    4fbe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4fc0:	4b06      	ldr	r3, [pc, #24]	; (4fdc <system_gclk_chan_get_hz+0x20>)
    4fc2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4fc4:	4b06      	ldr	r3, [pc, #24]	; (4fe0 <system_gclk_chan_get_hz+0x24>)
    4fc6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4fc8:	4b06      	ldr	r3, [pc, #24]	; (4fe4 <system_gclk_chan_get_hz+0x28>)
    4fca:	885c      	ldrh	r4, [r3, #2]
    4fcc:	0524      	lsls	r4, r4, #20
    4fce:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4fd0:	4b05      	ldr	r3, [pc, #20]	; (4fe8 <system_gclk_chan_get_hz+0x2c>)
    4fd2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4fd4:	1c20      	adds	r0, r4, #0
    4fd6:	4b05      	ldr	r3, [pc, #20]	; (4fec <system_gclk_chan_get_hz+0x30>)
    4fd8:	4798      	blx	r3
}
    4fda:	bd10      	pop	{r4, pc}
    4fdc:	00003f2d 	.word	0x00003f2d
    4fe0:	40000c02 	.word	0x40000c02
    4fe4:	40000c00 	.word	0x40000c00
    4fe8:	00003f6d 	.word	0x00003f6d
    4fec:	00004e89 	.word	0x00004e89

00004ff0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4ff0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4ff2:	78d3      	ldrb	r3, [r2, #3]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d11e      	bne.n	5036 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4ff8:	7813      	ldrb	r3, [r2, #0]
    4ffa:	2b80      	cmp	r3, #128	; 0x80
    4ffc:	d004      	beq.n	5008 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4ffe:	061b      	lsls	r3, r3, #24
    5000:	2480      	movs	r4, #128	; 0x80
    5002:	0264      	lsls	r4, r4, #9
    5004:	4323      	orrs	r3, r4
    5006:	e000      	b.n	500a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5008:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    500a:	7854      	ldrb	r4, [r2, #1]
    500c:	2502      	movs	r5, #2
    500e:	43ac      	bics	r4, r5
    5010:	d10a      	bne.n	5028 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5012:	7894      	ldrb	r4, [r2, #2]
    5014:	2c00      	cmp	r4, #0
    5016:	d103      	bne.n	5020 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5018:	2480      	movs	r4, #128	; 0x80
    501a:	02a4      	lsls	r4, r4, #10
    501c:	4323      	orrs	r3, r4
    501e:	e002      	b.n	5026 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5020:	24c0      	movs	r4, #192	; 0xc0
    5022:	02e4      	lsls	r4, r4, #11
    5024:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5026:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5028:	7854      	ldrb	r4, [r2, #1]
    502a:	3c01      	subs	r4, #1
    502c:	2c01      	cmp	r4, #1
    502e:	d804      	bhi.n	503a <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5030:	4c11      	ldr	r4, [pc, #68]	; (5078 <_system_pinmux_config+0x88>)
    5032:	4023      	ands	r3, r4
    5034:	e001      	b.n	503a <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5036:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5038:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    503a:	040d      	lsls	r5, r1, #16
    503c:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    503e:	24a0      	movs	r4, #160	; 0xa0
    5040:	05e4      	lsls	r4, r4, #23
    5042:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5044:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5046:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5048:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    504a:	24d0      	movs	r4, #208	; 0xd0
    504c:	0624      	lsls	r4, r4, #24
    504e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5050:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5052:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5054:	78d4      	ldrb	r4, [r2, #3]
    5056:	2c00      	cmp	r4, #0
    5058:	d10c      	bne.n	5074 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    505a:	035c      	lsls	r4, r3, #13
    505c:	d505      	bpl.n	506a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    505e:	7893      	ldrb	r3, [r2, #2]
    5060:	2b01      	cmp	r3, #1
    5062:	d101      	bne.n	5068 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    5064:	6181      	str	r1, [r0, #24]
    5066:	e000      	b.n	506a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    5068:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    506a:	7853      	ldrb	r3, [r2, #1]
    506c:	3b01      	subs	r3, #1
    506e:	2b01      	cmp	r3, #1
    5070:	d800      	bhi.n	5074 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5072:	6081      	str	r1, [r0, #8]
		}
	}
}
    5074:	bd30      	pop	{r4, r5, pc}
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	fffbffff 	.word	0xfffbffff

0000507c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    507c:	b508      	push	{r3, lr}
    507e:	1c03      	adds	r3, r0, #0
    5080:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5082:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5084:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5086:	2900      	cmp	r1, #0
    5088:	d103      	bne.n	5092 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    508a:	0958      	lsrs	r0, r3, #5
    508c:	01c0      	lsls	r0, r0, #7
    508e:	4904      	ldr	r1, [pc, #16]	; (50a0 <system_pinmux_pin_set_config+0x24>)
    5090:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5092:	211f      	movs	r1, #31
    5094:	400b      	ands	r3, r1
    5096:	2101      	movs	r1, #1
    5098:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    509a:	4b02      	ldr	r3, [pc, #8]	; (50a4 <system_pinmux_pin_set_config+0x28>)
    509c:	4798      	blx	r3
}
    509e:	bd08      	pop	{r3, pc}
    50a0:	41004400 	.word	0x41004400
    50a4:	00004ff1 	.word	0x00004ff1

000050a8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    50a8:	4770      	bx	lr
    50aa:	46c0      	nop			; (mov r8, r8)

000050ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    50ac:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    50ae:	4b04      	ldr	r3, [pc, #16]	; (50c0 <system_init+0x14>)
    50b0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    50b2:	4b04      	ldr	r3, [pc, #16]	; (50c4 <system_init+0x18>)
    50b4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    50b6:	4b04      	ldr	r3, [pc, #16]	; (50c8 <system_init+0x1c>)
    50b8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    50ba:	4b04      	ldr	r3, [pc, #16]	; (50cc <system_init+0x20>)
    50bc:	4798      	blx	r3
}
    50be:	bd08      	pop	{r3, pc}
    50c0:	00004c39 	.word	0x00004c39
    50c4:	00003f9d 	.word	0x00003f9d
    50c8:	000050a9 	.word	0x000050a9
    50cc:	00003ff1 	.word	0x00003ff1

000050d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    50d0:	e7fe      	b.n	50d0 <Dummy_Handler>
    50d2:	46c0      	nop			; (mov r8, r8)

000050d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    50d4:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    50d6:	4b19      	ldr	r3, [pc, #100]	; (513c <Reset_Handler+0x68>)
    50d8:	4a19      	ldr	r2, [pc, #100]	; (5140 <Reset_Handler+0x6c>)
    50da:	429a      	cmp	r2, r3
    50dc:	d003      	beq.n	50e6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    50de:	4b19      	ldr	r3, [pc, #100]	; (5144 <Reset_Handler+0x70>)
    50e0:	4a16      	ldr	r2, [pc, #88]	; (513c <Reset_Handler+0x68>)
    50e2:	429a      	cmp	r2, r3
    50e4:	d304      	bcc.n	50f0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    50e6:	4b18      	ldr	r3, [pc, #96]	; (5148 <Reset_Handler+0x74>)
    50e8:	4a18      	ldr	r2, [pc, #96]	; (514c <Reset_Handler+0x78>)
    50ea:	429a      	cmp	r2, r3
    50ec:	d310      	bcc.n	5110 <Reset_Handler+0x3c>
    50ee:	e01b      	b.n	5128 <Reset_Handler+0x54>
    50f0:	4b17      	ldr	r3, [pc, #92]	; (5150 <Reset_Handler+0x7c>)
    50f2:	4814      	ldr	r0, [pc, #80]	; (5144 <Reset_Handler+0x70>)
    50f4:	3003      	adds	r0, #3
    50f6:	1ac0      	subs	r0, r0, r3
    50f8:	0880      	lsrs	r0, r0, #2
    50fa:	3001      	adds	r0, #1
    50fc:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    50fe:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    5100:	490e      	ldr	r1, [pc, #56]	; (513c <Reset_Handler+0x68>)
    5102:	4a0f      	ldr	r2, [pc, #60]	; (5140 <Reset_Handler+0x6c>)
    5104:	58d4      	ldr	r4, [r2, r3]
    5106:	50cc      	str	r4, [r1, r3]
    5108:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    510a:	4283      	cmp	r3, r0
    510c:	d1fa      	bne.n	5104 <Reset_Handler+0x30>
    510e:	e7ea      	b.n	50e6 <Reset_Handler+0x12>
    5110:	4b0e      	ldr	r3, [pc, #56]	; (514c <Reset_Handler+0x78>)
    5112:	1d1a      	adds	r2, r3, #4
    5114:	490c      	ldr	r1, [pc, #48]	; (5148 <Reset_Handler+0x74>)
    5116:	3103      	adds	r1, #3
    5118:	1a89      	subs	r1, r1, r2
    511a:	0889      	lsrs	r1, r1, #2
    511c:	0089      	lsls	r1, r1, #2
    511e:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    5120:	2100      	movs	r1, #0
    5122:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5124:	4293      	cmp	r3, r2
    5126:	d1fc      	bne.n	5122 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5128:	4b0a      	ldr	r3, [pc, #40]	; (5154 <Reset_Handler+0x80>)
    512a:	217f      	movs	r1, #127	; 0x7f
    512c:	4a0a      	ldr	r2, [pc, #40]	; (5158 <Reset_Handler+0x84>)
    512e:	438a      	bics	r2, r1
    5130:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    5132:	4b0a      	ldr	r3, [pc, #40]	; (515c <Reset_Handler+0x88>)
    5134:	4798      	blx	r3

        /* Branch to main function */
        main();
    5136:	4b0a      	ldr	r3, [pc, #40]	; (5160 <Reset_Handler+0x8c>)
    5138:	4798      	blx	r3
    513a:	e7fe      	b.n	513a <Reset_Handler+0x66>
    513c:	20000000 	.word	0x20000000
    5140:	00009540 	.word	0x00009540
    5144:	2000047c 	.word	0x2000047c
    5148:	20000df8 	.word	0x20000df8
    514c:	2000047c 	.word	0x2000047c
    5150:	20000004 	.word	0x20000004
    5154:	e000ed00 	.word	0xe000ed00
    5158:	00000000 	.word	0x00000000
    515c:	00007211 	.word	0x00007211
    5160:	00005451 	.word	0x00005451

00005164 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5164:	b5f0      	push	{r4, r5, r6, r7, lr}
    5166:	4647      	mov	r7, r8
    5168:	b480      	push	{r7}
    516a:	1c0c      	adds	r4, r1, #0
    516c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    516e:	2800      	cmp	r0, #0
    5170:	d10c      	bne.n	518c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    5172:	2a00      	cmp	r2, #0
    5174:	dd0d      	ble.n	5192 <_read+0x2e>
    5176:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5178:	4e09      	ldr	r6, [pc, #36]	; (51a0 <_read+0x3c>)
    517a:	4d0a      	ldr	r5, [pc, #40]	; (51a4 <_read+0x40>)
    517c:	6830      	ldr	r0, [r6, #0]
    517e:	1c21      	adds	r1, r4, #0
    5180:	682b      	ldr	r3, [r5, #0]
    5182:	4798      	blx	r3
		ptr++;
    5184:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    5186:	42bc      	cmp	r4, r7
    5188:	d1f8      	bne.n	517c <_read+0x18>
    518a:	e004      	b.n	5196 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    518c:	2001      	movs	r0, #1
    518e:	4240      	negs	r0, r0
    5190:	e002      	b.n	5198 <_read+0x34>
	}

	for (; len > 0; --len) {
    5192:	2000      	movs	r0, #0
    5194:	e000      	b.n	5198 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    5196:	4640      	mov	r0, r8
	}
	return nChars;
}
    5198:	bc04      	pop	{r2}
    519a:	4690      	mov	r8, r2
    519c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    519e:	46c0      	nop			; (mov r8, r8)
    51a0:	20000de8 	.word	0x20000de8
    51a4:	20000de0 	.word	0x20000de0

000051a8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    51a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51aa:	4647      	mov	r7, r8
    51ac:	b480      	push	{r7}
    51ae:	1c0e      	adds	r6, r1, #0
    51b0:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    51b2:	3801      	subs	r0, #1
    51b4:	2802      	cmp	r0, #2
    51b6:	d810      	bhi.n	51da <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    51b8:	2a00      	cmp	r2, #0
    51ba:	d011      	beq.n	51e0 <_write+0x38>
    51bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    51be:	4b0d      	ldr	r3, [pc, #52]	; (51f4 <_write+0x4c>)
    51c0:	4698      	mov	r8, r3
    51c2:	4f0d      	ldr	r7, [pc, #52]	; (51f8 <_write+0x50>)
    51c4:	4643      	mov	r3, r8
    51c6:	6818      	ldr	r0, [r3, #0]
    51c8:	5d31      	ldrb	r1, [r6, r4]
    51ca:	683b      	ldr	r3, [r7, #0]
    51cc:	4798      	blx	r3
    51ce:	2800      	cmp	r0, #0
    51d0:	db08      	blt.n	51e4 <_write+0x3c>
			return -1;
		}
		++nChars;
    51d2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    51d4:	42a5      	cmp	r5, r4
    51d6:	d1f5      	bne.n	51c4 <_write+0x1c>
    51d8:	e007      	b.n	51ea <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    51da:	2001      	movs	r0, #1
    51dc:	4240      	negs	r0, r0
    51de:	e005      	b.n	51ec <_write+0x44>
	}

	for (; len != 0; --len) {
    51e0:	2000      	movs	r0, #0
    51e2:	e003      	b.n	51ec <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    51e4:	2001      	movs	r0, #1
    51e6:	4240      	negs	r0, r0
    51e8:	e000      	b.n	51ec <_write+0x44>
		}
		++nChars;
    51ea:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    51ec:	bc04      	pop	{r2}
    51ee:	4690      	mov	r8, r2
    51f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	20000de8 	.word	0x20000de8
    51f8:	20000de4 	.word	0x20000de4

000051fc <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    51fc:	4b06      	ldr	r3, [pc, #24]	; (5218 <_sbrk+0x1c>)
    51fe:	681b      	ldr	r3, [r3, #0]
    5200:	2b00      	cmp	r3, #0
    5202:	d102      	bne.n	520a <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    5204:	4a05      	ldr	r2, [pc, #20]	; (521c <_sbrk+0x20>)
    5206:	4b04      	ldr	r3, [pc, #16]	; (5218 <_sbrk+0x1c>)
    5208:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    520a:	4a03      	ldr	r2, [pc, #12]	; (5218 <_sbrk+0x1c>)
    520c:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    520e:	1818      	adds	r0, r3, r0
    5210:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    5212:	1c18      	adds	r0, r3, #0
    5214:	4770      	bx	lr
    5216:	46c0      	nop			; (mov r8, r8)
    5218:	20000bf0 	.word	0x20000bf0
    521c:	20002df8 	.word	0x20002df8

00005220 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    5220:	2001      	movs	r0, #1
}
    5222:	4240      	negs	r0, r0
    5224:	4770      	bx	lr
    5226:	46c0      	nop			; (mov r8, r8)

00005228 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5228:	2380      	movs	r3, #128	; 0x80
    522a:	019b      	lsls	r3, r3, #6
    522c:	604b      	str	r3, [r1, #4]

	return 0;
}
    522e:	2000      	movs	r0, #0
    5230:	4770      	bx	lr
    5232:	46c0      	nop			; (mov r8, r8)

00005234 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5234:	2001      	movs	r0, #1
    5236:	4770      	bx	lr

00005238 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5238:	2000      	movs	r0, #0
    523a:	4770      	bx	lr

0000523c <_exit>:

extern void _exit(int status)
{
    523c:	b508      	push	{r3, lr}
    523e:	1c01      	adds	r1, r0, #0
	printf("Exiting with status %d.\n", status);
    5240:	4801      	ldr	r0, [pc, #4]	; (5248 <_exit+0xc>)
    5242:	4b02      	ldr	r3, [pc, #8]	; (524c <_exit+0x10>)
    5244:	4798      	blx	r3
    5246:	e7fe      	b.n	5246 <_exit+0xa>
    5248:	00008ec4 	.word	0x00008ec4
    524c:	00007281 	.word	0x00007281

00005250 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    5250:	4770      	bx	lr
    5252:	46c0      	nop			; (mov r8, r8)

00005254 <_getpid>:

extern int _getpid(void)
{
	return -1;
    5254:	2001      	movs	r0, #1
}
    5256:	4240      	negs	r0, r0
    5258:	4770      	bx	lr
    525a:	46c0      	nop			; (mov r8, r8)

0000525c <socket_resolve_cb>:
{
	handle_tcpip(sock, u8Msg, pvMsg);
}

static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	b082      	sub	sp, #8
    5260:	1c05      	adds	r5, r0, #0
    5262:	1c0c      	adds	r4, r1, #0
	printf("Host IP is %d.%d.%d.%d\r\n", (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1), (int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    5264:	23ff      	movs	r3, #255	; 0xff
    5266:	1c19      	adds	r1, r3, #0
    5268:	4021      	ands	r1, r4
    526a:	0a22      	lsrs	r2, r4, #8
    526c:	401a      	ands	r2, r3
    526e:	0c20      	lsrs	r0, r4, #16
    5270:	4003      	ands	r3, r0
    5272:	0e20      	lsrs	r0, r4, #24
    5274:	9000      	str	r0, [sp, #0]
    5276:	4806      	ldr	r0, [pc, #24]	; (5290 <socket_resolve_cb+0x34>)
    5278:	4e06      	ldr	r6, [pc, #24]	; (5294 <socket_resolve_cb+0x38>)
    527a:	47b0      	blx	r6
	printf("Host Name is %s\r\n", hostName);
    527c:	4806      	ldr	r0, [pc, #24]	; (5298 <socket_resolve_cb+0x3c>)
    527e:	1c29      	adds	r1, r5, #0
    5280:	47b0      	blx	r6
	
	handle_dns_found((char*)hostName, hostIp);
    5282:	1c28      	adds	r0, r5, #0
    5284:	1c21      	adds	r1, r4, #0
    5286:	4b05      	ldr	r3, [pc, #20]	; (529c <socket_resolve_cb+0x40>)
    5288:	4798      	blx	r3
}
    528a:	b002      	add	sp, #8
    528c:	bd70      	pop	{r4, r5, r6, pc}
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	00008f1c 	.word	0x00008f1c
    5294:	00007281 	.word	0x00007281
    5298:	00008f38 	.word	0x00008f38
    529c:	000012cd 	.word	0x000012cd

000052a0 <m2m_tcp_socket_handler>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    52a0:	b508      	push	{r3, lr}
	handle_tcpip(sock, u8Msg, pvMsg);
    52a2:	4b01      	ldr	r3, [pc, #4]	; (52a8 <m2m_tcp_socket_handler+0x8>)
    52a4:	4798      	blx	r3
}
    52a6:	bd08      	pop	{r3, pc}
    52a8:	00001319 	.word	0x00001319

000052ac <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    52ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ae:	4647      	mov	r7, r8
    52b0:	b480      	push	{r7}
    52b2:	b082      	sub	sp, #8
    52b4:	1c04      	adds	r4, r0, #0
    52b6:	1c0d      	adds	r5, r1, #0
	printf( "wifi_cb / %d\r\n", u8MsgType );
    52b8:	4840      	ldr	r0, [pc, #256]	; (53bc <wifi_cb+0x110>)
    52ba:	1c21      	adds	r1, r4, #0
    52bc:	4b40      	ldr	r3, [pc, #256]	; (53c0 <wifi_cb+0x114>)
    52be:	4798      	blx	r3
	
	switch (u8MsgType) {
    52c0:	2c2c      	cmp	r4, #44	; 0x2c
    52c2:	d066      	beq.n	5392 <wifi_cb+0xe6>
    52c4:	d802      	bhi.n	52cc <wifi_cb+0x20>
    52c6:	2c07      	cmp	r4, #7
    52c8:	d034      	beq.n	5334 <wifi_cb+0x88>
    52ca:	e072      	b.n	53b2 <wifi_cb+0x106>
    52cc:	2c2e      	cmp	r4, #46	; 0x2e
    52ce:	d002      	beq.n	52d6 <wifi_cb+0x2a>
    52d0:	2c38      	cmp	r4, #56	; 0x38
    52d2:	d01f      	beq.n	5314 <wifi_cb+0x68>
    52d4:	e06d      	b.n	53b2 <wifi_cb+0x106>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    52d6:	782b      	ldrb	r3, [r5, #0]
    52d8:	2b01      	cmp	r3, #1
    52da:	d105      	bne.n	52e8 <wifi_cb+0x3c>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    52dc:	4839      	ldr	r0, [pc, #228]	; (53c4 <wifi_cb+0x118>)
    52de:	4b3a      	ldr	r3, [pc, #232]	; (53c8 <wifi_cb+0x11c>)
    52e0:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    52e2:	4b3a      	ldr	r3, [pc, #232]	; (53cc <wifi_cb+0x120>)
    52e4:	4798      	blx	r3
    52e6:	e064      	b.n	53b2 <wifi_cb+0x106>
		}
		else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    52e8:	2b00      	cmp	r3, #0
    52ea:	d162      	bne.n	53b2 <wifi_cb+0x106>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    52ec:	4838      	ldr	r0, [pc, #224]	; (53d0 <wifi_cb+0x124>)
    52ee:	4b36      	ldr	r3, [pc, #216]	; (53c8 <wifi_cb+0x11c>)
    52f0:	4798      	blx	r3
			gCurrentWifiMode = PUBNUB_WIFI_MODE_STA_TRY_COMPLETE;
    52f2:	2203      	movs	r2, #3
    52f4:	4b37      	ldr	r3, [pc, #220]	; (53d4 <wifi_cb+0x128>)
    52f6:	701a      	strb	r2, [r3, #0]
			m2m_wifi_connect(gSSID, strlen(gSSID), gAUTH, (char *)gPSK, M2M_WIFI_CH_ALL);
    52f8:	4c37      	ldr	r4, [pc, #220]	; (53d8 <wifi_cb+0x12c>)
    52fa:	1c20      	adds	r0, r4, #0
    52fc:	4b37      	ldr	r3, [pc, #220]	; (53dc <wifi_cb+0x130>)
    52fe:	4798      	blx	r3
    5300:	b2c1      	uxtb	r1, r0
    5302:	4b37      	ldr	r3, [pc, #220]	; (53e0 <wifi_cb+0x134>)
    5304:	781a      	ldrb	r2, [r3, #0]
    5306:	23ff      	movs	r3, #255	; 0xff
    5308:	9300      	str	r3, [sp, #0]
    530a:	1c20      	adds	r0, r4, #0
    530c:	4b35      	ldr	r3, [pc, #212]	; (53e4 <wifi_cb+0x138>)
    530e:	4c36      	ldr	r4, [pc, #216]	; (53e8 <wifi_cb+0x13c>)
    5310:	47a0      	blx	r4
    5312:	e04e      	b.n	53b2 <wifi_cb+0x106>

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    5314:	7829      	ldrb	r1, [r5, #0]
    5316:	786a      	ldrb	r2, [r5, #1]
    5318:	78ab      	ldrb	r3, [r5, #2]
    531a:	78e8      	ldrb	r0, [r5, #3]
    531c:	9000      	str	r0, [sp, #0]
    531e:	4833      	ldr	r0, [pc, #204]	; (53ec <wifi_cb+0x140>)
    5320:	4c27      	ldr	r4, [pc, #156]	; (53c0 <wifi_cb+0x114>)
    5322:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);

		if( gCurrentWifiMode == PUBNUB_WIFI_MODE_STA_TRY_COMPLETE )
    5324:	4b2b      	ldr	r3, [pc, #172]	; (53d4 <wifi_cb+0x128>)
    5326:	781b      	ldrb	r3, [r3, #0]
    5328:	2b03      	cmp	r3, #3
    532a:	d142      	bne.n	53b2 <wifi_cb+0x106>
		{
			gCurrentWifiMode = PUBNUB_WIFI_MODE_STA_COMPLETED;
    532c:	2204      	movs	r2, #4
    532e:	4b29      	ldr	r3, [pc, #164]	; (53d4 <wifi_cb+0x128>)
    5330:	701a      	strb	r2, [r3, #0]
    5332:	e03e      	b.n	53b2 <wifi_cb+0x106>
	}

	case M2M_WIFI_RESP_PROVISION_INFO:
	{
		tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO.\r\n");
    5334:	482e      	ldr	r0, [pc, #184]	; (53f0 <wifi_cb+0x144>)
    5336:	4b24      	ldr	r3, [pc, #144]	; (53c8 <wifi_cb+0x11c>)
    5338:	4798      	blx	r3
		
		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    533a:	2363      	movs	r3, #99	; 0x63
    533c:	5ceb      	ldrb	r3, [r5, r3]
    533e:	2b00      	cmp	r3, #0
    5340:	d123      	bne.n	538a <wifi_cb+0xde>
			memcpy( gSSID, pstrProvInfo->au8SSID, strlen( (char*)(pstrProvInfo->au8SSID) ) );
    5342:	1c28      	adds	r0, r5, #0
    5344:	4e25      	ldr	r6, [pc, #148]	; (53dc <wifi_cb+0x130>)
    5346:	47b0      	blx	r6
    5348:	1c02      	adds	r2, r0, #0
    534a:	4f23      	ldr	r7, [pc, #140]	; (53d8 <wifi_cb+0x12c>)
    534c:	1c38      	adds	r0, r7, #0
    534e:	1c29      	adds	r1, r5, #0
    5350:	4b28      	ldr	r3, [pc, #160]	; (53f4 <wifi_cb+0x148>)
    5352:	4698      	mov	r8, r3
    5354:	4798      	blx	r3
			gAUTH = pstrProvInfo->u8SecType;
    5356:	2362      	movs	r3, #98	; 0x62
    5358:	5cec      	ldrb	r4, [r5, r3]
    535a:	4b21      	ldr	r3, [pc, #132]	; (53e0 <wifi_cb+0x134>)
    535c:	601c      	str	r4, [r3, #0]
			memcpy( gPSK, pstrProvInfo->au8Password, strlen( (char*)(pstrProvInfo->au8Password) ) );
    535e:	3521      	adds	r5, #33	; 0x21
    5360:	1c28      	adds	r0, r5, #0
    5362:	47b0      	blx	r6
    5364:	1c02      	adds	r2, r0, #0
    5366:	4e1f      	ldr	r6, [pc, #124]	; (53e4 <wifi_cb+0x138>)
    5368:	1c30      	adds	r0, r6, #0
    536a:	1c29      	adds	r1, r5, #0
    536c:	47c0      	blx	r8
			
			printf("wifi_cb: %s, %s, %d\r\n", gSSID, gPSK, gAUTH);
    536e:	4822      	ldr	r0, [pc, #136]	; (53f8 <wifi_cb+0x14c>)
    5370:	1c39      	adds	r1, r7, #0
    5372:	1c32      	adds	r2, r6, #0
    5374:	1c23      	adds	r3, r4, #0
    5376:	4c12      	ldr	r4, [pc, #72]	; (53c0 <wifi_cb+0x114>)
    5378:	47a0      	blx	r4

			if( gCurrentWifiMode == PUBNUB_WIFI_MODE_PROVISION )
    537a:	4b16      	ldr	r3, [pc, #88]	; (53d4 <wifi_cb+0x128>)
    537c:	781b      	ldrb	r3, [r3, #0]
    537e:	2b01      	cmp	r3, #1
    5380:	d117      	bne.n	53b2 <wifi_cb+0x106>
				gCurrentWifiMode = PUBNUB_WIFI_MODE_STA_ENABLE;
    5382:	2202      	movs	r2, #2
    5384:	4b13      	ldr	r3, [pc, #76]	; (53d4 <wifi_cb+0x128>)
    5386:	701a      	strb	r2, [r3, #0]
    5388:	e013      	b.n	53b2 <wifi_cb+0x106>
		}
		else {
			printf("wifi_cb: Provision failed.\r\n");
    538a:	481c      	ldr	r0, [pc, #112]	; (53fc <wifi_cb+0x150>)
    538c:	4b0e      	ldr	r3, [pc, #56]	; (53c8 <wifi_cb+0x11c>)
    538e:	4798      	blx	r3
    5390:	e00f      	b.n	53b2 <wifi_cb+0x106>
	break;

	case M2M_WIFI_RESP_CONN_INFO: //M2M_WIFI_RESP_CONNTION_STATE:
	{
		tstrM2mWifiStateChanged *pstrInfo = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrInfo->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5392:	782b      	ldrb	r3, [r5, #0]
    5394:	2b00      	cmp	r3, #0
    5396:	d103      	bne.n	53a0 <wifi_cb+0xf4>
			printf("wifi_cb: M2M_WIFI_RESP_CONNTION_STATE: Disconnected.\r\n");
    5398:	4819      	ldr	r0, [pc, #100]	; (5400 <wifi_cb+0x154>)
    539a:	4b0b      	ldr	r3, [pc, #44]	; (53c8 <wifi_cb+0x11c>)
    539c:	4798      	blx	r3
    539e:	e008      	b.n	53b2 <wifi_cb+0x106>
		}
		else if (pstrInfo->u8CurrState == M2M_WIFI_CONNECTED) {
    53a0:	2b01      	cmp	r3, #1
    53a2:	d103      	bne.n	53ac <wifi_cb+0x100>
			printf("wifi_cb: M2M_WIFI_RESP_CONNTION_STATE: Connected.\r\n");
    53a4:	4817      	ldr	r0, [pc, #92]	; (5404 <wifi_cb+0x158>)
    53a6:	4b08      	ldr	r3, [pc, #32]	; (53c8 <wifi_cb+0x11c>)
    53a8:	4798      	blx	r3
    53aa:	e002      	b.n	53b2 <wifi_cb+0x106>
		}
		else {
			printf("wifi_cb: M2M_WIFI_RESP_CONNTION_STATE: Undefined.\r\n");
    53ac:	4816      	ldr	r0, [pc, #88]	; (5408 <wifi_cb+0x15c>)
    53ae:	4b06      	ldr	r3, [pc, #24]	; (53c8 <wifi_cb+0x11c>)
    53b0:	4798      	blx	r3
	default:
		{
		break;
		}
	}
}
    53b2:	b002      	add	sp, #8
    53b4:	bc04      	pop	{r2}
    53b6:	4690      	mov	r8, r2
    53b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53ba:	46c0      	nop			; (mov r8, r8)
    53bc:	00008f4c 	.word	0x00008f4c
    53c0:	00007281 	.word	0x00007281
    53c4:	00008f5c 	.word	0x00008f5c
    53c8:	00007379 	.word	0x00007379
    53cc:	000026e9 	.word	0x000026e9
    53d0:	00008f98 	.word	0x00008f98
    53d4:	20000c34 	.word	0x20000c34
    53d8:	20000c38 	.word	0x20000c38
    53dc:	00007579 	.word	0x00007579
    53e0:	20000410 	.word	0x20000410
    53e4:	20000bf4 	.word	0x20000bf4
    53e8:	000025d5 	.word	0x000025d5
    53ec:	00008fd8 	.word	0x00008fd8
    53f0:	00009014 	.word	0x00009014
    53f4:	0000725d 	.word	0x0000725d
    53f8:	0000903c 	.word	0x0000903c
    53fc:	00009054 	.word	0x00009054
    5400:	00009070 	.word	0x00009070
    5404:	000090a8 	.word	0x000090a8
    5408:	000090dc 	.word	0x000090dc

0000540c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    540c:	b570      	push	{r4, r5, r6, lr}
    540e:	b082      	sub	sp, #8
    5410:	1c05      	adds	r5, r0, #0
    5412:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    5414:	2200      	movs	r2, #0
    5416:	466b      	mov	r3, sp
    5418:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    541a:	4c06      	ldr	r4, [pc, #24]	; (5434 <usart_serial_getchar+0x28>)
    541c:	1c28      	adds	r0, r5, #0
    541e:	4669      	mov	r1, sp
    5420:	3106      	adds	r1, #6
    5422:	47a0      	blx	r4
    5424:	2800      	cmp	r0, #0
    5426:	d1f9      	bne.n	541c <usart_serial_getchar+0x10>

	*c = temp;
    5428:	466b      	mov	r3, sp
    542a:	3306      	adds	r3, #6
    542c:	881b      	ldrh	r3, [r3, #0]
    542e:	7033      	strb	r3, [r6, #0]
}
    5430:	b002      	add	sp, #8
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	00004971 	.word	0x00004971

00005438 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    5438:	b570      	push	{r4, r5, r6, lr}
    543a:	1c06      	adds	r6, r0, #0
    543c:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    543e:	4c03      	ldr	r4, [pc, #12]	; (544c <usart_serial_putchar+0x14>)
    5440:	1c30      	adds	r0, r6, #0
    5442:	1c29      	adds	r1, r5, #0
    5444:	47a0      	blx	r4
    5446:	2800      	cmp	r0, #0
    5448:	d1fa      	bne.n	5440 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    544a:	bd70      	pop	{r4, r5, r6, pc}
    544c:	00004949 	.word	0x00004949

00005450 <main>:
 * Initialize system, UART console, network then test function of TCP client.
 *
 * \return program return value.
 */
int main(void)
{
    5450:	b5f0      	push	{r4, r5, r6, r7, lr}
    5452:	465f      	mov	r7, fp
    5454:	4656      	mov	r6, sl
    5456:	464d      	mov	r5, r9
    5458:	4644      	mov	r4, r8
    545a:	b4f0      	push	{r4, r5, r6, r7}
    545c:	b0eb      	sub	sp, #428	; 0x1ac

	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;

	/* Initialize the board. */
	system_init();
    545e:	4bd4      	ldr	r3, [pc, #848]	; (57b0 <main+0x360>)
    5460:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5462:	ab24      	add	r3, sp, #144	; 0x90
    5464:	2280      	movs	r2, #128	; 0x80
    5466:	05d2      	lsls	r2, r2, #23
    5468:	9224      	str	r2, [sp, #144]	; 0x90
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    546a:	2200      	movs	r2, #0
    546c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    546e:	21ff      	movs	r1, #255	; 0xff
    5470:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    5472:	2100      	movs	r1, #0
    5474:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5476:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5478:	2001      	movs	r0, #1
    547a:	2424      	movs	r4, #36	; 0x24
    547c:	5518      	strb	r0, [r3, r4]
	config->transmitter_enable = true;
    547e:	2425      	movs	r4, #37	; 0x25
    5480:	5518      	strb	r0, [r3, r4]
	config->clock_polarity_inverted = false;
    5482:	2026      	movs	r0, #38	; 0x26
    5484:	541a      	strb	r2, [r3, r0]
	config->use_external_clock = false;
    5486:	2027      	movs	r0, #39	; 0x27
    5488:	541a      	strb	r2, [r3, r0]
	config->ext_clock_freq   = 0;
    548a:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    548c:	202c      	movs	r0, #44	; 0x2c
    548e:	541a      	strb	r2, [r3, r0]
	config->generator_source = GCLK_GENERATOR_0;
    5490:	202d      	movs	r0, #45	; 0x2d
    5492:	541a      	strb	r2, [r3, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5494:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5496:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5498:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    549a:	7619      	strb	r1, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    549c:	7719      	strb	r1, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    549e:	7659      	strb	r1, [r3, #25]
	config->receive_pulse_length                        = 19;
    54a0:	2213      	movs	r2, #19
    54a2:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    54a4:	7759      	strb	r1, [r3, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    54a6:	2280      	movs	r2, #128	; 0x80
    54a8:	0352      	lsls	r2, r2, #13
    54aa:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    54ac:	4ac1      	ldr	r2, [pc, #772]	; (57b4 <main+0x364>)
    54ae:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    54b0:	4ac1      	ldr	r2, [pc, #772]	; (57b8 <main+0x368>)
    54b2:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    54b4:	2201      	movs	r2, #1
    54b6:	4252      	negs	r2, r2
    54b8:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    54ba:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    54bc:	22e1      	movs	r2, #225	; 0xe1
    54be:	0252      	lsls	r2, r2, #9
    54c0:	621a      	str	r2, [r3, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    54c2:	4cbe      	ldr	r4, [pc, #760]	; (57bc <main+0x36c>)
    54c4:	4bbe      	ldr	r3, [pc, #760]	; (57c0 <main+0x370>)
    54c6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    54c8:	4abe      	ldr	r2, [pc, #760]	; (57c4 <main+0x374>)
    54ca:	4bbf      	ldr	r3, [pc, #764]	; (57c8 <main+0x378>)
    54cc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    54ce:	4abf      	ldr	r2, [pc, #764]	; (57cc <main+0x37c>)
    54d0:	4bbf      	ldr	r3, [pc, #764]	; (57d0 <main+0x380>)
    54d2:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    54d4:	1c20      	adds	r0, r4, #0
    54d6:	49bf      	ldr	r1, [pc, #764]	; (57d4 <main+0x384>)
    54d8:	aa24      	add	r2, sp, #144	; 0x90
    54da:	4bbf      	ldr	r3, [pc, #764]	; (57d8 <main+0x388>)
    54dc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    54de:	4ebf      	ldr	r6, [pc, #764]	; (57dc <main+0x38c>)
    54e0:	6833      	ldr	r3, [r6, #0]
    54e2:	6898      	ldr	r0, [r3, #8]
    54e4:	2100      	movs	r1, #0
    54e6:	4dbe      	ldr	r5, [pc, #760]	; (57e0 <main+0x390>)
    54e8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    54ea:	6833      	ldr	r3, [r6, #0]
    54ec:	6858      	ldr	r0, [r3, #4]
    54ee:	2100      	movs	r1, #0
    54f0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    54f2:	6823      	ldr	r3, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    54f4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    54f6:	2a00      	cmp	r2, #0
    54f8:	d1fc      	bne.n	54f4 <main+0xa4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    54fa:	6819      	ldr	r1, [r3, #0]
    54fc:	2202      	movs	r2, #2
    54fe:	430a      	orrs	r2, r1
    5500:	601a      	str	r2, [r3, #0]
	/* Initialize the board. */
	system_init();

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    5502:	48b8      	ldr	r0, [pc, #736]	; (57e4 <main+0x394>)
    5504:	4bb8      	ldr	r3, [pc, #736]	; (57e8 <main+0x398>)
    5506:	4798      	blx	r3

	/* Initialize Temperature Sensor */
	at30tse_init();
    5508:	4bb8      	ldr	r3, [pc, #736]	; (57ec <main+0x39c>)
    550a:	4798      	blx	r3

	ssd1306_init();
    550c:	4bb8      	ldr	r3, [pc, #736]	; (57f0 <main+0x3a0>)
    550e:	4798      	blx	r3
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    5510:	2400      	movs	r4, #0
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    5512:	200f      	movs	r0, #15
    5514:	4680      	mov	r8, r0
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    5516:	4db7      	ldr	r5, [pc, #732]	; (57f4 <main+0x3a4>)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
    5518:	4fb7      	ldr	r7, [pc, #732]	; (57f8 <main+0x3a8>)
    551a:	23b0      	movs	r3, #176	; 0xb0
    551c:	4640      	mov	r0, r8
    551e:	4020      	ands	r0, r4
    5520:	4318      	orrs	r0, r3
    5522:	47a8      	blx	r5
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    5524:	2010      	movs	r0, #16
    5526:	47a8      	blx	r5
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    5528:	2000      	movs	r0, #0
    552a:	47a8      	blx	r5
    552c:	2680      	movs	r6, #128	; 0x80
    552e:	2000      	movs	r0, #0
    5530:	47b8      	blx	r7
    5532:	3e01      	subs	r6, #1

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    5534:	2e00      	cmp	r6, #0
    5536:	d1fa      	bne.n	552e <main+0xde>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    5538:	3401      	adds	r4, #1
    553a:	b2e4      	uxtb	r4, r4
    553c:	2c04      	cmp	r4, #4
    553e:	d1ec      	bne.n	551a <main+0xca>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    5540:	ac24      	add	r4, sp, #144	; 0x90
    5542:	2601      	movs	r6, #1
    5544:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    5546:	2500      	movs	r5, #0
    5548:	70a5      	strb	r5, [r4, #2]
static void configure_button_led(void)
{
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    554a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(EXT3_LED1, &pin_conf);
    554c:	200c      	movs	r0, #12
    554e:	1c21      	adds	r1, r4, #0
    5550:	4faa      	ldr	r7, [pc, #680]	; (57fc <main+0x3ac>)
    5552:	47b8      	blx	r7
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5554:	2280      	movs	r2, #128	; 0x80
    5556:	0152      	lsls	r2, r2, #5
    5558:	4ba9      	ldr	r3, [pc, #676]	; (5800 <main+0x3b0>)
    555a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(EXT3_LED1, EXT3_LED_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    555c:	7025      	strb	r5, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    555e:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(EXT3_BTN1, &pin_conf);
    5560:	201c      	movs	r0, #28
    5562:	a924      	add	r1, sp, #144	; 0x90
    5564:	47b8      	blx	r7
 *                     default values
 */
static inline void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    5566:	7025      	strb	r5, [r4, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
	config->resolution                    = ADC_RESOLUTION_12BIT;
    5568:	7125      	strb	r5, [r4, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    556a:	7625      	strb	r5, [r4, #24]
	config->window.window_upper_value     = 0;
    556c:	6225      	str	r5, [r4, #32]
	config->window.window_lower_value     = 0;
    556e:	61e5      	str	r5, [r4, #28]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    5570:	23c0      	movs	r3, #192	; 0xc0
    5572:	015b      	lsls	r3, r3, #5
    5574:	81e3      	strh	r3, [r4, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    5576:	7425      	strb	r5, [r4, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    5578:	7465      	strb	r5, [r4, #17]
	config->left_adjust                   = false;
    557a:	74a5      	strb	r5, [r4, #18]
	config->differential_mode             = false;
    557c:	74e5      	strb	r5, [r4, #19]
	config->freerunning                   = false;
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    557e:	232a      	movs	r3, #42	; 0x2a
    5580:	54e5      	strb	r5, [r4, r3]
	config->run_in_standby                = false;
    5582:	7565      	strb	r5, [r4, #21]
	config->reference_compensation_enable = false;
    5584:	75a5      	strb	r5, [r4, #22]
	config->correction.correction_enable  = false;
    5586:	2324      	movs	r3, #36	; 0x24
    5588:	54e5      	strb	r5, [r4, r3]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    558a:	2300      	movs	r3, #0
    558c:	84e5      	strh	r5, [r4, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    558e:	8525      	strh	r5, [r4, #40]	; 0x28
	config->sample_length                 = 0;
    5590:	75e3      	strb	r3, [r4, #23]
	config->pin_scan.offset_start_scan    = 0;
    5592:	222b      	movs	r2, #43	; 0x2b
    5594:	54a3      	strb	r3, [r4, r2]
	config->pin_scan.inputs_to_scan       = 0;
    5596:	222c      	movs	r2, #44	; 0x2c
    5598:	54a3      	strb	r3, [r4, r2]

static void configure_adc(void)
{
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
    559a:	23f0      	movs	r3, #240	; 0xf0
    559c:	051b      	lsls	r3, r3, #20
    559e:	60a3      	str	r3, [r4, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV32;
    55a0:	23c0      	movs	r3, #192	; 0xc0
    55a2:	009b      	lsls	r3, r3, #2
    55a4:	8063      	strh	r3, [r4, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    55a6:	2302      	movs	r3, #2
    55a8:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN18;
    55aa:	2312      	movs	r3, #18
    55ac:	7323      	strb	r3, [r4, #12]
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
	config_adc.freerunning     = true;
    55ae:	7526      	strb	r6, [r4, #20]
	config_adc.left_adjust     = false;
	adc_init(&adc_instance, ADC, &config_adc);
    55b0:	4c94      	ldr	r4, [pc, #592]	; (5804 <main+0x3b4>)
    55b2:	1c20      	adds	r0, r4, #0
    55b4:	4994      	ldr	r1, [pc, #592]	; (5808 <main+0x3b8>)
    55b6:	aa24      	add	r2, sp, #144	; 0x90
    55b8:	4b94      	ldr	r3, [pc, #592]	; (580c <main+0x3bc>)
    55ba:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    55bc:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    55be:	7e5a      	ldrb	r2, [r3, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    55c0:	b252      	sxtb	r2, r2
    55c2:	2a00      	cmp	r2, #0
    55c4:	dbfb      	blt.n	55be <main+0x16e>
		/* Wait for synchronization */
	}

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    55c6:	4a8f      	ldr	r2, [pc, #572]	; (5804 <main+0x3b4>)
    55c8:	7912      	ldrb	r2, [r2, #4]
    55ca:	2a00      	cmp	r2, #0
    55cc:	d104      	bne.n	55d8 <main+0x188>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    55ce:	4a90      	ldr	r2, [pc, #576]	; (5810 <main+0x3c0>)
    55d0:	6c10      	ldr	r0, [r2, #64]	; 0x40
    55d2:	2104      	movs	r1, #4
    55d4:	4301      	orrs	r1, r0
    55d6:	6411      	str	r1, [r2, #64]	; 0x40

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    55d8:	7819      	ldrb	r1, [r3, #0]
    55da:	2202      	movs	r2, #2
    55dc:	430a      	orrs	r2, r1
    55de:	701a      	strb	r2, [r3, #0]

	/* Configure the ADC for the light sensor. */
	configure_adc();

	/* Initialize the BSP. */
	nm_bsp_init();
    55e0:	4b8c      	ldr	r3, [pc, #560]	; (5814 <main+0x3c4>)
    55e2:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    55e4:	2300      	movs	r3, #0
    55e6:	9365      	str	r3, [sp, #404]	; 0x194
    55e8:	9366      	str	r3, [sp, #408]	; 0x198
    55ea:	9367      	str	r3, [sp, #412]	; 0x19c
    55ec:	9368      	str	r3, [sp, #416]	; 0x1a0
    55ee:	9369      	str	r3, [sp, #420]	; 0x1a4
	param.pfAppWifiCb = wifi_cb;
    55f0:	4b89      	ldr	r3, [pc, #548]	; (5818 <main+0x3c8>)
    55f2:	9364      	str	r3, [sp, #400]	; 0x190

	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	ret = m2m_wifi_init(&param);
    55f4:	a864      	add	r0, sp, #400	; 0x190
    55f6:	4b89      	ldr	r3, [pc, #548]	; (581c <main+0x3cc>)
    55f8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    55fa:	2800      	cmp	r0, #0
    55fc:	d003      	beq.n	5606 <main+0x1b6>
		printf("main: m2m_wifi_init call error!\r\n");
    55fe:	4888      	ldr	r0, [pc, #544]	; (5820 <main+0x3d0>)
    5600:	4b79      	ldr	r3, [pc, #484]	; (57e8 <main+0x398>)
    5602:	4798      	blx	r3
    5604:	e7fe      	b.n	5604 <main+0x1b4>
		while (1) {
		}
	}

#ifdef TEST_MODE_WITHOUT_PROVISION
	printf( "TEST_MODE_WITHOUT_PROVISION / Start ~~~\r\n" );
    5606:	4887      	ldr	r0, [pc, #540]	; (5824 <main+0x3d4>)
    5608:	4b77      	ldr	r3, [pc, #476]	; (57e8 <main+0x398>)
    560a:	4798      	blx	r3
	gCurrentWifiMode = PUBNUB_WIFI_MODE_STA_ENABLE;
    560c:	2202      	movs	r2, #2
    560e:	4b86      	ldr	r3, [pc, #536]	; (5828 <main+0x3d8>)
    5610:	701a      	strb	r2, [r3, #0]
	m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	printf("Provision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n", MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);
#endif

	while (1) {
		m2m_wifi_handle_events(NULL);
    5612:	4986      	ldr	r1, [pc, #536]	; (582c <main+0x3dc>)
    5614:	4688      	mov	r8, r1
    5616:	2000      	movs	r0, #0
    5618:	47c0      	blx	r8

		if( gCurrentWifiMode == PUBNUB_WIFI_MODE_STA_ENABLE )
    561a:	4b83      	ldr	r3, [pc, #524]	; (5828 <main+0x3d8>)
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	2b02      	cmp	r3, #2
    5620:	d134      	bne.n	568c <main+0x23c>
		{
			socketInit();
    5622:	4b83      	ldr	r3, [pc, #524]	; (5830 <main+0x3e0>)
    5624:	4798      	blx	r3
			registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
    5626:	4883      	ldr	r0, [pc, #524]	; (5834 <main+0x3e4>)
    5628:	4983      	ldr	r1, [pc, #524]	; (5838 <main+0x3e8>)
    562a:	4b84      	ldr	r3, [pc, #528]	; (583c <main+0x3ec>)
    562c:	4798      	blx	r3

#ifdef TEST_MODE_WITHOUT_PROVISION
			memcpy( gSSID, TEST_MODE_SSID, strlen( TEST_MODE_SSID ) );
    562e:	4c84      	ldr	r4, [pc, #528]	; (5840 <main+0x3f0>)
    5630:	4a84      	ldr	r2, [pc, #528]	; (5844 <main+0x3f4>)
    5632:	1c23      	adds	r3, r4, #0
    5634:	caa1      	ldmia	r2!, {r0, r5, r7}
    5636:	c3a1      	stmia	r3!, {r0, r5, r7}
    5638:	ca22      	ldmia	r2!, {r1, r5}
    563a:	c322      	stmia	r3!, {r1, r5}
			gAUTH = 2;
    563c:	4e82      	ldr	r6, [pc, #520]	; (5848 <main+0x3f8>)
    563e:	2302      	movs	r3, #2
    5640:	6033      	str	r3, [r6, #0]
			memcpy( gPSK, TEST_MODE_PASSWORD, strlen( TEST_MODE_PASSWORD ) );
    5642:	4d82      	ldr	r5, [pc, #520]	; (584c <main+0x3fc>)
    5644:	4b82      	ldr	r3, [pc, #520]	; (5850 <main+0x400>)
    5646:	1c2a      	adds	r2, r5, #0
    5648:	cb83      	ldmia	r3!, {r0, r1, r7}
    564a:	c283      	stmia	r2!, {r0, r1, r7}
    564c:	681b      	ldr	r3, [r3, #0]
    564e:	6013      	str	r3, [r2, #0]
#endif

			/* Connect to router. */
			printf( "gSSID %s, gAUTH %d, gPSK %s\r\n", gSSID, gAUTH, gPSK );
    5650:	4880      	ldr	r0, [pc, #512]	; (5854 <main+0x404>)
    5652:	1c21      	adds	r1, r4, #0
    5654:	2202      	movs	r2, #2
    5656:	1c2b      	adds	r3, r5, #0
    5658:	4f7f      	ldr	r7, [pc, #508]	; (5858 <main+0x408>)
    565a:	47b8      	blx	r7
			m2m_wifi_connect( gSSID, strlen(gSSID), gAUTH, gPSK, M2M_WIFI_CH_ALL );
    565c:	1c20      	adds	r0, r4, #0
    565e:	4b7f      	ldr	r3, [pc, #508]	; (585c <main+0x40c>)
    5660:	4798      	blx	r3
    5662:	b2c1      	uxtb	r1, r0
    5664:	7832      	ldrb	r2, [r6, #0]
    5666:	23ff      	movs	r3, #255	; 0xff
    5668:	9300      	str	r3, [sp, #0]
    566a:	1c20      	adds	r0, r4, #0
    566c:	1c2b      	adds	r3, r5, #0
    566e:	4c7c      	ldr	r4, [pc, #496]	; (5860 <main+0x410>)
    5670:	47a0      	blx	r4

			m_pb = pubnub_get_ctx(0);
    5672:	2000      	movs	r0, #0
    5674:	4b7b      	ldr	r3, [pc, #492]	; (5864 <main+0x414>)
    5676:	4798      	blx	r3
    5678:	4b7b      	ldr	r3, [pc, #492]	; (5868 <main+0x418>)
    567a:	6018      	str	r0, [r3, #0]
			pubnub_init(m_pb, pubkey, subkey);
    567c:	497b      	ldr	r1, [pc, #492]	; (586c <main+0x41c>)
    567e:	4a7c      	ldr	r2, [pc, #496]	; (5870 <main+0x420>)
    5680:	4b7c      	ldr	r3, [pc, #496]	; (5874 <main+0x424>)
    5682:	4798      	blx	r3

			gCurrentWifiMode = PUBNUB_WIFI_MODE_STA_TRY_COMPLETE;
    5684:	2203      	movs	r2, #3
    5686:	4b68      	ldr	r3, [pc, #416]	; (5828 <main+0x3d8>)
    5688:	701a      	strb	r2, [r3, #0]
    568a:	e7c4      	b.n	5616 <main+0x1c6>
		}
		else if( gCurrentWifiMode == PUBNUB_WIFI_MODE_STA_TRY_COMPLETE )
		{

		}
		else if( gCurrentWifiMode == PUBNUB_WIFI_MODE_STA_COMPLETED )
    568c:	2b04      	cmp	r3, #4
    568e:	d1c2      	bne.n	5616 <main+0x1c6>
		{
			if(m_pb->state == PS_IDLE) {
    5690:	4b75      	ldr	r3, [pc, #468]	; (5868 <main+0x418>)
    5692:	681a      	ldr	r2, [r3, #0]
    5694:	2352      	movs	r3, #82	; 0x52
    5696:	5cd3      	ldrb	r3, [r2, r3]
    5698:	2b00      	cmp	r3, #0
    569a:	d1bc      	bne.n	5616 <main+0x1c6>
				char buf[256] = {0, };
    569c:	a824      	add	r0, sp, #144	; 0x90
    569e:	2100      	movs	r1, #0
    56a0:	2280      	movs	r2, #128	; 0x80
    56a2:	0052      	lsls	r2, r2, #1
    56a4:	4b74      	ldr	r3, [pc, #464]	; (5878 <main+0x428>)
    56a6:	4798      	blx	r3
					
				nm_bsp_sleep(800);
    56a8:	20c8      	movs	r0, #200	; 0xc8
    56aa:	0080      	lsls	r0, r0, #2
    56ac:	4b73      	ldr	r3, [pc, #460]	; (587c <main+0x42c>)
    56ae:	4798      	blx	r3
				
				if(m_pb->trans == PBTT_NONE || (m_pb->trans == PBTT_SUBSCRIBE && m_pb->last_result == PNR_OK)
    56b0:	4b6d      	ldr	r3, [pc, #436]	; (5868 <main+0x418>)
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	2251      	movs	r2, #81	; 0x51
    56b6:	5c9a      	ldrb	r2, [r3, r2]
    56b8:	2a00      	cmp	r2, #0
    56ba:	d105      	bne.n	56c8 <main+0x278>
					|| (m_pb->trans == PBTT_PUBLISH && m_pb->last_result == PNR_IO_ERROR)) {
					for(;;) {
						char const *msg = pubnub_get(m_pb);
    56bc:	4a6a      	ldr	r2, [pc, #424]	; (5868 <main+0x418>)
    56be:	4691      	mov	r9, r2
    56c0:	4f6f      	ldr	r7, [pc, #444]	; (5880 <main+0x430>)
						if(NULL == msg) {
							break;
						} 
						printf("pubnubDemo: Received message: %s\r\n", msg);
    56c2:	4b70      	ldr	r3, [pc, #448]	; (5884 <main+0x434>)
    56c4:	469a      	mov	sl, r3
    56c6:	e00a      	b.n	56de <main+0x28e>
			if(m_pb->state == PS_IDLE) {
				char buf[256] = {0, };
					
				nm_bsp_sleep(800);
				
				if(m_pb->trans == PBTT_NONE || (m_pb->trans == PBTT_SUBSCRIBE && m_pb->last_result == PNR_OK)
    56c8:	2250      	movs	r2, #80	; 0x50
    56ca:	5a9b      	ldrh	r3, [r3, r2]
    56cc:	2280      	movs	r2, #128	; 0x80
    56ce:	0052      	lsls	r2, r2, #1
    56d0:	4293      	cmp	r3, r2
    56d2:	d0f3      	beq.n	56bc <main+0x26c>
					|| (m_pb->trans == PBTT_PUBLISH && m_pb->last_result == PNR_IO_ERROR)) {
    56d4:	4a6c      	ldr	r2, [pc, #432]	; (5888 <main+0x438>)
    56d6:	4293      	cmp	r3, r2
    56d8:	d000      	beq.n	56dc <main+0x28c>
    56da:	e10b      	b.n	58f4 <main+0x4a4>
    56dc:	e7ee      	b.n	56bc <main+0x26c>
					for(;;) {
						char const *msg = pubnub_get(m_pb);
    56de:	464c      	mov	r4, r9
    56e0:	6820      	ldr	r0, [r4, #0]
    56e2:	47b8      	blx	r7
    56e4:	1e06      	subs	r6, r0, #0
						if(NULL == msg) {
    56e6:	d01e      	beq.n	5726 <main+0x2d6>
							break;
						} 
						printf("pubnubDemo: Received message: %s\r\n", msg);
    56e8:	4650      	mov	r0, sl
    56ea:	1c31      	adds	r1, r6, #0
    56ec:	4b5a      	ldr	r3, [pc, #360]	; (5858 <main+0x408>)
    56ee:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    56f0:	20b2      	movs	r0, #178	; 0xb2
    56f2:	4c40      	ldr	r4, [pc, #256]	; (57f4 <main+0x3a4>)
    56f4:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    56f6:	2010      	movs	r0, #16
    56f8:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    56fa:	2000      	movs	r0, #0
    56fc:	47a0      	blx	r4

static void display_received_data( char* receivedData )
{
	ssd1306_set_page_address(2); //2
	ssd1306_set_column_address(0);
	ssd1306_write_text( "SAMR21 Data:" );
    56fe:	4863      	ldr	r0, [pc, #396]	; (588c <main+0x43c>)
    5700:	4b63      	ldr	r3, [pc, #396]	; (5890 <main+0x440>)
    5702:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    5704:	20b3      	movs	r0, #179	; 0xb3
    5706:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    5708:	2010      	movs	r0, #16
    570a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    570c:	2000      	movs	r0, #0
    570e:	47a0      	blx	r4
    5710:	2480      	movs	r4, #128	; 0x80
	ssd1306_set_page_address(3); //3
	ssd1306_set_column_address(0);

	for(int col = 0; col < 128; ++col)
	{
		ssd1306_write_data(0x00);
    5712:	4d39      	ldr	r5, [pc, #228]	; (57f8 <main+0x3a8>)
    5714:	2000      	movs	r0, #0
    5716:	47a8      	blx	r5
    5718:	3c01      	subs	r4, #1
	ssd1306_write_text( "SAMR21 Data:" );
		
	ssd1306_set_page_address(3); //3
	ssd1306_set_column_address(0);

	for(int col = 0; col < 128; ++col)
    571a:	2c00      	cmp	r4, #0
    571c:	d1fa      	bne.n	5714 <main+0x2c4>
	{
		ssd1306_write_data(0x00);
	}
	
	ssd1306_write_text( receivedData );	
    571e:	1c30      	adds	r0, r6, #0
    5720:	4b5b      	ldr	r3, [pc, #364]	; (5890 <main+0x440>)
    5722:	4798      	blx	r3
    5724:	e7db      	b.n	56de <main+0x28e>

						//if( 0 == ( strncmp( &msg[2], "temp", strlen( "temperature" ) ) ) )
							display_received_data( (char*)msg );
					}					
					
					printf("pubnubDemo: publish event.\r\n");
    5726:	485b      	ldr	r0, [pc, #364]	; (5894 <main+0x444>)
    5728:	4b2f      	ldr	r3, [pc, #188]	; (57e8 <main+0x398>)
    572a:	4798      	blx	r3
					
					double temperature = at30tse_read_temperature();
    572c:	4b5a      	ldr	r3, [pc, #360]	; (5898 <main+0x448>)
    572e:	4798      	blx	r3
    5730:	1c06      	adds	r6, r0, #0
    5732:	1c0f      	adds	r7, r1, #0
					double tempf = (temperature*(9/5))+32;
    5734:	4b1d      	ldr	r3, [pc, #116]	; (57ac <main+0x35c>)
    5736:	4a1c      	ldr	r2, [pc, #112]	; (57a8 <main+0x358>)
    5738:	4c58      	ldr	r4, [pc, #352]	; (589c <main+0x44c>)
    573a:	47a0      	blx	r4
    573c:	9002      	str	r0, [sp, #8]
    573e:	9103      	str	r1, [sp, #12]
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    5740:	4b30      	ldr	r3, [pc, #192]	; (5804 <main+0x3b4>)
    5742:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5744:	7e43      	ldrb	r3, [r0, #25]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    5746:	b25b      	sxtb	r3, r3
    5748:	2b00      	cmp	r3, #0
    574a:	dbfb      	blt.n	5744 <main+0x2f4>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    574c:	7b02      	ldrb	r2, [r0, #12]
    574e:	2302      	movs	r3, #2
    5750:	4313      	orrs	r3, r2
    5752:	7303      	strb	r3, [r0, #12]
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5754:	2101      	movs	r1, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5756:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    5758:	2402      	movs	r4, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    575a:	7e03      	ldrb	r3, [r0, #24]
    575c:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    575e:	1c0a      	adds	r2, r1, #0
    5760:	401a      	ands	r2, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5762:	421d      	tst	r5, r3
    5764:	d000      	beq.n	5768 <main+0x318>
		status_flags |= ADC_STATUS_WINDOW;
    5766:	4322      	orrs	r2, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5768:	421c      	tst	r4, r3
    576a:	d000      	beq.n	576e <main+0x31e>
		status_flags |= ADC_STATUS_OVERRUN;
    576c:	432a      	orrs	r2, r5
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    576e:	4211      	tst	r1, r2
    5770:	d0f3      	beq.n	575a <main+0x30a>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5772:	7e43      	ldrb	r3, [r0, #25]
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    5774:	b25b      	sxtb	r3, r3
    5776:	2b00      	cmp	r3, #0
    5778:	dbfb      	blt.n	5772 <main+0x322>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    577a:	8b41      	ldrh	r1, [r0, #26]
    577c:	b289      	uxth	r1, r1
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    577e:	2301      	movs	r3, #1
    5780:	7603      	strb	r3, [r0, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    5782:	7e02      	ldrb	r2, [r0, #24]
    5784:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5786:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    5788:	0755      	lsls	r5, r2, #29
    578a:	d501      	bpl.n	5790 <main+0x340>
		status_flags |= ADC_STATUS_WINDOW;
    578c:	2402      	movs	r4, #2
    578e:	4323      	orrs	r3, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5790:	0794      	lsls	r4, r2, #30
    5792:	d501      	bpl.n	5798 <main+0x348>
		status_flags |= ADC_STATUS_OVERRUN;
    5794:	2204      	movs	r2, #4
    5796:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5798:	075d      	lsls	r5, r3, #29
    579a:	d400      	bmi.n	579e <main+0x34e>
    579c:	e0b3      	b.n	5906 <main+0x4b6>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    579e:	2302      	movs	r3, #2
    57a0:	7603      	strb	r3, [r0, #24]
    57a2:	e0b0      	b.n	5906 <main+0x4b6>
    57a4:	46c0      	nop			; (mov r8, r8)
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	00000000 	.word	0x00000000
    57ac:	40400000 	.word	0x40400000
    57b0:	000050ad 	.word	0x000050ad
    57b4:	00160002 	.word	0x00160002
    57b8:	00170002 	.word	0x00170002
    57bc:	20000c7c 	.word	0x20000c7c
    57c0:	20000de8 	.word	0x20000de8
    57c4:	00005439 	.word	0x00005439
    57c8:	20000de4 	.word	0x20000de4
    57cc:	0000540d 	.word	0x0000540d
    57d0:	20000de0 	.word	0x20000de0
    57d4:	42001400 	.word	0x42001400
    57d8:	00004691 	.word	0x00004691
    57dc:	20000474 	.word	0x20000474
    57e0:	0000738d 	.word	0x0000738d
    57e4:	00009110 	.word	0x00009110
    57e8:	00007379 	.word	0x00007379
    57ec:	000003b1 	.word	0x000003b1
    57f0:	0000015d 	.word	0x0000015d
    57f4:	00000111 	.word	0x00000111
    57f8:	0000030d 	.word	0x0000030d
    57fc:	000041b1 	.word	0x000041b1
    5800:	41004400 	.word	0x41004400
    5804:	20000dec 	.word	0x20000dec
    5808:	42004000 	.word	0x42004000
    580c:	00000591 	.word	0x00000591
    5810:	40000800 	.word	0x40000800
    5814:	00001a75 	.word	0x00001a75
    5818:	000052ad 	.word	0x000052ad
    581c:	00002575 	.word	0x00002575
    5820:	00009170 	.word	0x00009170
    5824:	00009194 	.word	0x00009194
    5828:	20000c34 	.word	0x20000c34
    582c:	000025c9 	.word	0x000025c9
    5830:	00003729 	.word	0x00003729
    5834:	000052a1 	.word	0x000052a1
    5838:	0000525d 	.word	0x0000525d
    583c:	00003761 	.word	0x00003761
    5840:	20000c38 	.word	0x20000c38
    5844:	000091c0 	.word	0x000091c0
    5848:	20000410 	.word	0x20000410
    584c:	20000bf4 	.word	0x20000bf4
    5850:	000091d8 	.word	0x000091d8
    5854:	000091ec 	.word	0x000091ec
    5858:	00007281 	.word	0x00007281
    585c:	00007579 	.word	0x00007579
    5860:	000025d5 	.word	0x000025d5
    5864:	00001299 	.word	0x00001299
    5868:	20000c78 	.word	0x20000c78
    586c:	000092dc 	.word	0x000092dc
    5870:	00008ee0 	.word	0x00008ee0
    5874:	0000169d 	.word	0x0000169d
    5878:	0000726f 	.word	0x0000726f
    587c:	00001a31 	.word	0x00001a31
    5880:	000019a5 	.word	0x000019a5
    5884:	0000920c 	.word	0x0000920c
    5888:	00000202 	.word	0x00000202
    588c:	00009230 	.word	0x00009230
    5890:	00000359 	.word	0x00000359
    5894:	00009240 	.word	0x00009240
    5898:	000004c1 	.word	0x000004c1
    589c:	00005bb1 	.word	0x00005bb1
	ssd1306_set_page_address(0);
	ssd1306_set_column_address(0);

	for(int col = 0; col < 128; ++col)
	{
		ssd1306_write_data(0x00);
    58a0:	2000      	movs	r0, #0
    58a2:	47a8      	blx	r5
    58a4:	3c01      	subs	r4, #1
	sprintf( temperatureBuffer, "WINC Temperature : %d'F", (temperatureValue*(9/5)+32) );
	
	ssd1306_set_page_address(0);
	ssd1306_set_column_address(0);

	for(int col = 0; col < 128; ++col)
    58a6:	2c00      	cmp	r4, #0
    58a8:	d1fa      	bne.n	58a0 <main+0x450>
	{
		ssd1306_write_data(0x00);
	}
	
	ssd1306_write_text( temperatureBuffer );
    58aa:	a804      	add	r0, sp, #16
    58ac:	4b32      	ldr	r3, [pc, #200]	; (5978 <main+0x528>)
    58ae:	4798      	blx	r3
}

static void display_light( uint8_t lightValue )
{
	char lightBuffer[ 128 ] = { 0, };
    58b0:	a804      	add	r0, sp, #16
    58b2:	2100      	movs	r1, #0
    58b4:	2280      	movs	r2, #128	; 0x80
    58b6:	4b31      	ldr	r3, [pc, #196]	; (597c <main+0x52c>)
    58b8:	4798      	blx	r3
	sprintf( lightBuffer, "WINC Light : %d", lightValue );
    58ba:	a804      	add	r0, sp, #16
    58bc:	4930      	ldr	r1, [pc, #192]	; (5980 <main+0x530>)
    58be:	465a      	mov	r2, fp
    58c0:	4b30      	ldr	r3, [pc, #192]	; (5984 <main+0x534>)
    58c2:	4798      	blx	r3
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    58c4:	20b1      	movs	r0, #177	; 0xb1
    58c6:	4c30      	ldr	r4, [pc, #192]	; (5988 <main+0x538>)
    58c8:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    58ca:	2010      	movs	r0, #16
    58cc:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    58ce:	2000      	movs	r0, #0
    58d0:	47a0      	blx	r4
    58d2:	2480      	movs	r4, #128	; 0x80
	ssd1306_set_page_address(1);
	ssd1306_set_column_address(0);
	
	for(int col = 0; col < 128; ++col)
	{
		ssd1306_write_data(0x00);
    58d4:	4d2d      	ldr	r5, [pc, #180]	; (598c <main+0x53c>)
    58d6:	2000      	movs	r0, #0
    58d8:	47a8      	blx	r5
    58da:	3c01      	subs	r4, #1
	sprintf( lightBuffer, "WINC Light : %d", lightValue );
	
	ssd1306_set_page_address(1);
	ssd1306_set_column_address(0);
	
	for(int col = 0; col < 128; ++col)
    58dc:	2c00      	cmp	r4, #0
    58de:	d1fa      	bne.n	58d6 <main+0x486>
	{
		ssd1306_write_data(0x00);
	}
	
	ssd1306_write_text( lightBuffer );
    58e0:	a804      	add	r0, sp, #16
    58e2:	4b25      	ldr	r3, [pc, #148]	; (5978 <main+0x528>)
    58e4:	4798      	blx	r3
					sprintf(buf, "{\"columns\":[[\"temperature\", \"%d.%d\"]]}", (int)tempf, (int)((int)(tempf * 100) % 100));
					//sprintf(buf, "{\"columns\":[[\"temperature\", \"%.2d\"],[\"timeis\", \"%u\"]]}", (int)tempf, (unsigned)time(NULL));
					display_temperature( (uint8_t)temperature );
					display_light( light );		
					
					pubnub_publish(m_pb, channel, buf);
    58e6:	4b2a      	ldr	r3, [pc, #168]	; (5990 <main+0x540>)
    58e8:	6818      	ldr	r0, [r3, #0]
    58ea:	492a      	ldr	r1, [pc, #168]	; (5994 <main+0x544>)
    58ec:	aa24      	add	r2, sp, #144	; 0x90
    58ee:	4b2a      	ldr	r3, [pc, #168]	; (5998 <main+0x548>)
    58f0:	4798      	blx	r3
				char buf[256] = {0, };
					
				nm_bsp_sleep(800);
				
				if(m_pb->trans == PBTT_NONE || (m_pb->trans == PBTT_SUBSCRIBE && m_pb->last_result == PNR_OK)
					|| (m_pb->trans == PBTT_PUBLISH && m_pb->last_result == PNR_IO_ERROR)) {
    58f2:	e690      	b.n	5616 <main+0x1c6>
					  pubnub_publish(m_pb, channel, buf);	
					}
					*/						
				}
				else {
					printf("pubnubDemo: subscribe event.\r\n");
    58f4:	4829      	ldr	r0, [pc, #164]	; (599c <main+0x54c>)
    58f6:	4b2a      	ldr	r3, [pc, #168]	; (59a0 <main+0x550>)
    58f8:	4798      	blx	r3
					
					pubnub_subscribe(m_pb, r21_channel);
    58fa:	4b25      	ldr	r3, [pc, #148]	; (5990 <main+0x540>)
    58fc:	6818      	ldr	r0, [r3, #0]
    58fe:	4929      	ldr	r1, [pc, #164]	; (59a4 <main+0x554>)
    5900:	4b29      	ldr	r3, [pc, #164]	; (59a8 <main+0x558>)
    5902:	4798      	blx	r3
    5904:	e687      	b.n	5616 <main+0x1c6>
					
					printf("pubnubDemo: publish event.\r\n");
					
					double temperature = at30tse_read_temperature();
					double tempf = (temperature*(9/5))+32;
					uint8_t light = MAX_LIGHT_VALUE - (get_light_value() * MAX_LIGHT_VALUE / LIGHT_SENSOR_RESOLUTION);
    5906:	008b      	lsls	r3, r1, #2
    5908:	1859      	adds	r1, r3, r1
    590a:	0a49      	lsrs	r1, r1, #9
    590c:	2328      	movs	r3, #40	; 0x28
    590e:	1a5b      	subs	r3, r3, r1
    5910:	b2db      	uxtb	r3, r3
    5912:	469b      	mov	fp, r3
					//sprintf(buf, "{\"temperature\":\"%d.%d\", \"light\":\"%d\"}", (int)tempf, (int)((int)(tempf * 100) % 100), light );
					//   sprintf(buf, "{\"temperature\":\"%d\", \"light\":\"%d\"}", (int)tempf, light );   
			
					sprintf(buf, "{\"columns\":[[\"temperature\", \"%d.%d\"]]}", (int)tempf, (int)((int)(tempf * 100) % 100));
    5914:	4825      	ldr	r0, [pc, #148]	; (59ac <main+0x55c>)
    5916:	4681      	mov	r9, r0
    5918:	9802      	ldr	r0, [sp, #8]
    591a:	9903      	ldr	r1, [sp, #12]
    591c:	47c8      	blx	r9
    591e:	4682      	mov	sl, r0
    5920:	9802      	ldr	r0, [sp, #8]
    5922:	9903      	ldr	r1, [sp, #12]
    5924:	4b13      	ldr	r3, [pc, #76]	; (5974 <main+0x524>)
    5926:	4a12      	ldr	r2, [pc, #72]	; (5970 <main+0x520>)
    5928:	4c21      	ldr	r4, [pc, #132]	; (59b0 <main+0x560>)
    592a:	47a0      	blx	r4
    592c:	47c8      	blx	r9
    592e:	2164      	movs	r1, #100	; 0x64
    5930:	4b20      	ldr	r3, [pc, #128]	; (59b4 <main+0x564>)
    5932:	4798      	blx	r3
    5934:	1c0b      	adds	r3, r1, #0
    5936:	a824      	add	r0, sp, #144	; 0x90
    5938:	491f      	ldr	r1, [pc, #124]	; (59b8 <main+0x568>)
    593a:	4652      	mov	r2, sl
    593c:	4c11      	ldr	r4, [pc, #68]	; (5984 <main+0x534>)
    593e:	47a0      	blx	r4
	}
}

static void display_temperature( uint8_t temperatureValue )
{
	char temperatureBuffer[ 128 ] = { 0, };
    5940:	a804      	add	r0, sp, #16
    5942:	2100      	movs	r1, #0
    5944:	2280      	movs	r2, #128	; 0x80
    5946:	4b0d      	ldr	r3, [pc, #52]	; (597c <main+0x52c>)
    5948:	4798      	blx	r3
					//sprintf(buf, "{\"temperature\":\"%d.%d\", \"light\":\"%d\"}", (int)tempf, (int)((int)(tempf * 100) % 100), light );
					//   sprintf(buf, "{\"temperature\":\"%d\", \"light\":\"%d\"}", (int)tempf, light );   
			
					sprintf(buf, "{\"columns\":[[\"temperature\", \"%d.%d\"]]}", (int)tempf, (int)((int)(tempf * 100) % 100));
					//sprintf(buf, "{\"columns\":[[\"temperature\", \"%.2d\"],[\"timeis\", \"%u\"]]}", (int)tempf, (unsigned)time(NULL));
					display_temperature( (uint8_t)temperature );
    594a:	1c30      	adds	r0, r6, #0
    594c:	1c39      	adds	r1, r7, #0
    594e:	4b1b      	ldr	r3, [pc, #108]	; (59bc <main+0x56c>)
    5950:	4798      	blx	r3
}

static void display_temperature( uint8_t temperatureValue )
{
	char temperatureBuffer[ 128 ] = { 0, };
	sprintf( temperatureBuffer, "WINC Temperature : %d'F", (temperatureValue*(9/5)+32) );
    5952:	b2c2      	uxtb	r2, r0
    5954:	3220      	adds	r2, #32
    5956:	a804      	add	r0, sp, #16
    5958:	4919      	ldr	r1, [pc, #100]	; (59c0 <main+0x570>)
    595a:	47a0      	blx	r4
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
    595c:	20b0      	movs	r0, #176	; 0xb0
    595e:	4c0a      	ldr	r4, [pc, #40]	; (5988 <main+0x538>)
    5960:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
    5962:	2010      	movs	r0, #16
    5964:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
    5966:	2000      	movs	r0, #0
    5968:	47a0      	blx	r4
    596a:	2480      	movs	r4, #128	; 0x80
	ssd1306_set_page_address(0);
	ssd1306_set_column_address(0);

	for(int col = 0; col < 128; ++col)
	{
		ssd1306_write_data(0x00);
    596c:	4d07      	ldr	r5, [pc, #28]	; (598c <main+0x53c>)
    596e:	e797      	b.n	58a0 <main+0x450>
    5970:	00000000 	.word	0x00000000
    5974:	40590000 	.word	0x40590000
    5978:	00000359 	.word	0x00000359
    597c:	0000726f 	.word	0x0000726f
    5980:	0000925c 	.word	0x0000925c
    5984:	00007511 	.word	0x00007511
    5988:	00000111 	.word	0x00000111
    598c:	0000030d 	.word	0x0000030d
    5990:	20000c78 	.word	0x20000c78
    5994:	000092cc 	.word	0x000092cc
    5998:	000016f5 	.word	0x000016f5
    599c:	0000926c 	.word	0x0000926c
    59a0:	00007379 	.word	0x00007379
    59a4:	00008f0c 	.word	0x00008f0c
    59a8:	00001861 	.word	0x00001861
    59ac:	00006d7d 	.word	0x00006d7d
    59b0:	000061f5 	.word	0x000061f5
    59b4:	00005b11 	.word	0x00005b11
    59b8:	0000928c 	.word	0x0000928c
    59bc:	00005b71 	.word	0x00005b71
    59c0:	000092b4 	.word	0x000092b4
    59c4:	46c0      	nop			; (mov r8, r8)
    59c6:	46c0      	nop			; (mov r8, r8)

000059c8 <__aeabi_uidiv>:
    59c8:	2900      	cmp	r1, #0
    59ca:	d034      	beq.n	5a36 <.udivsi3_skip_div0_test+0x6a>

000059cc <.udivsi3_skip_div0_test>:
    59cc:	2301      	movs	r3, #1
    59ce:	2200      	movs	r2, #0
    59d0:	b410      	push	{r4}
    59d2:	4288      	cmp	r0, r1
    59d4:	d32c      	bcc.n	5a30 <.udivsi3_skip_div0_test+0x64>
    59d6:	2401      	movs	r4, #1
    59d8:	0724      	lsls	r4, r4, #28
    59da:	42a1      	cmp	r1, r4
    59dc:	d204      	bcs.n	59e8 <.udivsi3_skip_div0_test+0x1c>
    59de:	4281      	cmp	r1, r0
    59e0:	d202      	bcs.n	59e8 <.udivsi3_skip_div0_test+0x1c>
    59e2:	0109      	lsls	r1, r1, #4
    59e4:	011b      	lsls	r3, r3, #4
    59e6:	e7f8      	b.n	59da <.udivsi3_skip_div0_test+0xe>
    59e8:	00e4      	lsls	r4, r4, #3
    59ea:	42a1      	cmp	r1, r4
    59ec:	d204      	bcs.n	59f8 <.udivsi3_skip_div0_test+0x2c>
    59ee:	4281      	cmp	r1, r0
    59f0:	d202      	bcs.n	59f8 <.udivsi3_skip_div0_test+0x2c>
    59f2:	0049      	lsls	r1, r1, #1
    59f4:	005b      	lsls	r3, r3, #1
    59f6:	e7f8      	b.n	59ea <.udivsi3_skip_div0_test+0x1e>
    59f8:	4288      	cmp	r0, r1
    59fa:	d301      	bcc.n	5a00 <.udivsi3_skip_div0_test+0x34>
    59fc:	1a40      	subs	r0, r0, r1
    59fe:	431a      	orrs	r2, r3
    5a00:	084c      	lsrs	r4, r1, #1
    5a02:	42a0      	cmp	r0, r4
    5a04:	d302      	bcc.n	5a0c <.udivsi3_skip_div0_test+0x40>
    5a06:	1b00      	subs	r0, r0, r4
    5a08:	085c      	lsrs	r4, r3, #1
    5a0a:	4322      	orrs	r2, r4
    5a0c:	088c      	lsrs	r4, r1, #2
    5a0e:	42a0      	cmp	r0, r4
    5a10:	d302      	bcc.n	5a18 <.udivsi3_skip_div0_test+0x4c>
    5a12:	1b00      	subs	r0, r0, r4
    5a14:	089c      	lsrs	r4, r3, #2
    5a16:	4322      	orrs	r2, r4
    5a18:	08cc      	lsrs	r4, r1, #3
    5a1a:	42a0      	cmp	r0, r4
    5a1c:	d302      	bcc.n	5a24 <.udivsi3_skip_div0_test+0x58>
    5a1e:	1b00      	subs	r0, r0, r4
    5a20:	08dc      	lsrs	r4, r3, #3
    5a22:	4322      	orrs	r2, r4
    5a24:	2800      	cmp	r0, #0
    5a26:	d003      	beq.n	5a30 <.udivsi3_skip_div0_test+0x64>
    5a28:	091b      	lsrs	r3, r3, #4
    5a2a:	d001      	beq.n	5a30 <.udivsi3_skip_div0_test+0x64>
    5a2c:	0909      	lsrs	r1, r1, #4
    5a2e:	e7e3      	b.n	59f8 <.udivsi3_skip_div0_test+0x2c>
    5a30:	1c10      	adds	r0, r2, #0
    5a32:	bc10      	pop	{r4}
    5a34:	4770      	bx	lr
    5a36:	2800      	cmp	r0, #0
    5a38:	d001      	beq.n	5a3e <.udivsi3_skip_div0_test+0x72>
    5a3a:	2000      	movs	r0, #0
    5a3c:	43c0      	mvns	r0, r0
    5a3e:	b407      	push	{r0, r1, r2}
    5a40:	4802      	ldr	r0, [pc, #8]	; (5a4c <.udivsi3_skip_div0_test+0x80>)
    5a42:	a102      	add	r1, pc, #8	; (adr r1, 5a4c <.udivsi3_skip_div0_test+0x80>)
    5a44:	1840      	adds	r0, r0, r1
    5a46:	9002      	str	r0, [sp, #8]
    5a48:	bd03      	pop	{r0, r1, pc}
    5a4a:	46c0      	nop			; (mov r8, r8)
    5a4c:	000000d9 	.word	0x000000d9

00005a50 <__aeabi_uidivmod>:
    5a50:	2900      	cmp	r1, #0
    5a52:	d0f0      	beq.n	5a36 <.udivsi3_skip_div0_test+0x6a>
    5a54:	b503      	push	{r0, r1, lr}
    5a56:	f7ff ffb9 	bl	59cc <.udivsi3_skip_div0_test>
    5a5a:	bc0e      	pop	{r1, r2, r3}
    5a5c:	4342      	muls	r2, r0
    5a5e:	1a89      	subs	r1, r1, r2
    5a60:	4718      	bx	r3
    5a62:	46c0      	nop			; (mov r8, r8)

00005a64 <__aeabi_idiv>:
    5a64:	2900      	cmp	r1, #0
    5a66:	d041      	beq.n	5aec <.divsi3_skip_div0_test+0x84>

00005a68 <.divsi3_skip_div0_test>:
    5a68:	b410      	push	{r4}
    5a6a:	1c04      	adds	r4, r0, #0
    5a6c:	404c      	eors	r4, r1
    5a6e:	46a4      	mov	ip, r4
    5a70:	2301      	movs	r3, #1
    5a72:	2200      	movs	r2, #0
    5a74:	2900      	cmp	r1, #0
    5a76:	d500      	bpl.n	5a7a <.divsi3_skip_div0_test+0x12>
    5a78:	4249      	negs	r1, r1
    5a7a:	2800      	cmp	r0, #0
    5a7c:	d500      	bpl.n	5a80 <.divsi3_skip_div0_test+0x18>
    5a7e:	4240      	negs	r0, r0
    5a80:	4288      	cmp	r0, r1
    5a82:	d32c      	bcc.n	5ade <.divsi3_skip_div0_test+0x76>
    5a84:	2401      	movs	r4, #1
    5a86:	0724      	lsls	r4, r4, #28
    5a88:	42a1      	cmp	r1, r4
    5a8a:	d204      	bcs.n	5a96 <.divsi3_skip_div0_test+0x2e>
    5a8c:	4281      	cmp	r1, r0
    5a8e:	d202      	bcs.n	5a96 <.divsi3_skip_div0_test+0x2e>
    5a90:	0109      	lsls	r1, r1, #4
    5a92:	011b      	lsls	r3, r3, #4
    5a94:	e7f8      	b.n	5a88 <.divsi3_skip_div0_test+0x20>
    5a96:	00e4      	lsls	r4, r4, #3
    5a98:	42a1      	cmp	r1, r4
    5a9a:	d204      	bcs.n	5aa6 <.divsi3_skip_div0_test+0x3e>
    5a9c:	4281      	cmp	r1, r0
    5a9e:	d202      	bcs.n	5aa6 <.divsi3_skip_div0_test+0x3e>
    5aa0:	0049      	lsls	r1, r1, #1
    5aa2:	005b      	lsls	r3, r3, #1
    5aa4:	e7f8      	b.n	5a98 <.divsi3_skip_div0_test+0x30>
    5aa6:	4288      	cmp	r0, r1
    5aa8:	d301      	bcc.n	5aae <.divsi3_skip_div0_test+0x46>
    5aaa:	1a40      	subs	r0, r0, r1
    5aac:	431a      	orrs	r2, r3
    5aae:	084c      	lsrs	r4, r1, #1
    5ab0:	42a0      	cmp	r0, r4
    5ab2:	d302      	bcc.n	5aba <.divsi3_skip_div0_test+0x52>
    5ab4:	1b00      	subs	r0, r0, r4
    5ab6:	085c      	lsrs	r4, r3, #1
    5ab8:	4322      	orrs	r2, r4
    5aba:	088c      	lsrs	r4, r1, #2
    5abc:	42a0      	cmp	r0, r4
    5abe:	d302      	bcc.n	5ac6 <.divsi3_skip_div0_test+0x5e>
    5ac0:	1b00      	subs	r0, r0, r4
    5ac2:	089c      	lsrs	r4, r3, #2
    5ac4:	4322      	orrs	r2, r4
    5ac6:	08cc      	lsrs	r4, r1, #3
    5ac8:	42a0      	cmp	r0, r4
    5aca:	d302      	bcc.n	5ad2 <.divsi3_skip_div0_test+0x6a>
    5acc:	1b00      	subs	r0, r0, r4
    5ace:	08dc      	lsrs	r4, r3, #3
    5ad0:	4322      	orrs	r2, r4
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d003      	beq.n	5ade <.divsi3_skip_div0_test+0x76>
    5ad6:	091b      	lsrs	r3, r3, #4
    5ad8:	d001      	beq.n	5ade <.divsi3_skip_div0_test+0x76>
    5ada:	0909      	lsrs	r1, r1, #4
    5adc:	e7e3      	b.n	5aa6 <.divsi3_skip_div0_test+0x3e>
    5ade:	1c10      	adds	r0, r2, #0
    5ae0:	4664      	mov	r4, ip
    5ae2:	2c00      	cmp	r4, #0
    5ae4:	d500      	bpl.n	5ae8 <.divsi3_skip_div0_test+0x80>
    5ae6:	4240      	negs	r0, r0
    5ae8:	bc10      	pop	{r4}
    5aea:	4770      	bx	lr
    5aec:	2800      	cmp	r0, #0
    5aee:	d006      	beq.n	5afe <.divsi3_skip_div0_test+0x96>
    5af0:	db03      	blt.n	5afa <.divsi3_skip_div0_test+0x92>
    5af2:	2000      	movs	r0, #0
    5af4:	43c0      	mvns	r0, r0
    5af6:	0840      	lsrs	r0, r0, #1
    5af8:	e001      	b.n	5afe <.divsi3_skip_div0_test+0x96>
    5afa:	2080      	movs	r0, #128	; 0x80
    5afc:	0600      	lsls	r0, r0, #24
    5afe:	b407      	push	{r0, r1, r2}
    5b00:	4802      	ldr	r0, [pc, #8]	; (5b0c <.divsi3_skip_div0_test+0xa4>)
    5b02:	a102      	add	r1, pc, #8	; (adr r1, 5b0c <.divsi3_skip_div0_test+0xa4>)
    5b04:	1840      	adds	r0, r0, r1
    5b06:	9002      	str	r0, [sp, #8]
    5b08:	bd03      	pop	{r0, r1, pc}
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	00000019 	.word	0x00000019

00005b10 <__aeabi_idivmod>:
    5b10:	2900      	cmp	r1, #0
    5b12:	d0eb      	beq.n	5aec <.divsi3_skip_div0_test+0x84>
    5b14:	b503      	push	{r0, r1, lr}
    5b16:	f7ff ffa7 	bl	5a68 <.divsi3_skip_div0_test>
    5b1a:	bc0e      	pop	{r1, r2, r3}
    5b1c:	4342      	muls	r2, r0
    5b1e:	1a89      	subs	r1, r1, r2
    5b20:	4718      	bx	r3
    5b22:	46c0      	nop			; (mov r8, r8)

00005b24 <__aeabi_idiv0>:
    5b24:	4770      	bx	lr
    5b26:	46c0      	nop			; (mov r8, r8)

00005b28 <__aeabi_lmul>:
    5b28:	469c      	mov	ip, r3
    5b2a:	0403      	lsls	r3, r0, #16
    5b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b2e:	0c1b      	lsrs	r3, r3, #16
    5b30:	0417      	lsls	r7, r2, #16
    5b32:	0c3f      	lsrs	r7, r7, #16
    5b34:	0c15      	lsrs	r5, r2, #16
    5b36:	1c1e      	adds	r6, r3, #0
    5b38:	1c04      	adds	r4, r0, #0
    5b3a:	0c00      	lsrs	r0, r0, #16
    5b3c:	437e      	muls	r6, r7
    5b3e:	436b      	muls	r3, r5
    5b40:	4347      	muls	r7, r0
    5b42:	4345      	muls	r5, r0
    5b44:	18fb      	adds	r3, r7, r3
    5b46:	0c30      	lsrs	r0, r6, #16
    5b48:	1818      	adds	r0, r3, r0
    5b4a:	4287      	cmp	r7, r0
    5b4c:	d902      	bls.n	5b54 <__aeabi_lmul+0x2c>
    5b4e:	2380      	movs	r3, #128	; 0x80
    5b50:	025b      	lsls	r3, r3, #9
    5b52:	18ed      	adds	r5, r5, r3
    5b54:	0c03      	lsrs	r3, r0, #16
    5b56:	18ed      	adds	r5, r5, r3
    5b58:	4663      	mov	r3, ip
    5b5a:	435c      	muls	r4, r3
    5b5c:	434a      	muls	r2, r1
    5b5e:	0436      	lsls	r6, r6, #16
    5b60:	0c36      	lsrs	r6, r6, #16
    5b62:	18a1      	adds	r1, r4, r2
    5b64:	0400      	lsls	r0, r0, #16
    5b66:	1980      	adds	r0, r0, r6
    5b68:	1949      	adds	r1, r1, r5
    5b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b6c:	0000      	movs	r0, r0
	...

00005b70 <__aeabi_d2uiz>:
    5b70:	b538      	push	{r3, r4, r5, lr}
    5b72:	4b0e      	ldr	r3, [pc, #56]	; (5bac <__aeabi_d2uiz+0x3c>)
    5b74:	4a0c      	ldr	r2, [pc, #48]	; (5ba8 <__aeabi_d2uiz+0x38>)
    5b76:	1c04      	adds	r4, r0, #0
    5b78:	1c0d      	adds	r5, r1, #0
    5b7a:	f001 f9a5 	bl	6ec8 <__aeabi_dcmpge>
    5b7e:	2800      	cmp	r0, #0
    5b80:	d104      	bne.n	5b8c <__aeabi_d2uiz+0x1c>
    5b82:	1c20      	adds	r0, r4, #0
    5b84:	1c29      	adds	r1, r5, #0
    5b86:	f001 f8f9 	bl	6d7c <__aeabi_d2iz>
    5b8a:	bd38      	pop	{r3, r4, r5, pc}
    5b8c:	4b07      	ldr	r3, [pc, #28]	; (5bac <__aeabi_d2uiz+0x3c>)
    5b8e:	4a06      	ldr	r2, [pc, #24]	; (5ba8 <__aeabi_d2uiz+0x38>)
    5b90:	1c20      	adds	r0, r4, #0
    5b92:	1c29      	adds	r1, r5, #0
    5b94:	f000 fdbe 	bl	6714 <__aeabi_dsub>
    5b98:	f001 f8f0 	bl	6d7c <__aeabi_d2iz>
    5b9c:	2380      	movs	r3, #128	; 0x80
    5b9e:	061b      	lsls	r3, r3, #24
    5ba0:	18c0      	adds	r0, r0, r3
    5ba2:	e7f2      	b.n	5b8a <__aeabi_d2uiz+0x1a>
    5ba4:	46c0      	nop			; (mov r8, r8)
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	00000000 	.word	0x00000000
    5bac:	41e00000 	.word	0x41e00000

00005bb0 <__aeabi_dadd>:
    5bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bb2:	465f      	mov	r7, fp
    5bb4:	4656      	mov	r6, sl
    5bb6:	4644      	mov	r4, r8
    5bb8:	464d      	mov	r5, r9
    5bba:	b4f0      	push	{r4, r5, r6, r7}
    5bbc:	030c      	lsls	r4, r1, #12
    5bbe:	004d      	lsls	r5, r1, #1
    5bc0:	0fce      	lsrs	r6, r1, #31
    5bc2:	0a61      	lsrs	r1, r4, #9
    5bc4:	0f44      	lsrs	r4, r0, #29
    5bc6:	4321      	orrs	r1, r4
    5bc8:	00c4      	lsls	r4, r0, #3
    5bca:	0318      	lsls	r0, r3, #12
    5bcc:	4680      	mov	r8, r0
    5bce:	0058      	lsls	r0, r3, #1
    5bd0:	0d40      	lsrs	r0, r0, #21
    5bd2:	4682      	mov	sl, r0
    5bd4:	0fd8      	lsrs	r0, r3, #31
    5bd6:	4684      	mov	ip, r0
    5bd8:	4640      	mov	r0, r8
    5bda:	0a40      	lsrs	r0, r0, #9
    5bdc:	0f53      	lsrs	r3, r2, #29
    5bde:	4303      	orrs	r3, r0
    5be0:	00d0      	lsls	r0, r2, #3
    5be2:	0d6d      	lsrs	r5, r5, #21
    5be4:	1c37      	adds	r7, r6, #0
    5be6:	4683      	mov	fp, r0
    5be8:	4652      	mov	r2, sl
    5bea:	4566      	cmp	r6, ip
    5bec:	d100      	bne.n	5bf0 <__aeabi_dadd+0x40>
    5bee:	e0a4      	b.n	5d3a <__aeabi_dadd+0x18a>
    5bf0:	1aaf      	subs	r7, r5, r2
    5bf2:	2f00      	cmp	r7, #0
    5bf4:	dc00      	bgt.n	5bf8 <__aeabi_dadd+0x48>
    5bf6:	e109      	b.n	5e0c <__aeabi_dadd+0x25c>
    5bf8:	2a00      	cmp	r2, #0
    5bfa:	d13b      	bne.n	5c74 <__aeabi_dadd+0xc4>
    5bfc:	4318      	orrs	r0, r3
    5bfe:	d000      	beq.n	5c02 <__aeabi_dadd+0x52>
    5c00:	e0ea      	b.n	5dd8 <__aeabi_dadd+0x228>
    5c02:	0763      	lsls	r3, r4, #29
    5c04:	d100      	bne.n	5c08 <__aeabi_dadd+0x58>
    5c06:	e087      	b.n	5d18 <__aeabi_dadd+0x168>
    5c08:	230f      	movs	r3, #15
    5c0a:	4023      	ands	r3, r4
    5c0c:	2b04      	cmp	r3, #4
    5c0e:	d100      	bne.n	5c12 <__aeabi_dadd+0x62>
    5c10:	e082      	b.n	5d18 <__aeabi_dadd+0x168>
    5c12:	1d22      	adds	r2, r4, #4
    5c14:	42a2      	cmp	r2, r4
    5c16:	41a4      	sbcs	r4, r4
    5c18:	4264      	negs	r4, r4
    5c1a:	2380      	movs	r3, #128	; 0x80
    5c1c:	1909      	adds	r1, r1, r4
    5c1e:	041b      	lsls	r3, r3, #16
    5c20:	400b      	ands	r3, r1
    5c22:	1c37      	adds	r7, r6, #0
    5c24:	1c14      	adds	r4, r2, #0
    5c26:	2b00      	cmp	r3, #0
    5c28:	d100      	bne.n	5c2c <__aeabi_dadd+0x7c>
    5c2a:	e07c      	b.n	5d26 <__aeabi_dadd+0x176>
    5c2c:	4bce      	ldr	r3, [pc, #824]	; (5f68 <__aeabi_dadd+0x3b8>)
    5c2e:	3501      	adds	r5, #1
    5c30:	429d      	cmp	r5, r3
    5c32:	d100      	bne.n	5c36 <__aeabi_dadd+0x86>
    5c34:	e105      	b.n	5e42 <__aeabi_dadd+0x292>
    5c36:	4bcd      	ldr	r3, [pc, #820]	; (5f6c <__aeabi_dadd+0x3bc>)
    5c38:	08e4      	lsrs	r4, r4, #3
    5c3a:	4019      	ands	r1, r3
    5c3c:	0748      	lsls	r0, r1, #29
    5c3e:	0249      	lsls	r1, r1, #9
    5c40:	4304      	orrs	r4, r0
    5c42:	0b0b      	lsrs	r3, r1, #12
    5c44:	2000      	movs	r0, #0
    5c46:	2100      	movs	r1, #0
    5c48:	031b      	lsls	r3, r3, #12
    5c4a:	0b1a      	lsrs	r2, r3, #12
    5c4c:	0d0b      	lsrs	r3, r1, #20
    5c4e:	056d      	lsls	r5, r5, #21
    5c50:	051b      	lsls	r3, r3, #20
    5c52:	4313      	orrs	r3, r2
    5c54:	086a      	lsrs	r2, r5, #1
    5c56:	4dc6      	ldr	r5, [pc, #792]	; (5f70 <__aeabi_dadd+0x3c0>)
    5c58:	07ff      	lsls	r7, r7, #31
    5c5a:	401d      	ands	r5, r3
    5c5c:	4315      	orrs	r5, r2
    5c5e:	006d      	lsls	r5, r5, #1
    5c60:	086d      	lsrs	r5, r5, #1
    5c62:	1c29      	adds	r1, r5, #0
    5c64:	4339      	orrs	r1, r7
    5c66:	1c20      	adds	r0, r4, #0
    5c68:	bc3c      	pop	{r2, r3, r4, r5}
    5c6a:	4690      	mov	r8, r2
    5c6c:	4699      	mov	r9, r3
    5c6e:	46a2      	mov	sl, r4
    5c70:	46ab      	mov	fp, r5
    5c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c74:	48bc      	ldr	r0, [pc, #752]	; (5f68 <__aeabi_dadd+0x3b8>)
    5c76:	4285      	cmp	r5, r0
    5c78:	d0c3      	beq.n	5c02 <__aeabi_dadd+0x52>
    5c7a:	2080      	movs	r0, #128	; 0x80
    5c7c:	0400      	lsls	r0, r0, #16
    5c7e:	4303      	orrs	r3, r0
    5c80:	2f38      	cmp	r7, #56	; 0x38
    5c82:	dd00      	ble.n	5c86 <__aeabi_dadd+0xd6>
    5c84:	e0f0      	b.n	5e68 <__aeabi_dadd+0x2b8>
    5c86:	2f1f      	cmp	r7, #31
    5c88:	dd00      	ble.n	5c8c <__aeabi_dadd+0xdc>
    5c8a:	e124      	b.n	5ed6 <__aeabi_dadd+0x326>
    5c8c:	2020      	movs	r0, #32
    5c8e:	1bc0      	subs	r0, r0, r7
    5c90:	1c1a      	adds	r2, r3, #0
    5c92:	4681      	mov	r9, r0
    5c94:	4082      	lsls	r2, r0
    5c96:	4658      	mov	r0, fp
    5c98:	40f8      	lsrs	r0, r7
    5c9a:	4302      	orrs	r2, r0
    5c9c:	4694      	mov	ip, r2
    5c9e:	4658      	mov	r0, fp
    5ca0:	464a      	mov	r2, r9
    5ca2:	4090      	lsls	r0, r2
    5ca4:	1e42      	subs	r2, r0, #1
    5ca6:	4190      	sbcs	r0, r2
    5ca8:	40fb      	lsrs	r3, r7
    5caa:	4662      	mov	r2, ip
    5cac:	4302      	orrs	r2, r0
    5cae:	1c1f      	adds	r7, r3, #0
    5cb0:	1aa2      	subs	r2, r4, r2
    5cb2:	4294      	cmp	r4, r2
    5cb4:	41a4      	sbcs	r4, r4
    5cb6:	4264      	negs	r4, r4
    5cb8:	1bc9      	subs	r1, r1, r7
    5cba:	1b09      	subs	r1, r1, r4
    5cbc:	1c14      	adds	r4, r2, #0
    5cbe:	020b      	lsls	r3, r1, #8
    5cc0:	d59f      	bpl.n	5c02 <__aeabi_dadd+0x52>
    5cc2:	0249      	lsls	r1, r1, #9
    5cc4:	0a4f      	lsrs	r7, r1, #9
    5cc6:	2f00      	cmp	r7, #0
    5cc8:	d100      	bne.n	5ccc <__aeabi_dadd+0x11c>
    5cca:	e0c8      	b.n	5e5e <__aeabi_dadd+0x2ae>
    5ccc:	1c38      	adds	r0, r7, #0
    5cce:	f001 f905 	bl	6edc <__clzsi2>
    5cd2:	1c02      	adds	r2, r0, #0
    5cd4:	3a08      	subs	r2, #8
    5cd6:	2a1f      	cmp	r2, #31
    5cd8:	dd00      	ble.n	5cdc <__aeabi_dadd+0x12c>
    5cda:	e0b5      	b.n	5e48 <__aeabi_dadd+0x298>
    5cdc:	2128      	movs	r1, #40	; 0x28
    5cde:	1a09      	subs	r1, r1, r0
    5ce0:	1c20      	adds	r0, r4, #0
    5ce2:	4097      	lsls	r7, r2
    5ce4:	40c8      	lsrs	r0, r1
    5ce6:	4307      	orrs	r7, r0
    5ce8:	4094      	lsls	r4, r2
    5cea:	4295      	cmp	r5, r2
    5cec:	dd00      	ble.n	5cf0 <__aeabi_dadd+0x140>
    5cee:	e0b2      	b.n	5e56 <__aeabi_dadd+0x2a6>
    5cf0:	1b55      	subs	r5, r2, r5
    5cf2:	1c69      	adds	r1, r5, #1
    5cf4:	291f      	cmp	r1, #31
    5cf6:	dd00      	ble.n	5cfa <__aeabi_dadd+0x14a>
    5cf8:	e0dc      	b.n	5eb4 <__aeabi_dadd+0x304>
    5cfa:	221f      	movs	r2, #31
    5cfc:	1b55      	subs	r5, r2, r5
    5cfe:	1c3b      	adds	r3, r7, #0
    5d00:	1c22      	adds	r2, r4, #0
    5d02:	40ab      	lsls	r3, r5
    5d04:	40ca      	lsrs	r2, r1
    5d06:	40ac      	lsls	r4, r5
    5d08:	1e65      	subs	r5, r4, #1
    5d0a:	41ac      	sbcs	r4, r5
    5d0c:	4313      	orrs	r3, r2
    5d0e:	40cf      	lsrs	r7, r1
    5d10:	431c      	orrs	r4, r3
    5d12:	1c39      	adds	r1, r7, #0
    5d14:	2500      	movs	r5, #0
    5d16:	e774      	b.n	5c02 <__aeabi_dadd+0x52>
    5d18:	2380      	movs	r3, #128	; 0x80
    5d1a:	041b      	lsls	r3, r3, #16
    5d1c:	400b      	ands	r3, r1
    5d1e:	1c37      	adds	r7, r6, #0
    5d20:	2b00      	cmp	r3, #0
    5d22:	d000      	beq.n	5d26 <__aeabi_dadd+0x176>
    5d24:	e782      	b.n	5c2c <__aeabi_dadd+0x7c>
    5d26:	4b90      	ldr	r3, [pc, #576]	; (5f68 <__aeabi_dadd+0x3b8>)
    5d28:	0748      	lsls	r0, r1, #29
    5d2a:	08e4      	lsrs	r4, r4, #3
    5d2c:	4304      	orrs	r4, r0
    5d2e:	08c9      	lsrs	r1, r1, #3
    5d30:	429d      	cmp	r5, r3
    5d32:	d048      	beq.n	5dc6 <__aeabi_dadd+0x216>
    5d34:	0309      	lsls	r1, r1, #12
    5d36:	0b0b      	lsrs	r3, r1, #12
    5d38:	e784      	b.n	5c44 <__aeabi_dadd+0x94>
    5d3a:	1aaa      	subs	r2, r5, r2
    5d3c:	4694      	mov	ip, r2
    5d3e:	2a00      	cmp	r2, #0
    5d40:	dc00      	bgt.n	5d44 <__aeabi_dadd+0x194>
    5d42:	e098      	b.n	5e76 <__aeabi_dadd+0x2c6>
    5d44:	4650      	mov	r0, sl
    5d46:	2800      	cmp	r0, #0
    5d48:	d052      	beq.n	5df0 <__aeabi_dadd+0x240>
    5d4a:	4887      	ldr	r0, [pc, #540]	; (5f68 <__aeabi_dadd+0x3b8>)
    5d4c:	4285      	cmp	r5, r0
    5d4e:	d100      	bne.n	5d52 <__aeabi_dadd+0x1a2>
    5d50:	e757      	b.n	5c02 <__aeabi_dadd+0x52>
    5d52:	2080      	movs	r0, #128	; 0x80
    5d54:	0400      	lsls	r0, r0, #16
    5d56:	4303      	orrs	r3, r0
    5d58:	4662      	mov	r2, ip
    5d5a:	2a38      	cmp	r2, #56	; 0x38
    5d5c:	dd00      	ble.n	5d60 <__aeabi_dadd+0x1b0>
    5d5e:	e0fc      	b.n	5f5a <__aeabi_dadd+0x3aa>
    5d60:	2a1f      	cmp	r2, #31
    5d62:	dd00      	ble.n	5d66 <__aeabi_dadd+0x1b6>
    5d64:	e14a      	b.n	5ffc <__aeabi_dadd+0x44c>
    5d66:	2220      	movs	r2, #32
    5d68:	4660      	mov	r0, ip
    5d6a:	1a10      	subs	r0, r2, r0
    5d6c:	1c1a      	adds	r2, r3, #0
    5d6e:	4082      	lsls	r2, r0
    5d70:	4682      	mov	sl, r0
    5d72:	4691      	mov	r9, r2
    5d74:	4658      	mov	r0, fp
    5d76:	4662      	mov	r2, ip
    5d78:	40d0      	lsrs	r0, r2
    5d7a:	464a      	mov	r2, r9
    5d7c:	4302      	orrs	r2, r0
    5d7e:	4690      	mov	r8, r2
    5d80:	4658      	mov	r0, fp
    5d82:	4652      	mov	r2, sl
    5d84:	4090      	lsls	r0, r2
    5d86:	1e42      	subs	r2, r0, #1
    5d88:	4190      	sbcs	r0, r2
    5d8a:	4642      	mov	r2, r8
    5d8c:	4302      	orrs	r2, r0
    5d8e:	4660      	mov	r0, ip
    5d90:	40c3      	lsrs	r3, r0
    5d92:	1912      	adds	r2, r2, r4
    5d94:	42a2      	cmp	r2, r4
    5d96:	41a4      	sbcs	r4, r4
    5d98:	4264      	negs	r4, r4
    5d9a:	1859      	adds	r1, r3, r1
    5d9c:	1909      	adds	r1, r1, r4
    5d9e:	1c14      	adds	r4, r2, #0
    5da0:	0208      	lsls	r0, r1, #8
    5da2:	d400      	bmi.n	5da6 <__aeabi_dadd+0x1f6>
    5da4:	e72d      	b.n	5c02 <__aeabi_dadd+0x52>
    5da6:	4b70      	ldr	r3, [pc, #448]	; (5f68 <__aeabi_dadd+0x3b8>)
    5da8:	3501      	adds	r5, #1
    5daa:	429d      	cmp	r5, r3
    5dac:	d100      	bne.n	5db0 <__aeabi_dadd+0x200>
    5dae:	e122      	b.n	5ff6 <__aeabi_dadd+0x446>
    5db0:	4b6e      	ldr	r3, [pc, #440]	; (5f6c <__aeabi_dadd+0x3bc>)
    5db2:	0860      	lsrs	r0, r4, #1
    5db4:	4019      	ands	r1, r3
    5db6:	2301      	movs	r3, #1
    5db8:	4023      	ands	r3, r4
    5dba:	1c1c      	adds	r4, r3, #0
    5dbc:	4304      	orrs	r4, r0
    5dbe:	07cb      	lsls	r3, r1, #31
    5dc0:	431c      	orrs	r4, r3
    5dc2:	0849      	lsrs	r1, r1, #1
    5dc4:	e71d      	b.n	5c02 <__aeabi_dadd+0x52>
    5dc6:	1c23      	adds	r3, r4, #0
    5dc8:	430b      	orrs	r3, r1
    5dca:	d03a      	beq.n	5e42 <__aeabi_dadd+0x292>
    5dcc:	2380      	movs	r3, #128	; 0x80
    5dce:	031b      	lsls	r3, r3, #12
    5dd0:	430b      	orrs	r3, r1
    5dd2:	031b      	lsls	r3, r3, #12
    5dd4:	0b1b      	lsrs	r3, r3, #12
    5dd6:	e735      	b.n	5c44 <__aeabi_dadd+0x94>
    5dd8:	3f01      	subs	r7, #1
    5dda:	2f00      	cmp	r7, #0
    5ddc:	d165      	bne.n	5eaa <__aeabi_dadd+0x2fa>
    5dde:	4658      	mov	r0, fp
    5de0:	1a22      	subs	r2, r4, r0
    5de2:	4294      	cmp	r4, r2
    5de4:	41a4      	sbcs	r4, r4
    5de6:	4264      	negs	r4, r4
    5de8:	1ac9      	subs	r1, r1, r3
    5dea:	1b09      	subs	r1, r1, r4
    5dec:	1c14      	adds	r4, r2, #0
    5dee:	e766      	b.n	5cbe <__aeabi_dadd+0x10e>
    5df0:	4658      	mov	r0, fp
    5df2:	4318      	orrs	r0, r3
    5df4:	d100      	bne.n	5df8 <__aeabi_dadd+0x248>
    5df6:	e704      	b.n	5c02 <__aeabi_dadd+0x52>
    5df8:	2201      	movs	r2, #1
    5dfa:	4252      	negs	r2, r2
    5dfc:	4494      	add	ip, r2
    5dfe:	4660      	mov	r0, ip
    5e00:	2800      	cmp	r0, #0
    5e02:	d000      	beq.n	5e06 <__aeabi_dadd+0x256>
    5e04:	e0c5      	b.n	5f92 <__aeabi_dadd+0x3e2>
    5e06:	4658      	mov	r0, fp
    5e08:	1902      	adds	r2, r0, r4
    5e0a:	e7c3      	b.n	5d94 <__aeabi_dadd+0x1e4>
    5e0c:	2f00      	cmp	r7, #0
    5e0e:	d173      	bne.n	5ef8 <__aeabi_dadd+0x348>
    5e10:	1c68      	adds	r0, r5, #1
    5e12:	0540      	lsls	r0, r0, #21
    5e14:	0d40      	lsrs	r0, r0, #21
    5e16:	2801      	cmp	r0, #1
    5e18:	dc00      	bgt.n	5e1c <__aeabi_dadd+0x26c>
    5e1a:	e0de      	b.n	5fda <__aeabi_dadd+0x42a>
    5e1c:	465a      	mov	r2, fp
    5e1e:	1aa2      	subs	r2, r4, r2
    5e20:	4294      	cmp	r4, r2
    5e22:	41bf      	sbcs	r7, r7
    5e24:	1ac8      	subs	r0, r1, r3
    5e26:	427f      	negs	r7, r7
    5e28:	1bc7      	subs	r7, r0, r7
    5e2a:	0238      	lsls	r0, r7, #8
    5e2c:	d400      	bmi.n	5e30 <__aeabi_dadd+0x280>
    5e2e:	e089      	b.n	5f44 <__aeabi_dadd+0x394>
    5e30:	465a      	mov	r2, fp
    5e32:	1b14      	subs	r4, r2, r4
    5e34:	45a3      	cmp	fp, r4
    5e36:	4192      	sbcs	r2, r2
    5e38:	1a59      	subs	r1, r3, r1
    5e3a:	4252      	negs	r2, r2
    5e3c:	1a8f      	subs	r7, r1, r2
    5e3e:	4666      	mov	r6, ip
    5e40:	e741      	b.n	5cc6 <__aeabi_dadd+0x116>
    5e42:	2300      	movs	r3, #0
    5e44:	2400      	movs	r4, #0
    5e46:	e6fd      	b.n	5c44 <__aeabi_dadd+0x94>
    5e48:	1c27      	adds	r7, r4, #0
    5e4a:	3828      	subs	r0, #40	; 0x28
    5e4c:	4087      	lsls	r7, r0
    5e4e:	2400      	movs	r4, #0
    5e50:	4295      	cmp	r5, r2
    5e52:	dc00      	bgt.n	5e56 <__aeabi_dadd+0x2a6>
    5e54:	e74c      	b.n	5cf0 <__aeabi_dadd+0x140>
    5e56:	4945      	ldr	r1, [pc, #276]	; (5f6c <__aeabi_dadd+0x3bc>)
    5e58:	1aad      	subs	r5, r5, r2
    5e5a:	4039      	ands	r1, r7
    5e5c:	e6d1      	b.n	5c02 <__aeabi_dadd+0x52>
    5e5e:	1c20      	adds	r0, r4, #0
    5e60:	f001 f83c 	bl	6edc <__clzsi2>
    5e64:	3020      	adds	r0, #32
    5e66:	e734      	b.n	5cd2 <__aeabi_dadd+0x122>
    5e68:	465a      	mov	r2, fp
    5e6a:	431a      	orrs	r2, r3
    5e6c:	1e53      	subs	r3, r2, #1
    5e6e:	419a      	sbcs	r2, r3
    5e70:	b2d2      	uxtb	r2, r2
    5e72:	2700      	movs	r7, #0
    5e74:	e71c      	b.n	5cb0 <__aeabi_dadd+0x100>
    5e76:	2a00      	cmp	r2, #0
    5e78:	d000      	beq.n	5e7c <__aeabi_dadd+0x2cc>
    5e7a:	e0dc      	b.n	6036 <__aeabi_dadd+0x486>
    5e7c:	1c68      	adds	r0, r5, #1
    5e7e:	0542      	lsls	r2, r0, #21
    5e80:	0d52      	lsrs	r2, r2, #21
    5e82:	2a01      	cmp	r2, #1
    5e84:	dc00      	bgt.n	5e88 <__aeabi_dadd+0x2d8>
    5e86:	e08d      	b.n	5fa4 <__aeabi_dadd+0x3f4>
    5e88:	4d37      	ldr	r5, [pc, #220]	; (5f68 <__aeabi_dadd+0x3b8>)
    5e8a:	42a8      	cmp	r0, r5
    5e8c:	d100      	bne.n	5e90 <__aeabi_dadd+0x2e0>
    5e8e:	e0f3      	b.n	6078 <__aeabi_dadd+0x4c8>
    5e90:	465d      	mov	r5, fp
    5e92:	192a      	adds	r2, r5, r4
    5e94:	42a2      	cmp	r2, r4
    5e96:	41a4      	sbcs	r4, r4
    5e98:	4264      	negs	r4, r4
    5e9a:	1859      	adds	r1, r3, r1
    5e9c:	1909      	adds	r1, r1, r4
    5e9e:	07cc      	lsls	r4, r1, #31
    5ea0:	0852      	lsrs	r2, r2, #1
    5ea2:	4314      	orrs	r4, r2
    5ea4:	0849      	lsrs	r1, r1, #1
    5ea6:	1c05      	adds	r5, r0, #0
    5ea8:	e6ab      	b.n	5c02 <__aeabi_dadd+0x52>
    5eaa:	482f      	ldr	r0, [pc, #188]	; (5f68 <__aeabi_dadd+0x3b8>)
    5eac:	4285      	cmp	r5, r0
    5eae:	d000      	beq.n	5eb2 <__aeabi_dadd+0x302>
    5eb0:	e6e6      	b.n	5c80 <__aeabi_dadd+0xd0>
    5eb2:	e6a6      	b.n	5c02 <__aeabi_dadd+0x52>
    5eb4:	1c2b      	adds	r3, r5, #0
    5eb6:	3b1f      	subs	r3, #31
    5eb8:	1c3a      	adds	r2, r7, #0
    5eba:	40da      	lsrs	r2, r3
    5ebc:	1c13      	adds	r3, r2, #0
    5ebe:	2920      	cmp	r1, #32
    5ec0:	d06c      	beq.n	5f9c <__aeabi_dadd+0x3ec>
    5ec2:	223f      	movs	r2, #63	; 0x3f
    5ec4:	1b55      	subs	r5, r2, r5
    5ec6:	40af      	lsls	r7, r5
    5ec8:	433c      	orrs	r4, r7
    5eca:	1e60      	subs	r0, r4, #1
    5ecc:	4184      	sbcs	r4, r0
    5ece:	431c      	orrs	r4, r3
    5ed0:	2100      	movs	r1, #0
    5ed2:	2500      	movs	r5, #0
    5ed4:	e695      	b.n	5c02 <__aeabi_dadd+0x52>
    5ed6:	1c38      	adds	r0, r7, #0
    5ed8:	3820      	subs	r0, #32
    5eda:	1c1a      	adds	r2, r3, #0
    5edc:	40c2      	lsrs	r2, r0
    5ede:	1c10      	adds	r0, r2, #0
    5ee0:	2f20      	cmp	r7, #32
    5ee2:	d05d      	beq.n	5fa0 <__aeabi_dadd+0x3f0>
    5ee4:	2240      	movs	r2, #64	; 0x40
    5ee6:	1bd7      	subs	r7, r2, r7
    5ee8:	40bb      	lsls	r3, r7
    5eea:	465a      	mov	r2, fp
    5eec:	431a      	orrs	r2, r3
    5eee:	1e53      	subs	r3, r2, #1
    5ef0:	419a      	sbcs	r2, r3
    5ef2:	4302      	orrs	r2, r0
    5ef4:	2700      	movs	r7, #0
    5ef6:	e6db      	b.n	5cb0 <__aeabi_dadd+0x100>
    5ef8:	2d00      	cmp	r5, #0
    5efa:	d03b      	beq.n	5f74 <__aeabi_dadd+0x3c4>
    5efc:	4d1a      	ldr	r5, [pc, #104]	; (5f68 <__aeabi_dadd+0x3b8>)
    5efe:	45aa      	cmp	sl, r5
    5f00:	d100      	bne.n	5f04 <__aeabi_dadd+0x354>
    5f02:	e093      	b.n	602c <__aeabi_dadd+0x47c>
    5f04:	2580      	movs	r5, #128	; 0x80
    5f06:	042d      	lsls	r5, r5, #16
    5f08:	427f      	negs	r7, r7
    5f0a:	4329      	orrs	r1, r5
    5f0c:	2f38      	cmp	r7, #56	; 0x38
    5f0e:	dd00      	ble.n	5f12 <__aeabi_dadd+0x362>
    5f10:	e0ac      	b.n	606c <__aeabi_dadd+0x4bc>
    5f12:	2f1f      	cmp	r7, #31
    5f14:	dd00      	ble.n	5f18 <__aeabi_dadd+0x368>
    5f16:	e129      	b.n	616c <__aeabi_dadd+0x5bc>
    5f18:	2520      	movs	r5, #32
    5f1a:	1bed      	subs	r5, r5, r7
    5f1c:	1c08      	adds	r0, r1, #0
    5f1e:	1c26      	adds	r6, r4, #0
    5f20:	40a8      	lsls	r0, r5
    5f22:	40fe      	lsrs	r6, r7
    5f24:	40ac      	lsls	r4, r5
    5f26:	4306      	orrs	r6, r0
    5f28:	1e65      	subs	r5, r4, #1
    5f2a:	41ac      	sbcs	r4, r5
    5f2c:	4334      	orrs	r4, r6
    5f2e:	40f9      	lsrs	r1, r7
    5f30:	465d      	mov	r5, fp
    5f32:	1b2c      	subs	r4, r5, r4
    5f34:	45a3      	cmp	fp, r4
    5f36:	4192      	sbcs	r2, r2
    5f38:	1a5b      	subs	r3, r3, r1
    5f3a:	4252      	negs	r2, r2
    5f3c:	1a99      	subs	r1, r3, r2
    5f3e:	4655      	mov	r5, sl
    5f40:	4666      	mov	r6, ip
    5f42:	e6bc      	b.n	5cbe <__aeabi_dadd+0x10e>
    5f44:	1c13      	adds	r3, r2, #0
    5f46:	433b      	orrs	r3, r7
    5f48:	1c14      	adds	r4, r2, #0
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d000      	beq.n	5f50 <__aeabi_dadd+0x3a0>
    5f4e:	e6ba      	b.n	5cc6 <__aeabi_dadd+0x116>
    5f50:	2700      	movs	r7, #0
    5f52:	2100      	movs	r1, #0
    5f54:	2500      	movs	r5, #0
    5f56:	2400      	movs	r4, #0
    5f58:	e6e5      	b.n	5d26 <__aeabi_dadd+0x176>
    5f5a:	465a      	mov	r2, fp
    5f5c:	431a      	orrs	r2, r3
    5f5e:	1e53      	subs	r3, r2, #1
    5f60:	419a      	sbcs	r2, r3
    5f62:	b2d2      	uxtb	r2, r2
    5f64:	2300      	movs	r3, #0
    5f66:	e714      	b.n	5d92 <__aeabi_dadd+0x1e2>
    5f68:	000007ff 	.word	0x000007ff
    5f6c:	ff7fffff 	.word	0xff7fffff
    5f70:	800fffff 	.word	0x800fffff
    5f74:	1c0d      	adds	r5, r1, #0
    5f76:	4325      	orrs	r5, r4
    5f78:	d058      	beq.n	602c <__aeabi_dadd+0x47c>
    5f7a:	43ff      	mvns	r7, r7
    5f7c:	2f00      	cmp	r7, #0
    5f7e:	d151      	bne.n	6024 <__aeabi_dadd+0x474>
    5f80:	1b04      	subs	r4, r0, r4
    5f82:	45a3      	cmp	fp, r4
    5f84:	4192      	sbcs	r2, r2
    5f86:	1a59      	subs	r1, r3, r1
    5f88:	4252      	negs	r2, r2
    5f8a:	1a89      	subs	r1, r1, r2
    5f8c:	4655      	mov	r5, sl
    5f8e:	4666      	mov	r6, ip
    5f90:	e695      	b.n	5cbe <__aeabi_dadd+0x10e>
    5f92:	4896      	ldr	r0, [pc, #600]	; (61ec <__aeabi_dadd+0x63c>)
    5f94:	4285      	cmp	r5, r0
    5f96:	d000      	beq.n	5f9a <__aeabi_dadd+0x3ea>
    5f98:	e6de      	b.n	5d58 <__aeabi_dadd+0x1a8>
    5f9a:	e632      	b.n	5c02 <__aeabi_dadd+0x52>
    5f9c:	2700      	movs	r7, #0
    5f9e:	e793      	b.n	5ec8 <__aeabi_dadd+0x318>
    5fa0:	2300      	movs	r3, #0
    5fa2:	e7a2      	b.n	5eea <__aeabi_dadd+0x33a>
    5fa4:	1c08      	adds	r0, r1, #0
    5fa6:	4320      	orrs	r0, r4
    5fa8:	2d00      	cmp	r5, #0
    5faa:	d000      	beq.n	5fae <__aeabi_dadd+0x3fe>
    5fac:	e0c4      	b.n	6138 <__aeabi_dadd+0x588>
    5fae:	2800      	cmp	r0, #0
    5fb0:	d100      	bne.n	5fb4 <__aeabi_dadd+0x404>
    5fb2:	e0f7      	b.n	61a4 <__aeabi_dadd+0x5f4>
    5fb4:	4658      	mov	r0, fp
    5fb6:	4318      	orrs	r0, r3
    5fb8:	d100      	bne.n	5fbc <__aeabi_dadd+0x40c>
    5fba:	e622      	b.n	5c02 <__aeabi_dadd+0x52>
    5fbc:	4658      	mov	r0, fp
    5fbe:	1902      	adds	r2, r0, r4
    5fc0:	42a2      	cmp	r2, r4
    5fc2:	41a4      	sbcs	r4, r4
    5fc4:	4264      	negs	r4, r4
    5fc6:	1859      	adds	r1, r3, r1
    5fc8:	1909      	adds	r1, r1, r4
    5fca:	1c14      	adds	r4, r2, #0
    5fcc:	020a      	lsls	r2, r1, #8
    5fce:	d400      	bmi.n	5fd2 <__aeabi_dadd+0x422>
    5fd0:	e617      	b.n	5c02 <__aeabi_dadd+0x52>
    5fd2:	4b87      	ldr	r3, [pc, #540]	; (61f0 <__aeabi_dadd+0x640>)
    5fd4:	2501      	movs	r5, #1
    5fd6:	4019      	ands	r1, r3
    5fd8:	e613      	b.n	5c02 <__aeabi_dadd+0x52>
    5fda:	1c08      	adds	r0, r1, #0
    5fdc:	4320      	orrs	r0, r4
    5fde:	2d00      	cmp	r5, #0
    5fe0:	d139      	bne.n	6056 <__aeabi_dadd+0x4a6>
    5fe2:	2800      	cmp	r0, #0
    5fe4:	d171      	bne.n	60ca <__aeabi_dadd+0x51a>
    5fe6:	4659      	mov	r1, fp
    5fe8:	4319      	orrs	r1, r3
    5fea:	d003      	beq.n	5ff4 <__aeabi_dadd+0x444>
    5fec:	1c19      	adds	r1, r3, #0
    5fee:	465c      	mov	r4, fp
    5ff0:	4666      	mov	r6, ip
    5ff2:	e606      	b.n	5c02 <__aeabi_dadd+0x52>
    5ff4:	2700      	movs	r7, #0
    5ff6:	2100      	movs	r1, #0
    5ff8:	2400      	movs	r4, #0
    5ffa:	e694      	b.n	5d26 <__aeabi_dadd+0x176>
    5ffc:	4660      	mov	r0, ip
    5ffe:	3820      	subs	r0, #32
    6000:	1c1a      	adds	r2, r3, #0
    6002:	40c2      	lsrs	r2, r0
    6004:	4660      	mov	r0, ip
    6006:	4691      	mov	r9, r2
    6008:	2820      	cmp	r0, #32
    600a:	d100      	bne.n	600e <__aeabi_dadd+0x45e>
    600c:	e0ac      	b.n	6168 <__aeabi_dadd+0x5b8>
    600e:	2240      	movs	r2, #64	; 0x40
    6010:	1a12      	subs	r2, r2, r0
    6012:	4093      	lsls	r3, r2
    6014:	465a      	mov	r2, fp
    6016:	431a      	orrs	r2, r3
    6018:	1e53      	subs	r3, r2, #1
    601a:	419a      	sbcs	r2, r3
    601c:	464b      	mov	r3, r9
    601e:	431a      	orrs	r2, r3
    6020:	2300      	movs	r3, #0
    6022:	e6b6      	b.n	5d92 <__aeabi_dadd+0x1e2>
    6024:	4d71      	ldr	r5, [pc, #452]	; (61ec <__aeabi_dadd+0x63c>)
    6026:	45aa      	cmp	sl, r5
    6028:	d000      	beq.n	602c <__aeabi_dadd+0x47c>
    602a:	e76f      	b.n	5f0c <__aeabi_dadd+0x35c>
    602c:	1c19      	adds	r1, r3, #0
    602e:	465c      	mov	r4, fp
    6030:	4655      	mov	r5, sl
    6032:	4666      	mov	r6, ip
    6034:	e5e5      	b.n	5c02 <__aeabi_dadd+0x52>
    6036:	2d00      	cmp	r5, #0
    6038:	d122      	bne.n	6080 <__aeabi_dadd+0x4d0>
    603a:	1c0d      	adds	r5, r1, #0
    603c:	4325      	orrs	r5, r4
    603e:	d077      	beq.n	6130 <__aeabi_dadd+0x580>
    6040:	43d5      	mvns	r5, r2
    6042:	2d00      	cmp	r5, #0
    6044:	d171      	bne.n	612a <__aeabi_dadd+0x57a>
    6046:	445c      	add	r4, fp
    6048:	455c      	cmp	r4, fp
    604a:	4192      	sbcs	r2, r2
    604c:	1859      	adds	r1, r3, r1
    604e:	4252      	negs	r2, r2
    6050:	1889      	adds	r1, r1, r2
    6052:	4655      	mov	r5, sl
    6054:	e6a4      	b.n	5da0 <__aeabi_dadd+0x1f0>
    6056:	2800      	cmp	r0, #0
    6058:	d14d      	bne.n	60f6 <__aeabi_dadd+0x546>
    605a:	4659      	mov	r1, fp
    605c:	4319      	orrs	r1, r3
    605e:	d100      	bne.n	6062 <__aeabi_dadd+0x4b2>
    6060:	e094      	b.n	618c <__aeabi_dadd+0x5dc>
    6062:	1c19      	adds	r1, r3, #0
    6064:	465c      	mov	r4, fp
    6066:	4666      	mov	r6, ip
    6068:	4d60      	ldr	r5, [pc, #384]	; (61ec <__aeabi_dadd+0x63c>)
    606a:	e5ca      	b.n	5c02 <__aeabi_dadd+0x52>
    606c:	430c      	orrs	r4, r1
    606e:	1e61      	subs	r1, r4, #1
    6070:	418c      	sbcs	r4, r1
    6072:	b2e4      	uxtb	r4, r4
    6074:	2100      	movs	r1, #0
    6076:	e75b      	b.n	5f30 <__aeabi_dadd+0x380>
    6078:	1c05      	adds	r5, r0, #0
    607a:	2100      	movs	r1, #0
    607c:	2400      	movs	r4, #0
    607e:	e652      	b.n	5d26 <__aeabi_dadd+0x176>
    6080:	4d5a      	ldr	r5, [pc, #360]	; (61ec <__aeabi_dadd+0x63c>)
    6082:	45aa      	cmp	sl, r5
    6084:	d054      	beq.n	6130 <__aeabi_dadd+0x580>
    6086:	4255      	negs	r5, r2
    6088:	2280      	movs	r2, #128	; 0x80
    608a:	0410      	lsls	r0, r2, #16
    608c:	4301      	orrs	r1, r0
    608e:	2d38      	cmp	r5, #56	; 0x38
    6090:	dd00      	ble.n	6094 <__aeabi_dadd+0x4e4>
    6092:	e081      	b.n	6198 <__aeabi_dadd+0x5e8>
    6094:	2d1f      	cmp	r5, #31
    6096:	dd00      	ble.n	609a <__aeabi_dadd+0x4ea>
    6098:	e092      	b.n	61c0 <__aeabi_dadd+0x610>
    609a:	2220      	movs	r2, #32
    609c:	1b50      	subs	r0, r2, r5
    609e:	1c0a      	adds	r2, r1, #0
    60a0:	4684      	mov	ip, r0
    60a2:	4082      	lsls	r2, r0
    60a4:	1c20      	adds	r0, r4, #0
    60a6:	40e8      	lsrs	r0, r5
    60a8:	4302      	orrs	r2, r0
    60aa:	4690      	mov	r8, r2
    60ac:	4662      	mov	r2, ip
    60ae:	4094      	lsls	r4, r2
    60b0:	1e60      	subs	r0, r4, #1
    60b2:	4184      	sbcs	r4, r0
    60b4:	4642      	mov	r2, r8
    60b6:	4314      	orrs	r4, r2
    60b8:	40e9      	lsrs	r1, r5
    60ba:	445c      	add	r4, fp
    60bc:	455c      	cmp	r4, fp
    60be:	4192      	sbcs	r2, r2
    60c0:	18cb      	adds	r3, r1, r3
    60c2:	4252      	negs	r2, r2
    60c4:	1899      	adds	r1, r3, r2
    60c6:	4655      	mov	r5, sl
    60c8:	e66a      	b.n	5da0 <__aeabi_dadd+0x1f0>
    60ca:	4658      	mov	r0, fp
    60cc:	4318      	orrs	r0, r3
    60ce:	d100      	bne.n	60d2 <__aeabi_dadd+0x522>
    60d0:	e597      	b.n	5c02 <__aeabi_dadd+0x52>
    60d2:	4658      	mov	r0, fp
    60d4:	1a27      	subs	r7, r4, r0
    60d6:	42bc      	cmp	r4, r7
    60d8:	4192      	sbcs	r2, r2
    60da:	1ac8      	subs	r0, r1, r3
    60dc:	4252      	negs	r2, r2
    60de:	1a80      	subs	r0, r0, r2
    60e0:	0202      	lsls	r2, r0, #8
    60e2:	d566      	bpl.n	61b2 <__aeabi_dadd+0x602>
    60e4:	4658      	mov	r0, fp
    60e6:	1b04      	subs	r4, r0, r4
    60e8:	45a3      	cmp	fp, r4
    60ea:	4192      	sbcs	r2, r2
    60ec:	1a59      	subs	r1, r3, r1
    60ee:	4252      	negs	r2, r2
    60f0:	1a89      	subs	r1, r1, r2
    60f2:	4666      	mov	r6, ip
    60f4:	e585      	b.n	5c02 <__aeabi_dadd+0x52>
    60f6:	4658      	mov	r0, fp
    60f8:	4318      	orrs	r0, r3
    60fa:	d033      	beq.n	6164 <__aeabi_dadd+0x5b4>
    60fc:	0748      	lsls	r0, r1, #29
    60fe:	08e4      	lsrs	r4, r4, #3
    6100:	4304      	orrs	r4, r0
    6102:	2080      	movs	r0, #128	; 0x80
    6104:	08c9      	lsrs	r1, r1, #3
    6106:	0300      	lsls	r0, r0, #12
    6108:	4201      	tst	r1, r0
    610a:	d008      	beq.n	611e <__aeabi_dadd+0x56e>
    610c:	08dd      	lsrs	r5, r3, #3
    610e:	4205      	tst	r5, r0
    6110:	d105      	bne.n	611e <__aeabi_dadd+0x56e>
    6112:	4659      	mov	r1, fp
    6114:	08ca      	lsrs	r2, r1, #3
    6116:	075c      	lsls	r4, r3, #29
    6118:	4314      	orrs	r4, r2
    611a:	1c29      	adds	r1, r5, #0
    611c:	4666      	mov	r6, ip
    611e:	0f63      	lsrs	r3, r4, #29
    6120:	00c9      	lsls	r1, r1, #3
    6122:	4319      	orrs	r1, r3
    6124:	00e4      	lsls	r4, r4, #3
    6126:	4d31      	ldr	r5, [pc, #196]	; (61ec <__aeabi_dadd+0x63c>)
    6128:	e56b      	b.n	5c02 <__aeabi_dadd+0x52>
    612a:	4a30      	ldr	r2, [pc, #192]	; (61ec <__aeabi_dadd+0x63c>)
    612c:	4592      	cmp	sl, r2
    612e:	d1ae      	bne.n	608e <__aeabi_dadd+0x4de>
    6130:	1c19      	adds	r1, r3, #0
    6132:	465c      	mov	r4, fp
    6134:	4655      	mov	r5, sl
    6136:	e564      	b.n	5c02 <__aeabi_dadd+0x52>
    6138:	2800      	cmp	r0, #0
    613a:	d036      	beq.n	61aa <__aeabi_dadd+0x5fa>
    613c:	4658      	mov	r0, fp
    613e:	4318      	orrs	r0, r3
    6140:	d010      	beq.n	6164 <__aeabi_dadd+0x5b4>
    6142:	2580      	movs	r5, #128	; 0x80
    6144:	0748      	lsls	r0, r1, #29
    6146:	08e4      	lsrs	r4, r4, #3
    6148:	08c9      	lsrs	r1, r1, #3
    614a:	032d      	lsls	r5, r5, #12
    614c:	4304      	orrs	r4, r0
    614e:	4229      	tst	r1, r5
    6150:	d0e5      	beq.n	611e <__aeabi_dadd+0x56e>
    6152:	08d8      	lsrs	r0, r3, #3
    6154:	4228      	tst	r0, r5
    6156:	d1e2      	bne.n	611e <__aeabi_dadd+0x56e>
    6158:	465d      	mov	r5, fp
    615a:	08ea      	lsrs	r2, r5, #3
    615c:	075c      	lsls	r4, r3, #29
    615e:	4314      	orrs	r4, r2
    6160:	1c01      	adds	r1, r0, #0
    6162:	e7dc      	b.n	611e <__aeabi_dadd+0x56e>
    6164:	4d21      	ldr	r5, [pc, #132]	; (61ec <__aeabi_dadd+0x63c>)
    6166:	e54c      	b.n	5c02 <__aeabi_dadd+0x52>
    6168:	2300      	movs	r3, #0
    616a:	e753      	b.n	6014 <__aeabi_dadd+0x464>
    616c:	1c3d      	adds	r5, r7, #0
    616e:	3d20      	subs	r5, #32
    6170:	1c0a      	adds	r2, r1, #0
    6172:	40ea      	lsrs	r2, r5
    6174:	1c15      	adds	r5, r2, #0
    6176:	2f20      	cmp	r7, #32
    6178:	d034      	beq.n	61e4 <__aeabi_dadd+0x634>
    617a:	2640      	movs	r6, #64	; 0x40
    617c:	1bf7      	subs	r7, r6, r7
    617e:	40b9      	lsls	r1, r7
    6180:	430c      	orrs	r4, r1
    6182:	1e61      	subs	r1, r4, #1
    6184:	418c      	sbcs	r4, r1
    6186:	432c      	orrs	r4, r5
    6188:	2100      	movs	r1, #0
    618a:	e6d1      	b.n	5f30 <__aeabi_dadd+0x380>
    618c:	2180      	movs	r1, #128	; 0x80
    618e:	2700      	movs	r7, #0
    6190:	03c9      	lsls	r1, r1, #15
    6192:	4d16      	ldr	r5, [pc, #88]	; (61ec <__aeabi_dadd+0x63c>)
    6194:	2400      	movs	r4, #0
    6196:	e5c6      	b.n	5d26 <__aeabi_dadd+0x176>
    6198:	430c      	orrs	r4, r1
    619a:	1e61      	subs	r1, r4, #1
    619c:	418c      	sbcs	r4, r1
    619e:	b2e4      	uxtb	r4, r4
    61a0:	2100      	movs	r1, #0
    61a2:	e78a      	b.n	60ba <__aeabi_dadd+0x50a>
    61a4:	1c19      	adds	r1, r3, #0
    61a6:	465c      	mov	r4, fp
    61a8:	e52b      	b.n	5c02 <__aeabi_dadd+0x52>
    61aa:	1c19      	adds	r1, r3, #0
    61ac:	465c      	mov	r4, fp
    61ae:	4d0f      	ldr	r5, [pc, #60]	; (61ec <__aeabi_dadd+0x63c>)
    61b0:	e527      	b.n	5c02 <__aeabi_dadd+0x52>
    61b2:	1c03      	adds	r3, r0, #0
    61b4:	433b      	orrs	r3, r7
    61b6:	d100      	bne.n	61ba <__aeabi_dadd+0x60a>
    61b8:	e71c      	b.n	5ff4 <__aeabi_dadd+0x444>
    61ba:	1c01      	adds	r1, r0, #0
    61bc:	1c3c      	adds	r4, r7, #0
    61be:	e520      	b.n	5c02 <__aeabi_dadd+0x52>
    61c0:	2020      	movs	r0, #32
    61c2:	4240      	negs	r0, r0
    61c4:	1940      	adds	r0, r0, r5
    61c6:	1c0a      	adds	r2, r1, #0
    61c8:	40c2      	lsrs	r2, r0
    61ca:	4690      	mov	r8, r2
    61cc:	2d20      	cmp	r5, #32
    61ce:	d00b      	beq.n	61e8 <__aeabi_dadd+0x638>
    61d0:	2040      	movs	r0, #64	; 0x40
    61d2:	1b45      	subs	r5, r0, r5
    61d4:	40a9      	lsls	r1, r5
    61d6:	430c      	orrs	r4, r1
    61d8:	1e61      	subs	r1, r4, #1
    61da:	418c      	sbcs	r4, r1
    61dc:	4645      	mov	r5, r8
    61de:	432c      	orrs	r4, r5
    61e0:	2100      	movs	r1, #0
    61e2:	e76a      	b.n	60ba <__aeabi_dadd+0x50a>
    61e4:	2100      	movs	r1, #0
    61e6:	e7cb      	b.n	6180 <__aeabi_dadd+0x5d0>
    61e8:	2100      	movs	r1, #0
    61ea:	e7f4      	b.n	61d6 <__aeabi_dadd+0x626>
    61ec:	000007ff 	.word	0x000007ff
    61f0:	ff7fffff 	.word	0xff7fffff

000061f4 <__aeabi_dmul>:
    61f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61f6:	4656      	mov	r6, sl
    61f8:	4644      	mov	r4, r8
    61fa:	465f      	mov	r7, fp
    61fc:	464d      	mov	r5, r9
    61fe:	b4f0      	push	{r4, r5, r6, r7}
    6200:	1c1f      	adds	r7, r3, #0
    6202:	030b      	lsls	r3, r1, #12
    6204:	0b1b      	lsrs	r3, r3, #12
    6206:	469a      	mov	sl, r3
    6208:	004b      	lsls	r3, r1, #1
    620a:	b087      	sub	sp, #28
    620c:	1c04      	adds	r4, r0, #0
    620e:	4680      	mov	r8, r0
    6210:	0d5b      	lsrs	r3, r3, #21
    6212:	0fc8      	lsrs	r0, r1, #31
    6214:	1c16      	adds	r6, r2, #0
    6216:	9302      	str	r3, [sp, #8]
    6218:	4681      	mov	r9, r0
    621a:	2b00      	cmp	r3, #0
    621c:	d068      	beq.n	62f0 <__aeabi_dmul+0xfc>
    621e:	4b69      	ldr	r3, [pc, #420]	; (63c4 <__aeabi_dmul+0x1d0>)
    6220:	9902      	ldr	r1, [sp, #8]
    6222:	4299      	cmp	r1, r3
    6224:	d032      	beq.n	628c <__aeabi_dmul+0x98>
    6226:	2280      	movs	r2, #128	; 0x80
    6228:	4653      	mov	r3, sl
    622a:	0352      	lsls	r2, r2, #13
    622c:	431a      	orrs	r2, r3
    622e:	00d2      	lsls	r2, r2, #3
    6230:	0f63      	lsrs	r3, r4, #29
    6232:	431a      	orrs	r2, r3
    6234:	4692      	mov	sl, r2
    6236:	4a64      	ldr	r2, [pc, #400]	; (63c8 <__aeabi_dmul+0x1d4>)
    6238:	00e0      	lsls	r0, r4, #3
    623a:	1889      	adds	r1, r1, r2
    623c:	4680      	mov	r8, r0
    623e:	9102      	str	r1, [sp, #8]
    6240:	2400      	movs	r4, #0
    6242:	2500      	movs	r5, #0
    6244:	033b      	lsls	r3, r7, #12
    6246:	0b1b      	lsrs	r3, r3, #12
    6248:	469b      	mov	fp, r3
    624a:	0078      	lsls	r0, r7, #1
    624c:	0ffb      	lsrs	r3, r7, #31
    624e:	1c32      	adds	r2, r6, #0
    6250:	0d40      	lsrs	r0, r0, #21
    6252:	9303      	str	r3, [sp, #12]
    6254:	d100      	bne.n	6258 <__aeabi_dmul+0x64>
    6256:	e075      	b.n	6344 <__aeabi_dmul+0x150>
    6258:	4b5a      	ldr	r3, [pc, #360]	; (63c4 <__aeabi_dmul+0x1d0>)
    625a:	4298      	cmp	r0, r3
    625c:	d069      	beq.n	6332 <__aeabi_dmul+0x13e>
    625e:	2280      	movs	r2, #128	; 0x80
    6260:	4659      	mov	r1, fp
    6262:	0352      	lsls	r2, r2, #13
    6264:	430a      	orrs	r2, r1
    6266:	0f73      	lsrs	r3, r6, #29
    6268:	00d2      	lsls	r2, r2, #3
    626a:	431a      	orrs	r2, r3
    626c:	4b56      	ldr	r3, [pc, #344]	; (63c8 <__aeabi_dmul+0x1d4>)
    626e:	4693      	mov	fp, r2
    6270:	18c0      	adds	r0, r0, r3
    6272:	00f2      	lsls	r2, r6, #3
    6274:	2300      	movs	r3, #0
    6276:	9903      	ldr	r1, [sp, #12]
    6278:	464e      	mov	r6, r9
    627a:	4071      	eors	r1, r6
    627c:	431c      	orrs	r4, r3
    627e:	2c0f      	cmp	r4, #15
    6280:	d900      	bls.n	6284 <__aeabi_dmul+0x90>
    6282:	e0a9      	b.n	63d8 <__aeabi_dmul+0x1e4>
    6284:	4e51      	ldr	r6, [pc, #324]	; (63cc <__aeabi_dmul+0x1d8>)
    6286:	00a4      	lsls	r4, r4, #2
    6288:	5934      	ldr	r4, [r6, r4]
    628a:	46a7      	mov	pc, r4
    628c:	4653      	mov	r3, sl
    628e:	431c      	orrs	r4, r3
    6290:	d000      	beq.n	6294 <__aeabi_dmul+0xa0>
    6292:	e087      	b.n	63a4 <__aeabi_dmul+0x1b0>
    6294:	2500      	movs	r5, #0
    6296:	46aa      	mov	sl, r5
    6298:	46a8      	mov	r8, r5
    629a:	2408      	movs	r4, #8
    629c:	2502      	movs	r5, #2
    629e:	e7d1      	b.n	6244 <__aeabi_dmul+0x50>
    62a0:	4649      	mov	r1, r9
    62a2:	2d02      	cmp	r5, #2
    62a4:	d06c      	beq.n	6380 <__aeabi_dmul+0x18c>
    62a6:	2d03      	cmp	r5, #3
    62a8:	d100      	bne.n	62ac <__aeabi_dmul+0xb8>
    62aa:	e217      	b.n	66dc <__aeabi_dmul+0x4e8>
    62ac:	2d01      	cmp	r5, #1
    62ae:	d000      	beq.n	62b2 <__aeabi_dmul+0xbe>
    62b0:	e158      	b.n	6564 <__aeabi_dmul+0x370>
    62b2:	400d      	ands	r5, r1
    62b4:	b2ed      	uxtb	r5, r5
    62b6:	2400      	movs	r4, #0
    62b8:	46a9      	mov	r9, r5
    62ba:	2300      	movs	r3, #0
    62bc:	46a0      	mov	r8, r4
    62be:	2000      	movs	r0, #0
    62c0:	2100      	movs	r1, #0
    62c2:	0325      	lsls	r5, r4, #12
    62c4:	0d0a      	lsrs	r2, r1, #20
    62c6:	051c      	lsls	r4, r3, #20
    62c8:	0b2d      	lsrs	r5, r5, #12
    62ca:	0512      	lsls	r2, r2, #20
    62cc:	4b40      	ldr	r3, [pc, #256]	; (63d0 <__aeabi_dmul+0x1dc>)
    62ce:	432a      	orrs	r2, r5
    62d0:	4013      	ands	r3, r2
    62d2:	4323      	orrs	r3, r4
    62d4:	005b      	lsls	r3, r3, #1
    62d6:	464c      	mov	r4, r9
    62d8:	085b      	lsrs	r3, r3, #1
    62da:	07e2      	lsls	r2, r4, #31
    62dc:	1c19      	adds	r1, r3, #0
    62de:	4640      	mov	r0, r8
    62e0:	4311      	orrs	r1, r2
    62e2:	b007      	add	sp, #28
    62e4:	bc3c      	pop	{r2, r3, r4, r5}
    62e6:	4690      	mov	r8, r2
    62e8:	4699      	mov	r9, r3
    62ea:	46a2      	mov	sl, r4
    62ec:	46ab      	mov	fp, r5
    62ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62f0:	4653      	mov	r3, sl
    62f2:	4323      	orrs	r3, r4
    62f4:	d050      	beq.n	6398 <__aeabi_dmul+0x1a4>
    62f6:	4653      	mov	r3, sl
    62f8:	2b00      	cmp	r3, #0
    62fa:	d100      	bne.n	62fe <__aeabi_dmul+0x10a>
    62fc:	e184      	b.n	6608 <__aeabi_dmul+0x414>
    62fe:	4650      	mov	r0, sl
    6300:	f000 fdec 	bl	6edc <__clzsi2>
    6304:	1e03      	subs	r3, r0, #0
    6306:	2b27      	cmp	r3, #39	; 0x27
    6308:	dd00      	ble.n	630c <__aeabi_dmul+0x118>
    630a:	e176      	b.n	65fa <__aeabi_dmul+0x406>
    630c:	2128      	movs	r1, #40	; 0x28
    630e:	1a0d      	subs	r5, r1, r0
    6310:	1c21      	adds	r1, r4, #0
    6312:	3b08      	subs	r3, #8
    6314:	4652      	mov	r2, sl
    6316:	40e9      	lsrs	r1, r5
    6318:	409a      	lsls	r2, r3
    631a:	1c0d      	adds	r5, r1, #0
    631c:	4315      	orrs	r5, r2
    631e:	1c22      	adds	r2, r4, #0
    6320:	409a      	lsls	r2, r3
    6322:	46aa      	mov	sl, r5
    6324:	4690      	mov	r8, r2
    6326:	4b2b      	ldr	r3, [pc, #172]	; (63d4 <__aeabi_dmul+0x1e0>)
    6328:	2400      	movs	r4, #0
    632a:	1a1b      	subs	r3, r3, r0
    632c:	9302      	str	r3, [sp, #8]
    632e:	2500      	movs	r5, #0
    6330:	e788      	b.n	6244 <__aeabi_dmul+0x50>
    6332:	465b      	mov	r3, fp
    6334:	431e      	orrs	r6, r3
    6336:	2303      	movs	r3, #3
    6338:	2e00      	cmp	r6, #0
    633a:	d19c      	bne.n	6276 <__aeabi_dmul+0x82>
    633c:	46b3      	mov	fp, r6
    633e:	2200      	movs	r2, #0
    6340:	2302      	movs	r3, #2
    6342:	e798      	b.n	6276 <__aeabi_dmul+0x82>
    6344:	465b      	mov	r3, fp
    6346:	4333      	orrs	r3, r6
    6348:	d021      	beq.n	638e <__aeabi_dmul+0x19a>
    634a:	4658      	mov	r0, fp
    634c:	2800      	cmp	r0, #0
    634e:	d100      	bne.n	6352 <__aeabi_dmul+0x15e>
    6350:	e14e      	b.n	65f0 <__aeabi_dmul+0x3fc>
    6352:	f000 fdc3 	bl	6edc <__clzsi2>
    6356:	2827      	cmp	r0, #39	; 0x27
    6358:	dd00      	ble.n	635c <__aeabi_dmul+0x168>
    635a:	e142      	b.n	65e2 <__aeabi_dmul+0x3ee>
    635c:	2128      	movs	r1, #40	; 0x28
    635e:	1a0f      	subs	r7, r1, r0
    6360:	1c02      	adds	r2, r0, #0
    6362:	1c31      	adds	r1, r6, #0
    6364:	3a08      	subs	r2, #8
    6366:	465b      	mov	r3, fp
    6368:	40f9      	lsrs	r1, r7
    636a:	4093      	lsls	r3, r2
    636c:	1c0f      	adds	r7, r1, #0
    636e:	431f      	orrs	r7, r3
    6370:	1c33      	adds	r3, r6, #0
    6372:	4093      	lsls	r3, r2
    6374:	46bb      	mov	fp, r7
    6376:	1c1a      	adds	r2, r3, #0
    6378:	4b16      	ldr	r3, [pc, #88]	; (63d4 <__aeabi_dmul+0x1e0>)
    637a:	1a18      	subs	r0, r3, r0
    637c:	2300      	movs	r3, #0
    637e:	e77a      	b.n	6276 <__aeabi_dmul+0x82>
    6380:	2301      	movs	r3, #1
    6382:	400b      	ands	r3, r1
    6384:	2400      	movs	r4, #0
    6386:	4699      	mov	r9, r3
    6388:	46a0      	mov	r8, r4
    638a:	4b0e      	ldr	r3, [pc, #56]	; (63c4 <__aeabi_dmul+0x1d0>)
    638c:	e797      	b.n	62be <__aeabi_dmul+0xca>
    638e:	2700      	movs	r7, #0
    6390:	46bb      	mov	fp, r7
    6392:	2200      	movs	r2, #0
    6394:	2301      	movs	r3, #1
    6396:	e76e      	b.n	6276 <__aeabi_dmul+0x82>
    6398:	2100      	movs	r1, #0
    639a:	2404      	movs	r4, #4
    639c:	468a      	mov	sl, r1
    639e:	4688      	mov	r8, r1
    63a0:	2501      	movs	r5, #1
    63a2:	e74f      	b.n	6244 <__aeabi_dmul+0x50>
    63a4:	240c      	movs	r4, #12
    63a6:	2503      	movs	r5, #3
    63a8:	e74c      	b.n	6244 <__aeabi_dmul+0x50>
    63aa:	2500      	movs	r5, #0
    63ac:	2480      	movs	r4, #128	; 0x80
    63ae:	46a9      	mov	r9, r5
    63b0:	0324      	lsls	r4, r4, #12
    63b2:	46a8      	mov	r8, r5
    63b4:	4b03      	ldr	r3, [pc, #12]	; (63c4 <__aeabi_dmul+0x1d0>)
    63b6:	e782      	b.n	62be <__aeabi_dmul+0xca>
    63b8:	46da      	mov	sl, fp
    63ba:	4690      	mov	r8, r2
    63bc:	9903      	ldr	r1, [sp, #12]
    63be:	1c1d      	adds	r5, r3, #0
    63c0:	e76f      	b.n	62a2 <__aeabi_dmul+0xae>
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	000007ff 	.word	0x000007ff
    63c8:	fffffc01 	.word	0xfffffc01
    63cc:	00009308 	.word	0x00009308
    63d0:	800fffff 	.word	0x800fffff
    63d4:	fffffc0d 	.word	0xfffffc0d
    63d8:	9f02      	ldr	r7, [sp, #8]
    63da:	0c16      	lsrs	r6, r2, #16
    63dc:	1838      	adds	r0, r7, r0
    63de:	9004      	str	r0, [sp, #16]
    63e0:	4640      	mov	r0, r8
    63e2:	0c07      	lsrs	r7, r0, #16
    63e4:	0400      	lsls	r0, r0, #16
    63e6:	0c00      	lsrs	r0, r0, #16
    63e8:	0412      	lsls	r2, r2, #16
    63ea:	0c12      	lsrs	r2, r2, #16
    63ec:	1c03      	adds	r3, r0, #0
    63ee:	4353      	muls	r3, r2
    63f0:	1c04      	adds	r4, r0, #0
    63f2:	1c3d      	adds	r5, r7, #0
    63f4:	4374      	muls	r4, r6
    63f6:	4355      	muls	r5, r2
    63f8:	4698      	mov	r8, r3
    63fa:	1c3b      	adds	r3, r7, #0
    63fc:	4373      	muls	r3, r6
    63fe:	1964      	adds	r4, r4, r5
    6400:	46a4      	mov	ip, r4
    6402:	4644      	mov	r4, r8
    6404:	9302      	str	r3, [sp, #8]
    6406:	0c23      	lsrs	r3, r4, #16
    6408:	4463      	add	r3, ip
    640a:	429d      	cmp	r5, r3
    640c:	d904      	bls.n	6418 <__aeabi_dmul+0x224>
    640e:	9d02      	ldr	r5, [sp, #8]
    6410:	2480      	movs	r4, #128	; 0x80
    6412:	0264      	lsls	r4, r4, #9
    6414:	192d      	adds	r5, r5, r4
    6416:	9502      	str	r5, [sp, #8]
    6418:	0c1d      	lsrs	r5, r3, #16
    641a:	9503      	str	r5, [sp, #12]
    641c:	4645      	mov	r5, r8
    641e:	042c      	lsls	r4, r5, #16
    6420:	041b      	lsls	r3, r3, #16
    6422:	0c24      	lsrs	r4, r4, #16
    6424:	191c      	adds	r4, r3, r4
    6426:	9405      	str	r4, [sp, #20]
    6428:	465c      	mov	r4, fp
    642a:	0c23      	lsrs	r3, r4, #16
    642c:	1c05      	adds	r5, r0, #0
    642e:	4358      	muls	r0, r3
    6430:	0424      	lsls	r4, r4, #16
    6432:	0c24      	lsrs	r4, r4, #16
    6434:	4684      	mov	ip, r0
    6436:	1c38      	adds	r0, r7, #0
    6438:	4360      	muls	r0, r4
    643a:	4365      	muls	r5, r4
    643c:	435f      	muls	r7, r3
    643e:	4681      	mov	r9, r0
    6440:	44cc      	add	ip, r9
    6442:	0c28      	lsrs	r0, r5, #16
    6444:	4460      	add	r0, ip
    6446:	46bb      	mov	fp, r7
    6448:	4581      	cmp	r9, r0
    644a:	d902      	bls.n	6452 <__aeabi_dmul+0x25e>
    644c:	2780      	movs	r7, #128	; 0x80
    644e:	027f      	lsls	r7, r7, #9
    6450:	44bb      	add	fp, r7
    6452:	042d      	lsls	r5, r5, #16
    6454:	0c07      	lsrs	r7, r0, #16
    6456:	0c2d      	lsrs	r5, r5, #16
    6458:	0400      	lsls	r0, r0, #16
    645a:	1940      	adds	r0, r0, r5
    645c:	4655      	mov	r5, sl
    645e:	46bc      	mov	ip, r7
    6460:	042f      	lsls	r7, r5, #16
    6462:	44e3      	add	fp, ip
    6464:	4684      	mov	ip, r0
    6466:	0c28      	lsrs	r0, r5, #16
    6468:	0c3d      	lsrs	r5, r7, #16
    646a:	1c2f      	adds	r7, r5, #0
    646c:	4357      	muls	r7, r2
    646e:	46b8      	mov	r8, r7
    6470:	1c2f      	adds	r7, r5, #0
    6472:	4377      	muls	r7, r6
    6474:	4342      	muls	r2, r0
    6476:	46b9      	mov	r9, r7
    6478:	4647      	mov	r7, r8
    647a:	0c3f      	lsrs	r7, r7, #16
    647c:	4491      	add	r9, r2
    647e:	46ba      	mov	sl, r7
    6480:	44d1      	add	r9, sl
    6482:	4346      	muls	r6, r0
    6484:	454a      	cmp	r2, r9
    6486:	d902      	bls.n	648e <__aeabi_dmul+0x29a>
    6488:	2280      	movs	r2, #128	; 0x80
    648a:	0252      	lsls	r2, r2, #9
    648c:	18b6      	adds	r6, r6, r2
    648e:	464f      	mov	r7, r9
    6490:	0c3a      	lsrs	r2, r7, #16
    6492:	18b6      	adds	r6, r6, r2
    6494:	043a      	lsls	r2, r7, #16
    6496:	4647      	mov	r7, r8
    6498:	043f      	lsls	r7, r7, #16
    649a:	0c3f      	lsrs	r7, r7, #16
    649c:	46b8      	mov	r8, r7
    649e:	1c2f      	adds	r7, r5, #0
    64a0:	4367      	muls	r7, r4
    64a2:	435d      	muls	r5, r3
    64a4:	4344      	muls	r4, r0
    64a6:	4358      	muls	r0, r3
    64a8:	1965      	adds	r5, r4, r5
    64aa:	9001      	str	r0, [sp, #4]
    64ac:	0c38      	lsrs	r0, r7, #16
    64ae:	182d      	adds	r5, r5, r0
    64b0:	4442      	add	r2, r8
    64b2:	46b8      	mov	r8, r7
    64b4:	42ac      	cmp	r4, r5
    64b6:	d904      	bls.n	64c2 <__aeabi_dmul+0x2ce>
    64b8:	9801      	ldr	r0, [sp, #4]
    64ba:	2380      	movs	r3, #128	; 0x80
    64bc:	025b      	lsls	r3, r3, #9
    64be:	18c0      	adds	r0, r0, r3
    64c0:	9001      	str	r0, [sp, #4]
    64c2:	9c03      	ldr	r4, [sp, #12]
    64c4:	9f02      	ldr	r7, [sp, #8]
    64c6:	1c20      	adds	r0, r4, #0
    64c8:	4460      	add	r0, ip
    64ca:	19c0      	adds	r0, r0, r7
    64cc:	4560      	cmp	r0, ip
    64ce:	41a4      	sbcs	r4, r4
    64d0:	4647      	mov	r7, r8
    64d2:	4264      	negs	r4, r4
    64d4:	46a4      	mov	ip, r4
    64d6:	042b      	lsls	r3, r5, #16
    64d8:	043c      	lsls	r4, r7, #16
    64da:	4699      	mov	r9, r3
    64dc:	0c24      	lsrs	r4, r4, #16
    64de:	444c      	add	r4, r9
    64e0:	46a0      	mov	r8, r4
    64e2:	44d8      	add	r8, fp
    64e4:	1880      	adds	r0, r0, r2
    64e6:	46c2      	mov	sl, r8
    64e8:	44e2      	add	sl, ip
    64ea:	4290      	cmp	r0, r2
    64ec:	4192      	sbcs	r2, r2
    64ee:	4657      	mov	r7, sl
    64f0:	4252      	negs	r2, r2
    64f2:	4691      	mov	r9, r2
    64f4:	19f2      	adds	r2, r6, r7
    64f6:	45e2      	cmp	sl, ip
    64f8:	41bf      	sbcs	r7, r7
    64fa:	427f      	negs	r7, r7
    64fc:	464b      	mov	r3, r9
    64fe:	46bc      	mov	ip, r7
    6500:	45d8      	cmp	r8, fp
    6502:	41bf      	sbcs	r7, r7
    6504:	18d4      	adds	r4, r2, r3
    6506:	427f      	negs	r7, r7
    6508:	4663      	mov	r3, ip
    650a:	431f      	orrs	r7, r3
    650c:	0c2d      	lsrs	r5, r5, #16
    650e:	197f      	adds	r7, r7, r5
    6510:	42b2      	cmp	r2, r6
    6512:	4192      	sbcs	r2, r2
    6514:	454c      	cmp	r4, r9
    6516:	41ad      	sbcs	r5, r5
    6518:	4252      	negs	r2, r2
    651a:	426d      	negs	r5, r5
    651c:	4315      	orrs	r5, r2
    651e:	9e01      	ldr	r6, [sp, #4]
    6520:	197d      	adds	r5, r7, r5
    6522:	19ab      	adds	r3, r5, r6
    6524:	0de2      	lsrs	r2, r4, #23
    6526:	025b      	lsls	r3, r3, #9
    6528:	9f05      	ldr	r7, [sp, #20]
    652a:	4313      	orrs	r3, r2
    652c:	0242      	lsls	r2, r0, #9
    652e:	433a      	orrs	r2, r7
    6530:	469a      	mov	sl, r3
    6532:	1e53      	subs	r3, r2, #1
    6534:	419a      	sbcs	r2, r3
    6536:	0dc3      	lsrs	r3, r0, #23
    6538:	1c10      	adds	r0, r2, #0
    653a:	4318      	orrs	r0, r3
    653c:	0264      	lsls	r4, r4, #9
    653e:	4320      	orrs	r0, r4
    6540:	4680      	mov	r8, r0
    6542:	4650      	mov	r0, sl
    6544:	01c0      	lsls	r0, r0, #7
    6546:	d50d      	bpl.n	6564 <__aeabi_dmul+0x370>
    6548:	4645      	mov	r5, r8
    654a:	2201      	movs	r2, #1
    654c:	4656      	mov	r6, sl
    654e:	9c04      	ldr	r4, [sp, #16]
    6550:	086b      	lsrs	r3, r5, #1
    6552:	402a      	ands	r2, r5
    6554:	431a      	orrs	r2, r3
    6556:	07f3      	lsls	r3, r6, #31
    6558:	3401      	adds	r4, #1
    655a:	431a      	orrs	r2, r3
    655c:	0876      	lsrs	r6, r6, #1
    655e:	9404      	str	r4, [sp, #16]
    6560:	4690      	mov	r8, r2
    6562:	46b2      	mov	sl, r6
    6564:	9e04      	ldr	r6, [sp, #16]
    6566:	4f63      	ldr	r7, [pc, #396]	; (66f4 <__aeabi_dmul+0x500>)
    6568:	19f3      	adds	r3, r6, r7
    656a:	2b00      	cmp	r3, #0
    656c:	dd61      	ble.n	6632 <__aeabi_dmul+0x43e>
    656e:	4640      	mov	r0, r8
    6570:	0740      	lsls	r0, r0, #29
    6572:	d00b      	beq.n	658c <__aeabi_dmul+0x398>
    6574:	220f      	movs	r2, #15
    6576:	4644      	mov	r4, r8
    6578:	4022      	ands	r2, r4
    657a:	2a04      	cmp	r2, #4
    657c:	d006      	beq.n	658c <__aeabi_dmul+0x398>
    657e:	4642      	mov	r2, r8
    6580:	3204      	adds	r2, #4
    6582:	4542      	cmp	r2, r8
    6584:	4180      	sbcs	r0, r0
    6586:	4240      	negs	r0, r0
    6588:	4482      	add	sl, r0
    658a:	4690      	mov	r8, r2
    658c:	4655      	mov	r5, sl
    658e:	01ed      	lsls	r5, r5, #7
    6590:	d507      	bpl.n	65a2 <__aeabi_dmul+0x3ae>
    6592:	4b59      	ldr	r3, [pc, #356]	; (66f8 <__aeabi_dmul+0x504>)
    6594:	4656      	mov	r6, sl
    6596:	9f04      	ldr	r7, [sp, #16]
    6598:	2080      	movs	r0, #128	; 0x80
    659a:	401e      	ands	r6, r3
    659c:	00c0      	lsls	r0, r0, #3
    659e:	46b2      	mov	sl, r6
    65a0:	183b      	adds	r3, r7, r0
    65a2:	4a56      	ldr	r2, [pc, #344]	; (66fc <__aeabi_dmul+0x508>)
    65a4:	4293      	cmp	r3, r2
    65a6:	dd00      	ble.n	65aa <__aeabi_dmul+0x3b6>
    65a8:	e6ea      	b.n	6380 <__aeabi_dmul+0x18c>
    65aa:	4644      	mov	r4, r8
    65ac:	4655      	mov	r5, sl
    65ae:	08e2      	lsrs	r2, r4, #3
    65b0:	0768      	lsls	r0, r5, #29
    65b2:	4310      	orrs	r0, r2
    65b4:	2201      	movs	r2, #1
    65b6:	026c      	lsls	r4, r5, #9
    65b8:	055b      	lsls	r3, r3, #21
    65ba:	400a      	ands	r2, r1
    65bc:	4680      	mov	r8, r0
    65be:	0b24      	lsrs	r4, r4, #12
    65c0:	0d5b      	lsrs	r3, r3, #21
    65c2:	4691      	mov	r9, r2
    65c4:	e67b      	b.n	62be <__aeabi_dmul+0xca>
    65c6:	46da      	mov	sl, fp
    65c8:	4690      	mov	r8, r2
    65ca:	1c1d      	adds	r5, r3, #0
    65cc:	e669      	b.n	62a2 <__aeabi_dmul+0xae>
    65ce:	2480      	movs	r4, #128	; 0x80
    65d0:	0324      	lsls	r4, r4, #12
    65d2:	4657      	mov	r7, sl
    65d4:	4227      	tst	r7, r4
    65d6:	d11c      	bne.n	6612 <__aeabi_dmul+0x41e>
    65d8:	433c      	orrs	r4, r7
    65da:	0324      	lsls	r4, r4, #12
    65dc:	0b24      	lsrs	r4, r4, #12
    65de:	4b48      	ldr	r3, [pc, #288]	; (6700 <__aeabi_dmul+0x50c>)
    65e0:	e66d      	b.n	62be <__aeabi_dmul+0xca>
    65e2:	1c03      	adds	r3, r0, #0
    65e4:	3b28      	subs	r3, #40	; 0x28
    65e6:	1c31      	adds	r1, r6, #0
    65e8:	4099      	lsls	r1, r3
    65ea:	468b      	mov	fp, r1
    65ec:	2200      	movs	r2, #0
    65ee:	e6c3      	b.n	6378 <__aeabi_dmul+0x184>
    65f0:	1c30      	adds	r0, r6, #0
    65f2:	f000 fc73 	bl	6edc <__clzsi2>
    65f6:	3020      	adds	r0, #32
    65f8:	e6ad      	b.n	6356 <__aeabi_dmul+0x162>
    65fa:	3b28      	subs	r3, #40	; 0x28
    65fc:	1c21      	adds	r1, r4, #0
    65fe:	4099      	lsls	r1, r3
    6600:	2200      	movs	r2, #0
    6602:	468a      	mov	sl, r1
    6604:	4690      	mov	r8, r2
    6606:	e68e      	b.n	6326 <__aeabi_dmul+0x132>
    6608:	1c20      	adds	r0, r4, #0
    660a:	f000 fc67 	bl	6edc <__clzsi2>
    660e:	3020      	adds	r0, #32
    6610:	e678      	b.n	6304 <__aeabi_dmul+0x110>
    6612:	4658      	mov	r0, fp
    6614:	4220      	tst	r0, r4
    6616:	d107      	bne.n	6628 <__aeabi_dmul+0x434>
    6618:	4304      	orrs	r4, r0
    661a:	9903      	ldr	r1, [sp, #12]
    661c:	0324      	lsls	r4, r4, #12
    661e:	0b24      	lsrs	r4, r4, #12
    6620:	4689      	mov	r9, r1
    6622:	4690      	mov	r8, r2
    6624:	4b36      	ldr	r3, [pc, #216]	; (6700 <__aeabi_dmul+0x50c>)
    6626:	e64a      	b.n	62be <__aeabi_dmul+0xca>
    6628:	433c      	orrs	r4, r7
    662a:	0324      	lsls	r4, r4, #12
    662c:	0b24      	lsrs	r4, r4, #12
    662e:	4b34      	ldr	r3, [pc, #208]	; (6700 <__aeabi_dmul+0x50c>)
    6630:	e645      	b.n	62be <__aeabi_dmul+0xca>
    6632:	4b34      	ldr	r3, [pc, #208]	; (6704 <__aeabi_dmul+0x510>)
    6634:	9e04      	ldr	r6, [sp, #16]
    6636:	1b9b      	subs	r3, r3, r6
    6638:	2b38      	cmp	r3, #56	; 0x38
    663a:	dd06      	ble.n	664a <__aeabi_dmul+0x456>
    663c:	2301      	movs	r3, #1
    663e:	400b      	ands	r3, r1
    6640:	2400      	movs	r4, #0
    6642:	4699      	mov	r9, r3
    6644:	46a0      	mov	r8, r4
    6646:	2300      	movs	r3, #0
    6648:	e639      	b.n	62be <__aeabi_dmul+0xca>
    664a:	2b1f      	cmp	r3, #31
    664c:	dc25      	bgt.n	669a <__aeabi_dmul+0x4a6>
    664e:	9c04      	ldr	r4, [sp, #16]
    6650:	4d2d      	ldr	r5, [pc, #180]	; (6708 <__aeabi_dmul+0x514>)
    6652:	4646      	mov	r6, r8
    6654:	1960      	adds	r0, r4, r5
    6656:	4652      	mov	r2, sl
    6658:	4644      	mov	r4, r8
    665a:	4086      	lsls	r6, r0
    665c:	40dc      	lsrs	r4, r3
    665e:	4082      	lsls	r2, r0
    6660:	4657      	mov	r7, sl
    6662:	1c30      	adds	r0, r6, #0
    6664:	4322      	orrs	r2, r4
    6666:	40df      	lsrs	r7, r3
    6668:	1e44      	subs	r4, r0, #1
    666a:	41a0      	sbcs	r0, r4
    666c:	4302      	orrs	r2, r0
    666e:	1c3b      	adds	r3, r7, #0
    6670:	0754      	lsls	r4, r2, #29
    6672:	d009      	beq.n	6688 <__aeabi_dmul+0x494>
    6674:	200f      	movs	r0, #15
    6676:	4010      	ands	r0, r2
    6678:	2804      	cmp	r0, #4
    667a:	d005      	beq.n	6688 <__aeabi_dmul+0x494>
    667c:	1d10      	adds	r0, r2, #4
    667e:	4290      	cmp	r0, r2
    6680:	4192      	sbcs	r2, r2
    6682:	4252      	negs	r2, r2
    6684:	189b      	adds	r3, r3, r2
    6686:	1c02      	adds	r2, r0, #0
    6688:	021d      	lsls	r5, r3, #8
    668a:	d51a      	bpl.n	66c2 <__aeabi_dmul+0x4ce>
    668c:	2301      	movs	r3, #1
    668e:	400b      	ands	r3, r1
    6690:	2400      	movs	r4, #0
    6692:	4699      	mov	r9, r3
    6694:	46a0      	mov	r8, r4
    6696:	2301      	movs	r3, #1
    6698:	e611      	b.n	62be <__aeabi_dmul+0xca>
    669a:	481c      	ldr	r0, [pc, #112]	; (670c <__aeabi_dmul+0x518>)
    669c:	9c04      	ldr	r4, [sp, #16]
    669e:	4655      	mov	r5, sl
    66a0:	1b00      	subs	r0, r0, r4
    66a2:	40c5      	lsrs	r5, r0
    66a4:	1c28      	adds	r0, r5, #0
    66a6:	2b20      	cmp	r3, #32
    66a8:	d016      	beq.n	66d8 <__aeabi_dmul+0x4e4>
    66aa:	4e19      	ldr	r6, [pc, #100]	; (6710 <__aeabi_dmul+0x51c>)
    66ac:	4657      	mov	r7, sl
    66ae:	19a2      	adds	r2, r4, r6
    66b0:	4097      	lsls	r7, r2
    66b2:	1c3a      	adds	r2, r7, #0
    66b4:	4643      	mov	r3, r8
    66b6:	431a      	orrs	r2, r3
    66b8:	1e53      	subs	r3, r2, #1
    66ba:	419a      	sbcs	r2, r3
    66bc:	4302      	orrs	r2, r0
    66be:	2300      	movs	r3, #0
    66c0:	e7d6      	b.n	6670 <__aeabi_dmul+0x47c>
    66c2:	0758      	lsls	r0, r3, #29
    66c4:	025b      	lsls	r3, r3, #9
    66c6:	08d2      	lsrs	r2, r2, #3
    66c8:	0b1c      	lsrs	r4, r3, #12
    66ca:	2301      	movs	r3, #1
    66cc:	400b      	ands	r3, r1
    66ce:	4310      	orrs	r0, r2
    66d0:	4699      	mov	r9, r3
    66d2:	4680      	mov	r8, r0
    66d4:	2300      	movs	r3, #0
    66d6:	e5f2      	b.n	62be <__aeabi_dmul+0xca>
    66d8:	2200      	movs	r2, #0
    66da:	e7eb      	b.n	66b4 <__aeabi_dmul+0x4c0>
    66dc:	2480      	movs	r4, #128	; 0x80
    66de:	0324      	lsls	r4, r4, #12
    66e0:	4650      	mov	r0, sl
    66e2:	2301      	movs	r3, #1
    66e4:	4304      	orrs	r4, r0
    66e6:	4019      	ands	r1, r3
    66e8:	0324      	lsls	r4, r4, #12
    66ea:	0b24      	lsrs	r4, r4, #12
    66ec:	4689      	mov	r9, r1
    66ee:	4b04      	ldr	r3, [pc, #16]	; (6700 <__aeabi_dmul+0x50c>)
    66f0:	e5e5      	b.n	62be <__aeabi_dmul+0xca>
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	000003ff 	.word	0x000003ff
    66f8:	feffffff 	.word	0xfeffffff
    66fc:	000007fe 	.word	0x000007fe
    6700:	000007ff 	.word	0x000007ff
    6704:	fffffc02 	.word	0xfffffc02
    6708:	0000041e 	.word	0x0000041e
    670c:	fffffbe2 	.word	0xfffffbe2
    6710:	0000043e 	.word	0x0000043e

00006714 <__aeabi_dsub>:
    6714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6716:	465f      	mov	r7, fp
    6718:	4656      	mov	r6, sl
    671a:	4644      	mov	r4, r8
    671c:	464d      	mov	r5, r9
    671e:	b4f0      	push	{r4, r5, r6, r7}
    6720:	030c      	lsls	r4, r1, #12
    6722:	004d      	lsls	r5, r1, #1
    6724:	0fcf      	lsrs	r7, r1, #31
    6726:	0a61      	lsrs	r1, r4, #9
    6728:	0f44      	lsrs	r4, r0, #29
    672a:	4321      	orrs	r1, r4
    672c:	00c4      	lsls	r4, r0, #3
    672e:	0318      	lsls	r0, r3, #12
    6730:	0fde      	lsrs	r6, r3, #31
    6732:	4680      	mov	r8, r0
    6734:	46b4      	mov	ip, r6
    6736:	4646      	mov	r6, r8
    6738:	0058      	lsls	r0, r3, #1
    673a:	0a76      	lsrs	r6, r6, #9
    673c:	0f53      	lsrs	r3, r2, #29
    673e:	4333      	orrs	r3, r6
    6740:	00d6      	lsls	r6, r2, #3
    6742:	4ad1      	ldr	r2, [pc, #836]	; (6a88 <__aeabi_dsub+0x374>)
    6744:	0d6d      	lsrs	r5, r5, #21
    6746:	46ba      	mov	sl, r7
    6748:	0d40      	lsrs	r0, r0, #21
    674a:	46b3      	mov	fp, r6
    674c:	4290      	cmp	r0, r2
    674e:	d100      	bne.n	6752 <__aeabi_dsub+0x3e>
    6750:	e0f5      	b.n	693e <__aeabi_dsub+0x22a>
    6752:	4662      	mov	r2, ip
    6754:	2601      	movs	r6, #1
    6756:	4072      	eors	r2, r6
    6758:	4694      	mov	ip, r2
    675a:	4567      	cmp	r7, ip
    675c:	d100      	bne.n	6760 <__aeabi_dsub+0x4c>
    675e:	e0ab      	b.n	68b8 <__aeabi_dsub+0x1a4>
    6760:	1a2f      	subs	r7, r5, r0
    6762:	2f00      	cmp	r7, #0
    6764:	dc00      	bgt.n	6768 <__aeabi_dsub+0x54>
    6766:	e111      	b.n	698c <__aeabi_dsub+0x278>
    6768:	2800      	cmp	r0, #0
    676a:	d13e      	bne.n	67ea <__aeabi_dsub+0xd6>
    676c:	4658      	mov	r0, fp
    676e:	4318      	orrs	r0, r3
    6770:	d000      	beq.n	6774 <__aeabi_dsub+0x60>
    6772:	e0f1      	b.n	6958 <__aeabi_dsub+0x244>
    6774:	0760      	lsls	r0, r4, #29
    6776:	d100      	bne.n	677a <__aeabi_dsub+0x66>
    6778:	e097      	b.n	68aa <__aeabi_dsub+0x196>
    677a:	230f      	movs	r3, #15
    677c:	4023      	ands	r3, r4
    677e:	2b04      	cmp	r3, #4
    6780:	d100      	bne.n	6784 <__aeabi_dsub+0x70>
    6782:	e122      	b.n	69ca <__aeabi_dsub+0x2b6>
    6784:	1d22      	adds	r2, r4, #4
    6786:	42a2      	cmp	r2, r4
    6788:	41a4      	sbcs	r4, r4
    678a:	4264      	negs	r4, r4
    678c:	2380      	movs	r3, #128	; 0x80
    678e:	1909      	adds	r1, r1, r4
    6790:	041b      	lsls	r3, r3, #16
    6792:	2701      	movs	r7, #1
    6794:	4650      	mov	r0, sl
    6796:	400b      	ands	r3, r1
    6798:	4007      	ands	r7, r0
    679a:	1c14      	adds	r4, r2, #0
    679c:	2b00      	cmp	r3, #0
    679e:	d100      	bne.n	67a2 <__aeabi_dsub+0x8e>
    67a0:	e079      	b.n	6896 <__aeabi_dsub+0x182>
    67a2:	4bb9      	ldr	r3, [pc, #740]	; (6a88 <__aeabi_dsub+0x374>)
    67a4:	3501      	adds	r5, #1
    67a6:	429d      	cmp	r5, r3
    67a8:	d100      	bne.n	67ac <__aeabi_dsub+0x98>
    67aa:	e10b      	b.n	69c4 <__aeabi_dsub+0x2b0>
    67ac:	4bb7      	ldr	r3, [pc, #732]	; (6a8c <__aeabi_dsub+0x378>)
    67ae:	08e4      	lsrs	r4, r4, #3
    67b0:	4019      	ands	r1, r3
    67b2:	0748      	lsls	r0, r1, #29
    67b4:	0249      	lsls	r1, r1, #9
    67b6:	4304      	orrs	r4, r0
    67b8:	0b0b      	lsrs	r3, r1, #12
    67ba:	2000      	movs	r0, #0
    67bc:	2100      	movs	r1, #0
    67be:	031b      	lsls	r3, r3, #12
    67c0:	0b1a      	lsrs	r2, r3, #12
    67c2:	0d0b      	lsrs	r3, r1, #20
    67c4:	056d      	lsls	r5, r5, #21
    67c6:	051b      	lsls	r3, r3, #20
    67c8:	4313      	orrs	r3, r2
    67ca:	086a      	lsrs	r2, r5, #1
    67cc:	4db0      	ldr	r5, [pc, #704]	; (6a90 <__aeabi_dsub+0x37c>)
    67ce:	07ff      	lsls	r7, r7, #31
    67d0:	401d      	ands	r5, r3
    67d2:	4315      	orrs	r5, r2
    67d4:	006d      	lsls	r5, r5, #1
    67d6:	086d      	lsrs	r5, r5, #1
    67d8:	1c29      	adds	r1, r5, #0
    67da:	4339      	orrs	r1, r7
    67dc:	1c20      	adds	r0, r4, #0
    67de:	bc3c      	pop	{r2, r3, r4, r5}
    67e0:	4690      	mov	r8, r2
    67e2:	4699      	mov	r9, r3
    67e4:	46a2      	mov	sl, r4
    67e6:	46ab      	mov	fp, r5
    67e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    67ea:	48a7      	ldr	r0, [pc, #668]	; (6a88 <__aeabi_dsub+0x374>)
    67ec:	4285      	cmp	r5, r0
    67ee:	d0c1      	beq.n	6774 <__aeabi_dsub+0x60>
    67f0:	2080      	movs	r0, #128	; 0x80
    67f2:	0400      	lsls	r0, r0, #16
    67f4:	4303      	orrs	r3, r0
    67f6:	2f38      	cmp	r7, #56	; 0x38
    67f8:	dd00      	ble.n	67fc <__aeabi_dsub+0xe8>
    67fa:	e0fd      	b.n	69f8 <__aeabi_dsub+0x2e4>
    67fc:	2f1f      	cmp	r7, #31
    67fe:	dd00      	ble.n	6802 <__aeabi_dsub+0xee>
    6800:	e131      	b.n	6a66 <__aeabi_dsub+0x352>
    6802:	2020      	movs	r0, #32
    6804:	1bc0      	subs	r0, r0, r7
    6806:	1c1a      	adds	r2, r3, #0
    6808:	465e      	mov	r6, fp
    680a:	4082      	lsls	r2, r0
    680c:	40fe      	lsrs	r6, r7
    680e:	4332      	orrs	r2, r6
    6810:	4694      	mov	ip, r2
    6812:	465a      	mov	r2, fp
    6814:	4082      	lsls	r2, r0
    6816:	1c10      	adds	r0, r2, #0
    6818:	1e42      	subs	r2, r0, #1
    681a:	4190      	sbcs	r0, r2
    681c:	40fb      	lsrs	r3, r7
    681e:	4662      	mov	r2, ip
    6820:	4302      	orrs	r2, r0
    6822:	1c1f      	adds	r7, r3, #0
    6824:	1aa2      	subs	r2, r4, r2
    6826:	4294      	cmp	r4, r2
    6828:	41a4      	sbcs	r4, r4
    682a:	4264      	negs	r4, r4
    682c:	1bc9      	subs	r1, r1, r7
    682e:	1b09      	subs	r1, r1, r4
    6830:	1c14      	adds	r4, r2, #0
    6832:	020a      	lsls	r2, r1, #8
    6834:	d59e      	bpl.n	6774 <__aeabi_dsub+0x60>
    6836:	0249      	lsls	r1, r1, #9
    6838:	0a4f      	lsrs	r7, r1, #9
    683a:	2f00      	cmp	r7, #0
    683c:	d100      	bne.n	6840 <__aeabi_dsub+0x12c>
    683e:	e0d6      	b.n	69ee <__aeabi_dsub+0x2da>
    6840:	1c38      	adds	r0, r7, #0
    6842:	f000 fb4b 	bl	6edc <__clzsi2>
    6846:	1c02      	adds	r2, r0, #0
    6848:	3a08      	subs	r2, #8
    684a:	2a1f      	cmp	r2, #31
    684c:	dd00      	ble.n	6850 <__aeabi_dsub+0x13c>
    684e:	e0c3      	b.n	69d8 <__aeabi_dsub+0x2c4>
    6850:	2128      	movs	r1, #40	; 0x28
    6852:	1c23      	adds	r3, r4, #0
    6854:	1a09      	subs	r1, r1, r0
    6856:	4097      	lsls	r7, r2
    6858:	40cb      	lsrs	r3, r1
    685a:	431f      	orrs	r7, r3
    685c:	4094      	lsls	r4, r2
    685e:	4295      	cmp	r5, r2
    6860:	dd00      	ble.n	6864 <__aeabi_dsub+0x150>
    6862:	e0c0      	b.n	69e6 <__aeabi_dsub+0x2d2>
    6864:	1b55      	subs	r5, r2, r5
    6866:	1c69      	adds	r1, r5, #1
    6868:	291f      	cmp	r1, #31
    686a:	dd00      	ble.n	686e <__aeabi_dsub+0x15a>
    686c:	e0ea      	b.n	6a44 <__aeabi_dsub+0x330>
    686e:	221f      	movs	r2, #31
    6870:	1b55      	subs	r5, r2, r5
    6872:	1c3b      	adds	r3, r7, #0
    6874:	1c22      	adds	r2, r4, #0
    6876:	40ab      	lsls	r3, r5
    6878:	40ca      	lsrs	r2, r1
    687a:	40ac      	lsls	r4, r5
    687c:	1e65      	subs	r5, r4, #1
    687e:	41ac      	sbcs	r4, r5
    6880:	4313      	orrs	r3, r2
    6882:	40cf      	lsrs	r7, r1
    6884:	431c      	orrs	r4, r3
    6886:	1c39      	adds	r1, r7, #0
    6888:	2500      	movs	r5, #0
    688a:	e773      	b.n	6774 <__aeabi_dsub+0x60>
    688c:	2180      	movs	r1, #128	; 0x80
    688e:	4d7e      	ldr	r5, [pc, #504]	; (6a88 <__aeabi_dsub+0x374>)
    6890:	2700      	movs	r7, #0
    6892:	03c9      	lsls	r1, r1, #15
    6894:	2400      	movs	r4, #0
    6896:	4b7c      	ldr	r3, [pc, #496]	; (6a88 <__aeabi_dsub+0x374>)
    6898:	0748      	lsls	r0, r1, #29
    689a:	08e4      	lsrs	r4, r4, #3
    689c:	4304      	orrs	r4, r0
    689e:	08c9      	lsrs	r1, r1, #3
    68a0:	429d      	cmp	r5, r3
    68a2:	d050      	beq.n	6946 <__aeabi_dsub+0x232>
    68a4:	0309      	lsls	r1, r1, #12
    68a6:	0b0b      	lsrs	r3, r1, #12
    68a8:	e787      	b.n	67ba <__aeabi_dsub+0xa6>
    68aa:	2380      	movs	r3, #128	; 0x80
    68ac:	041b      	lsls	r3, r3, #16
    68ae:	2701      	movs	r7, #1
    68b0:	4652      	mov	r2, sl
    68b2:	400b      	ands	r3, r1
    68b4:	4017      	ands	r7, r2
    68b6:	e771      	b.n	679c <__aeabi_dsub+0x88>
    68b8:	1a2a      	subs	r2, r5, r0
    68ba:	4694      	mov	ip, r2
    68bc:	2a00      	cmp	r2, #0
    68be:	dc00      	bgt.n	68c2 <__aeabi_dsub+0x1ae>
    68c0:	e0a1      	b.n	6a06 <__aeabi_dsub+0x2f2>
    68c2:	2800      	cmp	r0, #0
    68c4:	d054      	beq.n	6970 <__aeabi_dsub+0x25c>
    68c6:	4870      	ldr	r0, [pc, #448]	; (6a88 <__aeabi_dsub+0x374>)
    68c8:	4285      	cmp	r5, r0
    68ca:	d100      	bne.n	68ce <__aeabi_dsub+0x1ba>
    68cc:	e752      	b.n	6774 <__aeabi_dsub+0x60>
    68ce:	2080      	movs	r0, #128	; 0x80
    68d0:	0400      	lsls	r0, r0, #16
    68d2:	4303      	orrs	r3, r0
    68d4:	4660      	mov	r0, ip
    68d6:	2838      	cmp	r0, #56	; 0x38
    68d8:	dd00      	ble.n	68dc <__aeabi_dsub+0x1c8>
    68da:	e10e      	b.n	6afa <__aeabi_dsub+0x3e6>
    68dc:	281f      	cmp	r0, #31
    68de:	dd00      	ble.n	68e2 <__aeabi_dsub+0x1ce>
    68e0:	e157      	b.n	6b92 <__aeabi_dsub+0x47e>
    68e2:	4662      	mov	r2, ip
    68e4:	2020      	movs	r0, #32
    68e6:	1a80      	subs	r0, r0, r2
    68e8:	1c1e      	adds	r6, r3, #0
    68ea:	4086      	lsls	r6, r0
    68ec:	46b1      	mov	r9, r6
    68ee:	465e      	mov	r6, fp
    68f0:	40d6      	lsrs	r6, r2
    68f2:	464a      	mov	r2, r9
    68f4:	4332      	orrs	r2, r6
    68f6:	465e      	mov	r6, fp
    68f8:	4086      	lsls	r6, r0
    68fa:	4690      	mov	r8, r2
    68fc:	1c30      	adds	r0, r6, #0
    68fe:	1e42      	subs	r2, r0, #1
    6900:	4190      	sbcs	r0, r2
    6902:	4642      	mov	r2, r8
    6904:	4302      	orrs	r2, r0
    6906:	4660      	mov	r0, ip
    6908:	40c3      	lsrs	r3, r0
    690a:	1912      	adds	r2, r2, r4
    690c:	42a2      	cmp	r2, r4
    690e:	41a4      	sbcs	r4, r4
    6910:	4264      	negs	r4, r4
    6912:	1859      	adds	r1, r3, r1
    6914:	1909      	adds	r1, r1, r4
    6916:	1c14      	adds	r4, r2, #0
    6918:	0208      	lsls	r0, r1, #8
    691a:	d400      	bmi.n	691e <__aeabi_dsub+0x20a>
    691c:	e72a      	b.n	6774 <__aeabi_dsub+0x60>
    691e:	4b5a      	ldr	r3, [pc, #360]	; (6a88 <__aeabi_dsub+0x374>)
    6920:	3501      	adds	r5, #1
    6922:	429d      	cmp	r5, r3
    6924:	d100      	bne.n	6928 <__aeabi_dsub+0x214>
    6926:	e131      	b.n	6b8c <__aeabi_dsub+0x478>
    6928:	4b58      	ldr	r3, [pc, #352]	; (6a8c <__aeabi_dsub+0x378>)
    692a:	0860      	lsrs	r0, r4, #1
    692c:	4019      	ands	r1, r3
    692e:	2301      	movs	r3, #1
    6930:	4023      	ands	r3, r4
    6932:	1c1c      	adds	r4, r3, #0
    6934:	4304      	orrs	r4, r0
    6936:	07cb      	lsls	r3, r1, #31
    6938:	431c      	orrs	r4, r3
    693a:	0849      	lsrs	r1, r1, #1
    693c:	e71a      	b.n	6774 <__aeabi_dsub+0x60>
    693e:	431e      	orrs	r6, r3
    6940:	d000      	beq.n	6944 <__aeabi_dsub+0x230>
    6942:	e70a      	b.n	675a <__aeabi_dsub+0x46>
    6944:	e705      	b.n	6752 <__aeabi_dsub+0x3e>
    6946:	1c23      	adds	r3, r4, #0
    6948:	430b      	orrs	r3, r1
    694a:	d03b      	beq.n	69c4 <__aeabi_dsub+0x2b0>
    694c:	2380      	movs	r3, #128	; 0x80
    694e:	031b      	lsls	r3, r3, #12
    6950:	430b      	orrs	r3, r1
    6952:	031b      	lsls	r3, r3, #12
    6954:	0b1b      	lsrs	r3, r3, #12
    6956:	e730      	b.n	67ba <__aeabi_dsub+0xa6>
    6958:	3f01      	subs	r7, #1
    695a:	2f00      	cmp	r7, #0
    695c:	d16d      	bne.n	6a3a <__aeabi_dsub+0x326>
    695e:	465e      	mov	r6, fp
    6960:	1ba2      	subs	r2, r4, r6
    6962:	4294      	cmp	r4, r2
    6964:	41a4      	sbcs	r4, r4
    6966:	4264      	negs	r4, r4
    6968:	1ac9      	subs	r1, r1, r3
    696a:	1b09      	subs	r1, r1, r4
    696c:	1c14      	adds	r4, r2, #0
    696e:	e760      	b.n	6832 <__aeabi_dsub+0x11e>
    6970:	4658      	mov	r0, fp
    6972:	4318      	orrs	r0, r3
    6974:	d100      	bne.n	6978 <__aeabi_dsub+0x264>
    6976:	e6fd      	b.n	6774 <__aeabi_dsub+0x60>
    6978:	2601      	movs	r6, #1
    697a:	4276      	negs	r6, r6
    697c:	44b4      	add	ip, r6
    697e:	4660      	mov	r0, ip
    6980:	2800      	cmp	r0, #0
    6982:	d000      	beq.n	6986 <__aeabi_dsub+0x272>
    6984:	e0d0      	b.n	6b28 <__aeabi_dsub+0x414>
    6986:	465e      	mov	r6, fp
    6988:	1932      	adds	r2, r6, r4
    698a:	e7bf      	b.n	690c <__aeabi_dsub+0x1f8>
    698c:	2f00      	cmp	r7, #0
    698e:	d000      	beq.n	6992 <__aeabi_dsub+0x27e>
    6990:	e080      	b.n	6a94 <__aeabi_dsub+0x380>
    6992:	1c68      	adds	r0, r5, #1
    6994:	0540      	lsls	r0, r0, #21
    6996:	0d40      	lsrs	r0, r0, #21
    6998:	2801      	cmp	r0, #1
    699a:	dc00      	bgt.n	699e <__aeabi_dsub+0x28a>
    699c:	e0e8      	b.n	6b70 <__aeabi_dsub+0x45c>
    699e:	465a      	mov	r2, fp
    69a0:	1aa2      	subs	r2, r4, r2
    69a2:	4294      	cmp	r4, r2
    69a4:	41bf      	sbcs	r7, r7
    69a6:	1ac8      	subs	r0, r1, r3
    69a8:	427f      	negs	r7, r7
    69aa:	1bc7      	subs	r7, r0, r7
    69ac:	023e      	lsls	r6, r7, #8
    69ae:	d400      	bmi.n	69b2 <__aeabi_dsub+0x29e>
    69b0:	e098      	b.n	6ae4 <__aeabi_dsub+0x3d0>
    69b2:	4658      	mov	r0, fp
    69b4:	1b04      	subs	r4, r0, r4
    69b6:	45a3      	cmp	fp, r4
    69b8:	4192      	sbcs	r2, r2
    69ba:	1a59      	subs	r1, r3, r1
    69bc:	4252      	negs	r2, r2
    69be:	1a8f      	subs	r7, r1, r2
    69c0:	46e2      	mov	sl, ip
    69c2:	e73a      	b.n	683a <__aeabi_dsub+0x126>
    69c4:	2300      	movs	r3, #0
    69c6:	2400      	movs	r4, #0
    69c8:	e6f7      	b.n	67ba <__aeabi_dsub+0xa6>
    69ca:	2380      	movs	r3, #128	; 0x80
    69cc:	041b      	lsls	r3, r3, #16
    69ce:	2701      	movs	r7, #1
    69d0:	4656      	mov	r6, sl
    69d2:	400b      	ands	r3, r1
    69d4:	4037      	ands	r7, r6
    69d6:	e6e1      	b.n	679c <__aeabi_dsub+0x88>
    69d8:	1c27      	adds	r7, r4, #0
    69da:	3828      	subs	r0, #40	; 0x28
    69dc:	4087      	lsls	r7, r0
    69de:	2400      	movs	r4, #0
    69e0:	4295      	cmp	r5, r2
    69e2:	dc00      	bgt.n	69e6 <__aeabi_dsub+0x2d2>
    69e4:	e73e      	b.n	6864 <__aeabi_dsub+0x150>
    69e6:	4929      	ldr	r1, [pc, #164]	; (6a8c <__aeabi_dsub+0x378>)
    69e8:	1aad      	subs	r5, r5, r2
    69ea:	4039      	ands	r1, r7
    69ec:	e6c2      	b.n	6774 <__aeabi_dsub+0x60>
    69ee:	1c20      	adds	r0, r4, #0
    69f0:	f000 fa74 	bl	6edc <__clzsi2>
    69f4:	3020      	adds	r0, #32
    69f6:	e726      	b.n	6846 <__aeabi_dsub+0x132>
    69f8:	465a      	mov	r2, fp
    69fa:	431a      	orrs	r2, r3
    69fc:	1e53      	subs	r3, r2, #1
    69fe:	419a      	sbcs	r2, r3
    6a00:	b2d2      	uxtb	r2, r2
    6a02:	2700      	movs	r7, #0
    6a04:	e70e      	b.n	6824 <__aeabi_dsub+0x110>
    6a06:	2a00      	cmp	r2, #0
    6a08:	d000      	beq.n	6a0c <__aeabi_dsub+0x2f8>
    6a0a:	e0de      	b.n	6bca <__aeabi_dsub+0x4b6>
    6a0c:	1c68      	adds	r0, r5, #1
    6a0e:	0546      	lsls	r6, r0, #21
    6a10:	0d76      	lsrs	r6, r6, #21
    6a12:	2e01      	cmp	r6, #1
    6a14:	dc00      	bgt.n	6a18 <__aeabi_dsub+0x304>
    6a16:	e090      	b.n	6b3a <__aeabi_dsub+0x426>
    6a18:	4d1b      	ldr	r5, [pc, #108]	; (6a88 <__aeabi_dsub+0x374>)
    6a1a:	42a8      	cmp	r0, r5
    6a1c:	d100      	bne.n	6a20 <__aeabi_dsub+0x30c>
    6a1e:	e0f5      	b.n	6c0c <__aeabi_dsub+0x4f8>
    6a20:	465e      	mov	r6, fp
    6a22:	1932      	adds	r2, r6, r4
    6a24:	42a2      	cmp	r2, r4
    6a26:	41a4      	sbcs	r4, r4
    6a28:	4264      	negs	r4, r4
    6a2a:	1859      	adds	r1, r3, r1
    6a2c:	1909      	adds	r1, r1, r4
    6a2e:	07cc      	lsls	r4, r1, #31
    6a30:	0852      	lsrs	r2, r2, #1
    6a32:	4314      	orrs	r4, r2
    6a34:	0849      	lsrs	r1, r1, #1
    6a36:	1c05      	adds	r5, r0, #0
    6a38:	e69c      	b.n	6774 <__aeabi_dsub+0x60>
    6a3a:	4813      	ldr	r0, [pc, #76]	; (6a88 <__aeabi_dsub+0x374>)
    6a3c:	4285      	cmp	r5, r0
    6a3e:	d000      	beq.n	6a42 <__aeabi_dsub+0x32e>
    6a40:	e6d9      	b.n	67f6 <__aeabi_dsub+0xe2>
    6a42:	e697      	b.n	6774 <__aeabi_dsub+0x60>
    6a44:	1c2b      	adds	r3, r5, #0
    6a46:	3b1f      	subs	r3, #31
    6a48:	1c3e      	adds	r6, r7, #0
    6a4a:	40de      	lsrs	r6, r3
    6a4c:	1c33      	adds	r3, r6, #0
    6a4e:	2920      	cmp	r1, #32
    6a50:	d06f      	beq.n	6b32 <__aeabi_dsub+0x41e>
    6a52:	223f      	movs	r2, #63	; 0x3f
    6a54:	1b55      	subs	r5, r2, r5
    6a56:	40af      	lsls	r7, r5
    6a58:	433c      	orrs	r4, r7
    6a5a:	1e60      	subs	r0, r4, #1
    6a5c:	4184      	sbcs	r4, r0
    6a5e:	431c      	orrs	r4, r3
    6a60:	2100      	movs	r1, #0
    6a62:	2500      	movs	r5, #0
    6a64:	e686      	b.n	6774 <__aeabi_dsub+0x60>
    6a66:	1c38      	adds	r0, r7, #0
    6a68:	3820      	subs	r0, #32
    6a6a:	1c1e      	adds	r6, r3, #0
    6a6c:	40c6      	lsrs	r6, r0
    6a6e:	1c30      	adds	r0, r6, #0
    6a70:	2f20      	cmp	r7, #32
    6a72:	d060      	beq.n	6b36 <__aeabi_dsub+0x422>
    6a74:	2240      	movs	r2, #64	; 0x40
    6a76:	1bd7      	subs	r7, r2, r7
    6a78:	40bb      	lsls	r3, r7
    6a7a:	465a      	mov	r2, fp
    6a7c:	431a      	orrs	r2, r3
    6a7e:	1e53      	subs	r3, r2, #1
    6a80:	419a      	sbcs	r2, r3
    6a82:	4302      	orrs	r2, r0
    6a84:	2700      	movs	r7, #0
    6a86:	e6cd      	b.n	6824 <__aeabi_dsub+0x110>
    6a88:	000007ff 	.word	0x000007ff
    6a8c:	ff7fffff 	.word	0xff7fffff
    6a90:	800fffff 	.word	0x800fffff
    6a94:	2d00      	cmp	r5, #0
    6a96:	d037      	beq.n	6b08 <__aeabi_dsub+0x3f4>
    6a98:	4db6      	ldr	r5, [pc, #728]	; (6d74 <__aeabi_dsub+0x660>)
    6a9a:	42a8      	cmp	r0, r5
    6a9c:	d100      	bne.n	6aa0 <__aeabi_dsub+0x38c>
    6a9e:	e08f      	b.n	6bc0 <__aeabi_dsub+0x4ac>
    6aa0:	2580      	movs	r5, #128	; 0x80
    6aa2:	042d      	lsls	r5, r5, #16
    6aa4:	427f      	negs	r7, r7
    6aa6:	4329      	orrs	r1, r5
    6aa8:	2f38      	cmp	r7, #56	; 0x38
    6aaa:	dd00      	ble.n	6aae <__aeabi_dsub+0x39a>
    6aac:	e0a8      	b.n	6c00 <__aeabi_dsub+0x4ec>
    6aae:	2f1f      	cmp	r7, #31
    6ab0:	dd00      	ble.n	6ab4 <__aeabi_dsub+0x3a0>
    6ab2:	e124      	b.n	6cfe <__aeabi_dsub+0x5ea>
    6ab4:	2520      	movs	r5, #32
    6ab6:	1bed      	subs	r5, r5, r7
    6ab8:	1c0e      	adds	r6, r1, #0
    6aba:	40ae      	lsls	r6, r5
    6abc:	46b0      	mov	r8, r6
    6abe:	1c26      	adds	r6, r4, #0
    6ac0:	40fe      	lsrs	r6, r7
    6ac2:	4642      	mov	r2, r8
    6ac4:	40ac      	lsls	r4, r5
    6ac6:	4316      	orrs	r6, r2
    6ac8:	1e65      	subs	r5, r4, #1
    6aca:	41ac      	sbcs	r4, r5
    6acc:	4334      	orrs	r4, r6
    6ace:	40f9      	lsrs	r1, r7
    6ad0:	465a      	mov	r2, fp
    6ad2:	1b14      	subs	r4, r2, r4
    6ad4:	45a3      	cmp	fp, r4
    6ad6:	4192      	sbcs	r2, r2
    6ad8:	1a5b      	subs	r3, r3, r1
    6ada:	4252      	negs	r2, r2
    6adc:	1a99      	subs	r1, r3, r2
    6ade:	1c05      	adds	r5, r0, #0
    6ae0:	46e2      	mov	sl, ip
    6ae2:	e6a6      	b.n	6832 <__aeabi_dsub+0x11e>
    6ae4:	1c13      	adds	r3, r2, #0
    6ae6:	433b      	orrs	r3, r7
    6ae8:	1c14      	adds	r4, r2, #0
    6aea:	2b00      	cmp	r3, #0
    6aec:	d000      	beq.n	6af0 <__aeabi_dsub+0x3dc>
    6aee:	e6a4      	b.n	683a <__aeabi_dsub+0x126>
    6af0:	2700      	movs	r7, #0
    6af2:	2100      	movs	r1, #0
    6af4:	2500      	movs	r5, #0
    6af6:	2400      	movs	r4, #0
    6af8:	e6cd      	b.n	6896 <__aeabi_dsub+0x182>
    6afa:	465a      	mov	r2, fp
    6afc:	431a      	orrs	r2, r3
    6afe:	1e53      	subs	r3, r2, #1
    6b00:	419a      	sbcs	r2, r3
    6b02:	b2d2      	uxtb	r2, r2
    6b04:	2300      	movs	r3, #0
    6b06:	e700      	b.n	690a <__aeabi_dsub+0x1f6>
    6b08:	1c0d      	adds	r5, r1, #0
    6b0a:	4325      	orrs	r5, r4
    6b0c:	d058      	beq.n	6bc0 <__aeabi_dsub+0x4ac>
    6b0e:	43ff      	mvns	r7, r7
    6b10:	2f00      	cmp	r7, #0
    6b12:	d151      	bne.n	6bb8 <__aeabi_dsub+0x4a4>
    6b14:	465a      	mov	r2, fp
    6b16:	1b14      	subs	r4, r2, r4
    6b18:	45a3      	cmp	fp, r4
    6b1a:	4192      	sbcs	r2, r2
    6b1c:	1a59      	subs	r1, r3, r1
    6b1e:	4252      	negs	r2, r2
    6b20:	1a89      	subs	r1, r1, r2
    6b22:	1c05      	adds	r5, r0, #0
    6b24:	46e2      	mov	sl, ip
    6b26:	e684      	b.n	6832 <__aeabi_dsub+0x11e>
    6b28:	4892      	ldr	r0, [pc, #584]	; (6d74 <__aeabi_dsub+0x660>)
    6b2a:	4285      	cmp	r5, r0
    6b2c:	d000      	beq.n	6b30 <__aeabi_dsub+0x41c>
    6b2e:	e6d1      	b.n	68d4 <__aeabi_dsub+0x1c0>
    6b30:	e620      	b.n	6774 <__aeabi_dsub+0x60>
    6b32:	2700      	movs	r7, #0
    6b34:	e790      	b.n	6a58 <__aeabi_dsub+0x344>
    6b36:	2300      	movs	r3, #0
    6b38:	e79f      	b.n	6a7a <__aeabi_dsub+0x366>
    6b3a:	1c08      	adds	r0, r1, #0
    6b3c:	4320      	orrs	r0, r4
    6b3e:	2d00      	cmp	r5, #0
    6b40:	d000      	beq.n	6b44 <__aeabi_dsub+0x430>
    6b42:	e0c2      	b.n	6cca <__aeabi_dsub+0x5b6>
    6b44:	2800      	cmp	r0, #0
    6b46:	d100      	bne.n	6b4a <__aeabi_dsub+0x436>
    6b48:	e0ef      	b.n	6d2a <__aeabi_dsub+0x616>
    6b4a:	4658      	mov	r0, fp
    6b4c:	4318      	orrs	r0, r3
    6b4e:	d100      	bne.n	6b52 <__aeabi_dsub+0x43e>
    6b50:	e610      	b.n	6774 <__aeabi_dsub+0x60>
    6b52:	4658      	mov	r0, fp
    6b54:	1902      	adds	r2, r0, r4
    6b56:	42a2      	cmp	r2, r4
    6b58:	41a4      	sbcs	r4, r4
    6b5a:	4264      	negs	r4, r4
    6b5c:	1859      	adds	r1, r3, r1
    6b5e:	1909      	adds	r1, r1, r4
    6b60:	1c14      	adds	r4, r2, #0
    6b62:	020a      	lsls	r2, r1, #8
    6b64:	d400      	bmi.n	6b68 <__aeabi_dsub+0x454>
    6b66:	e605      	b.n	6774 <__aeabi_dsub+0x60>
    6b68:	4b83      	ldr	r3, [pc, #524]	; (6d78 <__aeabi_dsub+0x664>)
    6b6a:	2501      	movs	r5, #1
    6b6c:	4019      	ands	r1, r3
    6b6e:	e601      	b.n	6774 <__aeabi_dsub+0x60>
    6b70:	1c08      	adds	r0, r1, #0
    6b72:	4320      	orrs	r0, r4
    6b74:	2d00      	cmp	r5, #0
    6b76:	d138      	bne.n	6bea <__aeabi_dsub+0x4d6>
    6b78:	2800      	cmp	r0, #0
    6b7a:	d16f      	bne.n	6c5c <__aeabi_dsub+0x548>
    6b7c:	4659      	mov	r1, fp
    6b7e:	4319      	orrs	r1, r3
    6b80:	d003      	beq.n	6b8a <__aeabi_dsub+0x476>
    6b82:	1c19      	adds	r1, r3, #0
    6b84:	465c      	mov	r4, fp
    6b86:	46e2      	mov	sl, ip
    6b88:	e5f4      	b.n	6774 <__aeabi_dsub+0x60>
    6b8a:	2700      	movs	r7, #0
    6b8c:	2100      	movs	r1, #0
    6b8e:	2400      	movs	r4, #0
    6b90:	e681      	b.n	6896 <__aeabi_dsub+0x182>
    6b92:	4660      	mov	r0, ip
    6b94:	3820      	subs	r0, #32
    6b96:	1c1a      	adds	r2, r3, #0
    6b98:	40c2      	lsrs	r2, r0
    6b9a:	4666      	mov	r6, ip
    6b9c:	1c10      	adds	r0, r2, #0
    6b9e:	2e20      	cmp	r6, #32
    6ba0:	d100      	bne.n	6ba4 <__aeabi_dsub+0x490>
    6ba2:	e0aa      	b.n	6cfa <__aeabi_dsub+0x5e6>
    6ba4:	2240      	movs	r2, #64	; 0x40
    6ba6:	1b92      	subs	r2, r2, r6
    6ba8:	4093      	lsls	r3, r2
    6baa:	465a      	mov	r2, fp
    6bac:	431a      	orrs	r2, r3
    6bae:	1e53      	subs	r3, r2, #1
    6bb0:	419a      	sbcs	r2, r3
    6bb2:	4302      	orrs	r2, r0
    6bb4:	2300      	movs	r3, #0
    6bb6:	e6a8      	b.n	690a <__aeabi_dsub+0x1f6>
    6bb8:	4d6e      	ldr	r5, [pc, #440]	; (6d74 <__aeabi_dsub+0x660>)
    6bba:	42a8      	cmp	r0, r5
    6bbc:	d000      	beq.n	6bc0 <__aeabi_dsub+0x4ac>
    6bbe:	e773      	b.n	6aa8 <__aeabi_dsub+0x394>
    6bc0:	1c19      	adds	r1, r3, #0
    6bc2:	465c      	mov	r4, fp
    6bc4:	1c05      	adds	r5, r0, #0
    6bc6:	46e2      	mov	sl, ip
    6bc8:	e5d4      	b.n	6774 <__aeabi_dsub+0x60>
    6bca:	2d00      	cmp	r5, #0
    6bcc:	d122      	bne.n	6c14 <__aeabi_dsub+0x500>
    6bce:	1c0d      	adds	r5, r1, #0
    6bd0:	4325      	orrs	r5, r4
    6bd2:	d076      	beq.n	6cc2 <__aeabi_dsub+0x5ae>
    6bd4:	43d5      	mvns	r5, r2
    6bd6:	2d00      	cmp	r5, #0
    6bd8:	d170      	bne.n	6cbc <__aeabi_dsub+0x5a8>
    6bda:	445c      	add	r4, fp
    6bdc:	455c      	cmp	r4, fp
    6bde:	4192      	sbcs	r2, r2
    6be0:	1859      	adds	r1, r3, r1
    6be2:	4252      	negs	r2, r2
    6be4:	1889      	adds	r1, r1, r2
    6be6:	1c05      	adds	r5, r0, #0
    6be8:	e696      	b.n	6918 <__aeabi_dsub+0x204>
    6bea:	2800      	cmp	r0, #0
    6bec:	d14c      	bne.n	6c88 <__aeabi_dsub+0x574>
    6bee:	4659      	mov	r1, fp
    6bf0:	4319      	orrs	r1, r3
    6bf2:	d100      	bne.n	6bf6 <__aeabi_dsub+0x4e2>
    6bf4:	e64a      	b.n	688c <__aeabi_dsub+0x178>
    6bf6:	1c19      	adds	r1, r3, #0
    6bf8:	465c      	mov	r4, fp
    6bfa:	46e2      	mov	sl, ip
    6bfc:	4d5d      	ldr	r5, [pc, #372]	; (6d74 <__aeabi_dsub+0x660>)
    6bfe:	e5b9      	b.n	6774 <__aeabi_dsub+0x60>
    6c00:	430c      	orrs	r4, r1
    6c02:	1e61      	subs	r1, r4, #1
    6c04:	418c      	sbcs	r4, r1
    6c06:	b2e4      	uxtb	r4, r4
    6c08:	2100      	movs	r1, #0
    6c0a:	e761      	b.n	6ad0 <__aeabi_dsub+0x3bc>
    6c0c:	1c05      	adds	r5, r0, #0
    6c0e:	2100      	movs	r1, #0
    6c10:	2400      	movs	r4, #0
    6c12:	e640      	b.n	6896 <__aeabi_dsub+0x182>
    6c14:	4d57      	ldr	r5, [pc, #348]	; (6d74 <__aeabi_dsub+0x660>)
    6c16:	42a8      	cmp	r0, r5
    6c18:	d053      	beq.n	6cc2 <__aeabi_dsub+0x5ae>
    6c1a:	4255      	negs	r5, r2
    6c1c:	2280      	movs	r2, #128	; 0x80
    6c1e:	0416      	lsls	r6, r2, #16
    6c20:	4331      	orrs	r1, r6
    6c22:	2d38      	cmp	r5, #56	; 0x38
    6c24:	dc7b      	bgt.n	6d1e <__aeabi_dsub+0x60a>
    6c26:	2d1f      	cmp	r5, #31
    6c28:	dd00      	ble.n	6c2c <__aeabi_dsub+0x518>
    6c2a:	e08c      	b.n	6d46 <__aeabi_dsub+0x632>
    6c2c:	2220      	movs	r2, #32
    6c2e:	1b56      	subs	r6, r2, r5
    6c30:	1c0a      	adds	r2, r1, #0
    6c32:	46b4      	mov	ip, r6
    6c34:	40b2      	lsls	r2, r6
    6c36:	1c26      	adds	r6, r4, #0
    6c38:	40ee      	lsrs	r6, r5
    6c3a:	4332      	orrs	r2, r6
    6c3c:	4690      	mov	r8, r2
    6c3e:	4662      	mov	r2, ip
    6c40:	4094      	lsls	r4, r2
    6c42:	1e66      	subs	r6, r4, #1
    6c44:	41b4      	sbcs	r4, r6
    6c46:	4642      	mov	r2, r8
    6c48:	4314      	orrs	r4, r2
    6c4a:	40e9      	lsrs	r1, r5
    6c4c:	445c      	add	r4, fp
    6c4e:	455c      	cmp	r4, fp
    6c50:	4192      	sbcs	r2, r2
    6c52:	18cb      	adds	r3, r1, r3
    6c54:	4252      	negs	r2, r2
    6c56:	1899      	adds	r1, r3, r2
    6c58:	1c05      	adds	r5, r0, #0
    6c5a:	e65d      	b.n	6918 <__aeabi_dsub+0x204>
    6c5c:	4658      	mov	r0, fp
    6c5e:	4318      	orrs	r0, r3
    6c60:	d100      	bne.n	6c64 <__aeabi_dsub+0x550>
    6c62:	e587      	b.n	6774 <__aeabi_dsub+0x60>
    6c64:	465e      	mov	r6, fp
    6c66:	1ba7      	subs	r7, r4, r6
    6c68:	42bc      	cmp	r4, r7
    6c6a:	4192      	sbcs	r2, r2
    6c6c:	1ac8      	subs	r0, r1, r3
    6c6e:	4252      	negs	r2, r2
    6c70:	1a80      	subs	r0, r0, r2
    6c72:	0206      	lsls	r6, r0, #8
    6c74:	d560      	bpl.n	6d38 <__aeabi_dsub+0x624>
    6c76:	4658      	mov	r0, fp
    6c78:	1b04      	subs	r4, r0, r4
    6c7a:	45a3      	cmp	fp, r4
    6c7c:	4192      	sbcs	r2, r2
    6c7e:	1a59      	subs	r1, r3, r1
    6c80:	4252      	negs	r2, r2
    6c82:	1a89      	subs	r1, r1, r2
    6c84:	46e2      	mov	sl, ip
    6c86:	e575      	b.n	6774 <__aeabi_dsub+0x60>
    6c88:	4658      	mov	r0, fp
    6c8a:	4318      	orrs	r0, r3
    6c8c:	d033      	beq.n	6cf6 <__aeabi_dsub+0x5e2>
    6c8e:	0748      	lsls	r0, r1, #29
    6c90:	08e4      	lsrs	r4, r4, #3
    6c92:	4304      	orrs	r4, r0
    6c94:	2080      	movs	r0, #128	; 0x80
    6c96:	08c9      	lsrs	r1, r1, #3
    6c98:	0300      	lsls	r0, r0, #12
    6c9a:	4201      	tst	r1, r0
    6c9c:	d008      	beq.n	6cb0 <__aeabi_dsub+0x59c>
    6c9e:	08dd      	lsrs	r5, r3, #3
    6ca0:	4205      	tst	r5, r0
    6ca2:	d105      	bne.n	6cb0 <__aeabi_dsub+0x59c>
    6ca4:	4659      	mov	r1, fp
    6ca6:	08ca      	lsrs	r2, r1, #3
    6ca8:	075c      	lsls	r4, r3, #29
    6caa:	4314      	orrs	r4, r2
    6cac:	1c29      	adds	r1, r5, #0
    6cae:	46e2      	mov	sl, ip
    6cb0:	0f63      	lsrs	r3, r4, #29
    6cb2:	00c9      	lsls	r1, r1, #3
    6cb4:	4319      	orrs	r1, r3
    6cb6:	00e4      	lsls	r4, r4, #3
    6cb8:	4d2e      	ldr	r5, [pc, #184]	; (6d74 <__aeabi_dsub+0x660>)
    6cba:	e55b      	b.n	6774 <__aeabi_dsub+0x60>
    6cbc:	4a2d      	ldr	r2, [pc, #180]	; (6d74 <__aeabi_dsub+0x660>)
    6cbe:	4290      	cmp	r0, r2
    6cc0:	d1af      	bne.n	6c22 <__aeabi_dsub+0x50e>
    6cc2:	1c19      	adds	r1, r3, #0
    6cc4:	465c      	mov	r4, fp
    6cc6:	1c05      	adds	r5, r0, #0
    6cc8:	e554      	b.n	6774 <__aeabi_dsub+0x60>
    6cca:	2800      	cmp	r0, #0
    6ccc:	d030      	beq.n	6d30 <__aeabi_dsub+0x61c>
    6cce:	4658      	mov	r0, fp
    6cd0:	4318      	orrs	r0, r3
    6cd2:	d010      	beq.n	6cf6 <__aeabi_dsub+0x5e2>
    6cd4:	2580      	movs	r5, #128	; 0x80
    6cd6:	0748      	lsls	r0, r1, #29
    6cd8:	08e4      	lsrs	r4, r4, #3
    6cda:	08c9      	lsrs	r1, r1, #3
    6cdc:	032d      	lsls	r5, r5, #12
    6cde:	4304      	orrs	r4, r0
    6ce0:	4229      	tst	r1, r5
    6ce2:	d0e5      	beq.n	6cb0 <__aeabi_dsub+0x59c>
    6ce4:	08d8      	lsrs	r0, r3, #3
    6ce6:	4228      	tst	r0, r5
    6ce8:	d1e2      	bne.n	6cb0 <__aeabi_dsub+0x59c>
    6cea:	465d      	mov	r5, fp
    6cec:	08ea      	lsrs	r2, r5, #3
    6cee:	075c      	lsls	r4, r3, #29
    6cf0:	4314      	orrs	r4, r2
    6cf2:	1c01      	adds	r1, r0, #0
    6cf4:	e7dc      	b.n	6cb0 <__aeabi_dsub+0x59c>
    6cf6:	4d1f      	ldr	r5, [pc, #124]	; (6d74 <__aeabi_dsub+0x660>)
    6cf8:	e53c      	b.n	6774 <__aeabi_dsub+0x60>
    6cfa:	2300      	movs	r3, #0
    6cfc:	e755      	b.n	6baa <__aeabi_dsub+0x496>
    6cfe:	1c3d      	adds	r5, r7, #0
    6d00:	3d20      	subs	r5, #32
    6d02:	1c0e      	adds	r6, r1, #0
    6d04:	40ee      	lsrs	r6, r5
    6d06:	1c35      	adds	r5, r6, #0
    6d08:	2f20      	cmp	r7, #32
    6d0a:	d02e      	beq.n	6d6a <__aeabi_dsub+0x656>
    6d0c:	2640      	movs	r6, #64	; 0x40
    6d0e:	1bf7      	subs	r7, r6, r7
    6d10:	40b9      	lsls	r1, r7
    6d12:	430c      	orrs	r4, r1
    6d14:	1e61      	subs	r1, r4, #1
    6d16:	418c      	sbcs	r4, r1
    6d18:	432c      	orrs	r4, r5
    6d1a:	2100      	movs	r1, #0
    6d1c:	e6d8      	b.n	6ad0 <__aeabi_dsub+0x3bc>
    6d1e:	430c      	orrs	r4, r1
    6d20:	1e61      	subs	r1, r4, #1
    6d22:	418c      	sbcs	r4, r1
    6d24:	b2e4      	uxtb	r4, r4
    6d26:	2100      	movs	r1, #0
    6d28:	e790      	b.n	6c4c <__aeabi_dsub+0x538>
    6d2a:	1c19      	adds	r1, r3, #0
    6d2c:	465c      	mov	r4, fp
    6d2e:	e521      	b.n	6774 <__aeabi_dsub+0x60>
    6d30:	1c19      	adds	r1, r3, #0
    6d32:	465c      	mov	r4, fp
    6d34:	4d0f      	ldr	r5, [pc, #60]	; (6d74 <__aeabi_dsub+0x660>)
    6d36:	e51d      	b.n	6774 <__aeabi_dsub+0x60>
    6d38:	1c03      	adds	r3, r0, #0
    6d3a:	433b      	orrs	r3, r7
    6d3c:	d100      	bne.n	6d40 <__aeabi_dsub+0x62c>
    6d3e:	e724      	b.n	6b8a <__aeabi_dsub+0x476>
    6d40:	1c01      	adds	r1, r0, #0
    6d42:	1c3c      	adds	r4, r7, #0
    6d44:	e516      	b.n	6774 <__aeabi_dsub+0x60>
    6d46:	2620      	movs	r6, #32
    6d48:	4276      	negs	r6, r6
    6d4a:	1976      	adds	r6, r6, r5
    6d4c:	1c0a      	adds	r2, r1, #0
    6d4e:	40f2      	lsrs	r2, r6
    6d50:	4690      	mov	r8, r2
    6d52:	2d20      	cmp	r5, #32
    6d54:	d00b      	beq.n	6d6e <__aeabi_dsub+0x65a>
    6d56:	2640      	movs	r6, #64	; 0x40
    6d58:	1b75      	subs	r5, r6, r5
    6d5a:	40a9      	lsls	r1, r5
    6d5c:	430c      	orrs	r4, r1
    6d5e:	1e61      	subs	r1, r4, #1
    6d60:	418c      	sbcs	r4, r1
    6d62:	4645      	mov	r5, r8
    6d64:	432c      	orrs	r4, r5
    6d66:	2100      	movs	r1, #0
    6d68:	e770      	b.n	6c4c <__aeabi_dsub+0x538>
    6d6a:	2100      	movs	r1, #0
    6d6c:	e7d1      	b.n	6d12 <__aeabi_dsub+0x5fe>
    6d6e:	2100      	movs	r1, #0
    6d70:	e7f4      	b.n	6d5c <__aeabi_dsub+0x648>
    6d72:	46c0      	nop			; (mov r8, r8)
    6d74:	000007ff 	.word	0x000007ff
    6d78:	ff7fffff 	.word	0xff7fffff

00006d7c <__aeabi_d2iz>:
    6d7c:	b570      	push	{r4, r5, r6, lr}
    6d7e:	1c0b      	adds	r3, r1, #0
    6d80:	4c12      	ldr	r4, [pc, #72]	; (6dcc <__aeabi_d2iz+0x50>)
    6d82:	0309      	lsls	r1, r1, #12
    6d84:	0b0e      	lsrs	r6, r1, #12
    6d86:	0059      	lsls	r1, r3, #1
    6d88:	1c02      	adds	r2, r0, #0
    6d8a:	0d49      	lsrs	r1, r1, #21
    6d8c:	0fdd      	lsrs	r5, r3, #31
    6d8e:	2000      	movs	r0, #0
    6d90:	42a1      	cmp	r1, r4
    6d92:	dd11      	ble.n	6db8 <__aeabi_d2iz+0x3c>
    6d94:	480e      	ldr	r0, [pc, #56]	; (6dd0 <__aeabi_d2iz+0x54>)
    6d96:	4281      	cmp	r1, r0
    6d98:	dc0f      	bgt.n	6dba <__aeabi_d2iz+0x3e>
    6d9a:	2080      	movs	r0, #128	; 0x80
    6d9c:	0340      	lsls	r0, r0, #13
    6d9e:	4306      	orrs	r6, r0
    6da0:	480c      	ldr	r0, [pc, #48]	; (6dd4 <__aeabi_d2iz+0x58>)
    6da2:	1a40      	subs	r0, r0, r1
    6da4:	281f      	cmp	r0, #31
    6da6:	dd0b      	ble.n	6dc0 <__aeabi_d2iz+0x44>
    6da8:	4a0b      	ldr	r2, [pc, #44]	; (6dd8 <__aeabi_d2iz+0x5c>)
    6daa:	1a52      	subs	r2, r2, r1
    6dac:	40d6      	lsrs	r6, r2
    6dae:	1c32      	adds	r2, r6, #0
    6db0:	4250      	negs	r0, r2
    6db2:	2d00      	cmp	r5, #0
    6db4:	d100      	bne.n	6db8 <__aeabi_d2iz+0x3c>
    6db6:	1c10      	adds	r0, r2, #0
    6db8:	bd70      	pop	{r4, r5, r6, pc}
    6dba:	4b08      	ldr	r3, [pc, #32]	; (6ddc <__aeabi_d2iz+0x60>)
    6dbc:	18e8      	adds	r0, r5, r3
    6dbe:	e7fb      	b.n	6db8 <__aeabi_d2iz+0x3c>
    6dc0:	4b07      	ldr	r3, [pc, #28]	; (6de0 <__aeabi_d2iz+0x64>)
    6dc2:	40c2      	lsrs	r2, r0
    6dc4:	18c9      	adds	r1, r1, r3
    6dc6:	408e      	lsls	r6, r1
    6dc8:	4332      	orrs	r2, r6
    6dca:	e7f1      	b.n	6db0 <__aeabi_d2iz+0x34>
    6dcc:	000003fe 	.word	0x000003fe
    6dd0:	0000041d 	.word	0x0000041d
    6dd4:	00000433 	.word	0x00000433
    6dd8:	00000413 	.word	0x00000413
    6ddc:	7fffffff 	.word	0x7fffffff
    6de0:	fffffbed 	.word	0xfffffbed

00006de4 <__aeabi_i2d>:
    6de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6de6:	1e04      	subs	r4, r0, #0
    6de8:	d031      	beq.n	6e4e <__aeabi_i2d+0x6a>
    6dea:	0fc7      	lsrs	r7, r0, #31
    6dec:	d000      	beq.n	6df0 <__aeabi_i2d+0xc>
    6dee:	4244      	negs	r4, r0
    6df0:	1c20      	adds	r0, r4, #0
    6df2:	f000 f873 	bl	6edc <__clzsi2>
    6df6:	4d18      	ldr	r5, [pc, #96]	; (6e58 <__aeabi_i2d+0x74>)
    6df8:	1a2d      	subs	r5, r5, r0
    6dfa:	280a      	cmp	r0, #10
    6dfc:	dd19      	ble.n	6e32 <__aeabi_i2d+0x4e>
    6dfe:	380b      	subs	r0, #11
    6e00:	4084      	lsls	r4, r0
    6e02:	0324      	lsls	r4, r4, #12
    6e04:	056d      	lsls	r5, r5, #21
    6e06:	0b24      	lsrs	r4, r4, #12
    6e08:	0d6d      	lsrs	r5, r5, #21
    6e0a:	1c3a      	adds	r2, r7, #0
    6e0c:	2600      	movs	r6, #0
    6e0e:	2000      	movs	r0, #0
    6e10:	2100      	movs	r1, #0
    6e12:	0d0b      	lsrs	r3, r1, #20
    6e14:	0324      	lsls	r4, r4, #12
    6e16:	0b24      	lsrs	r4, r4, #12
    6e18:	051b      	lsls	r3, r3, #20
    6e1a:	4323      	orrs	r3, r4
    6e1c:	4c0f      	ldr	r4, [pc, #60]	; (6e5c <__aeabi_i2d+0x78>)
    6e1e:	052d      	lsls	r5, r5, #20
    6e20:	401c      	ands	r4, r3
    6e22:	432c      	orrs	r4, r5
    6e24:	0064      	lsls	r4, r4, #1
    6e26:	0864      	lsrs	r4, r4, #1
    6e28:	07d3      	lsls	r3, r2, #31
    6e2a:	1c21      	adds	r1, r4, #0
    6e2c:	1c30      	adds	r0, r6, #0
    6e2e:	4319      	orrs	r1, r3
    6e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e32:	1c06      	adds	r6, r0, #0
    6e34:	3615      	adds	r6, #21
    6e36:	1c23      	adds	r3, r4, #0
    6e38:	40b3      	lsls	r3, r6
    6e3a:	1c1e      	adds	r6, r3, #0
    6e3c:	230b      	movs	r3, #11
    6e3e:	1a18      	subs	r0, r3, r0
    6e40:	40c4      	lsrs	r4, r0
    6e42:	0324      	lsls	r4, r4, #12
    6e44:	056d      	lsls	r5, r5, #21
    6e46:	0b24      	lsrs	r4, r4, #12
    6e48:	0d6d      	lsrs	r5, r5, #21
    6e4a:	1c3a      	adds	r2, r7, #0
    6e4c:	e7df      	b.n	6e0e <__aeabi_i2d+0x2a>
    6e4e:	2200      	movs	r2, #0
    6e50:	2500      	movs	r5, #0
    6e52:	2400      	movs	r4, #0
    6e54:	2600      	movs	r6, #0
    6e56:	e7da      	b.n	6e0e <__aeabi_i2d+0x2a>
    6e58:	0000041e 	.word	0x0000041e
    6e5c:	800fffff 	.word	0x800fffff

00006e60 <__aeabi_cdrcmple>:
    6e60:	4684      	mov	ip, r0
    6e62:	1c10      	adds	r0, r2, #0
    6e64:	4662      	mov	r2, ip
    6e66:	468c      	mov	ip, r1
    6e68:	1c19      	adds	r1, r3, #0
    6e6a:	4663      	mov	r3, ip
    6e6c:	e000      	b.n	6e70 <__aeabi_cdcmpeq>
    6e6e:	46c0      	nop			; (mov r8, r8)

00006e70 <__aeabi_cdcmpeq>:
    6e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6e72:	f000 f919 	bl	70a8 <__ledf2>
    6e76:	2800      	cmp	r0, #0
    6e78:	d401      	bmi.n	6e7e <__aeabi_cdcmpeq+0xe>
    6e7a:	2100      	movs	r1, #0
    6e7c:	42c8      	cmn	r0, r1
    6e7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006e80 <__aeabi_dcmpeq>:
    6e80:	b510      	push	{r4, lr}
    6e82:	f000 f849 	bl	6f18 <__eqdf2>
    6e86:	4240      	negs	r0, r0
    6e88:	3001      	adds	r0, #1
    6e8a:	bd10      	pop	{r4, pc}

00006e8c <__aeabi_dcmplt>:
    6e8c:	b510      	push	{r4, lr}
    6e8e:	f000 f90b 	bl	70a8 <__ledf2>
    6e92:	2800      	cmp	r0, #0
    6e94:	db01      	blt.n	6e9a <__aeabi_dcmplt+0xe>
    6e96:	2000      	movs	r0, #0
    6e98:	bd10      	pop	{r4, pc}
    6e9a:	2001      	movs	r0, #1
    6e9c:	bd10      	pop	{r4, pc}
    6e9e:	46c0      	nop			; (mov r8, r8)

00006ea0 <__aeabi_dcmple>:
    6ea0:	b510      	push	{r4, lr}
    6ea2:	f000 f901 	bl	70a8 <__ledf2>
    6ea6:	2800      	cmp	r0, #0
    6ea8:	dd01      	ble.n	6eae <__aeabi_dcmple+0xe>
    6eaa:	2000      	movs	r0, #0
    6eac:	bd10      	pop	{r4, pc}
    6eae:	2001      	movs	r0, #1
    6eb0:	bd10      	pop	{r4, pc}
    6eb2:	46c0      	nop			; (mov r8, r8)

00006eb4 <__aeabi_dcmpgt>:
    6eb4:	b510      	push	{r4, lr}
    6eb6:	f000 f879 	bl	6fac <__gedf2>
    6eba:	2800      	cmp	r0, #0
    6ebc:	dc01      	bgt.n	6ec2 <__aeabi_dcmpgt+0xe>
    6ebe:	2000      	movs	r0, #0
    6ec0:	bd10      	pop	{r4, pc}
    6ec2:	2001      	movs	r0, #1
    6ec4:	bd10      	pop	{r4, pc}
    6ec6:	46c0      	nop			; (mov r8, r8)

00006ec8 <__aeabi_dcmpge>:
    6ec8:	b510      	push	{r4, lr}
    6eca:	f000 f86f 	bl	6fac <__gedf2>
    6ece:	2800      	cmp	r0, #0
    6ed0:	da01      	bge.n	6ed6 <__aeabi_dcmpge+0xe>
    6ed2:	2000      	movs	r0, #0
    6ed4:	bd10      	pop	{r4, pc}
    6ed6:	2001      	movs	r0, #1
    6ed8:	bd10      	pop	{r4, pc}
    6eda:	46c0      	nop			; (mov r8, r8)

00006edc <__clzsi2>:
    6edc:	211c      	movs	r1, #28
    6ede:	2301      	movs	r3, #1
    6ee0:	041b      	lsls	r3, r3, #16
    6ee2:	4298      	cmp	r0, r3
    6ee4:	d301      	bcc.n	6eea <__clzsi2+0xe>
    6ee6:	0c00      	lsrs	r0, r0, #16
    6ee8:	3910      	subs	r1, #16
    6eea:	0a1b      	lsrs	r3, r3, #8
    6eec:	4298      	cmp	r0, r3
    6eee:	d301      	bcc.n	6ef4 <__clzsi2+0x18>
    6ef0:	0a00      	lsrs	r0, r0, #8
    6ef2:	3908      	subs	r1, #8
    6ef4:	091b      	lsrs	r3, r3, #4
    6ef6:	4298      	cmp	r0, r3
    6ef8:	d301      	bcc.n	6efe <__clzsi2+0x22>
    6efa:	0900      	lsrs	r0, r0, #4
    6efc:	3904      	subs	r1, #4
    6efe:	a202      	add	r2, pc, #8	; (adr r2, 6f08 <__clzsi2+0x2c>)
    6f00:	5c10      	ldrb	r0, [r2, r0]
    6f02:	1840      	adds	r0, r0, r1
    6f04:	4770      	bx	lr
    6f06:	46c0      	nop			; (mov r8, r8)
    6f08:	02020304 	.word	0x02020304
    6f0c:	01010101 	.word	0x01010101
	...

00006f18 <__eqdf2>:
    6f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f1a:	465f      	mov	r7, fp
    6f1c:	4656      	mov	r6, sl
    6f1e:	464d      	mov	r5, r9
    6f20:	4644      	mov	r4, r8
    6f22:	b4f0      	push	{r4, r5, r6, r7}
    6f24:	1c0d      	adds	r5, r1, #0
    6f26:	1c04      	adds	r4, r0, #0
    6f28:	4680      	mov	r8, r0
    6f2a:	0fe8      	lsrs	r0, r5, #31
    6f2c:	4681      	mov	r9, r0
    6f2e:	0318      	lsls	r0, r3, #12
    6f30:	030f      	lsls	r7, r1, #12
    6f32:	0b00      	lsrs	r0, r0, #12
    6f34:	0b3f      	lsrs	r7, r7, #12
    6f36:	b083      	sub	sp, #12
    6f38:	4684      	mov	ip, r0
    6f3a:	481b      	ldr	r0, [pc, #108]	; (6fa8 <__eqdf2+0x90>)
    6f3c:	9700      	str	r7, [sp, #0]
    6f3e:	0049      	lsls	r1, r1, #1
    6f40:	005e      	lsls	r6, r3, #1
    6f42:	0fdf      	lsrs	r7, r3, #31
    6f44:	0d49      	lsrs	r1, r1, #21
    6f46:	4692      	mov	sl, r2
    6f48:	0d76      	lsrs	r6, r6, #21
    6f4a:	46bb      	mov	fp, r7
    6f4c:	4281      	cmp	r1, r0
    6f4e:	d00c      	beq.n	6f6a <__eqdf2+0x52>
    6f50:	4815      	ldr	r0, [pc, #84]	; (6fa8 <__eqdf2+0x90>)
    6f52:	4286      	cmp	r6, r0
    6f54:	d010      	beq.n	6f78 <__eqdf2+0x60>
    6f56:	2001      	movs	r0, #1
    6f58:	42b1      	cmp	r1, r6
    6f5a:	d015      	beq.n	6f88 <__eqdf2+0x70>
    6f5c:	b003      	add	sp, #12
    6f5e:	bc3c      	pop	{r2, r3, r4, r5}
    6f60:	4690      	mov	r8, r2
    6f62:	4699      	mov	r9, r3
    6f64:	46a2      	mov	sl, r4
    6f66:	46ab      	mov	fp, r5
    6f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f6a:	9f00      	ldr	r7, [sp, #0]
    6f6c:	2001      	movs	r0, #1
    6f6e:	4327      	orrs	r7, r4
    6f70:	d1f4      	bne.n	6f5c <__eqdf2+0x44>
    6f72:	480d      	ldr	r0, [pc, #52]	; (6fa8 <__eqdf2+0x90>)
    6f74:	4286      	cmp	r6, r0
    6f76:	d1ee      	bne.n	6f56 <__eqdf2+0x3e>
    6f78:	4660      	mov	r0, ip
    6f7a:	4302      	orrs	r2, r0
    6f7c:	2001      	movs	r0, #1
    6f7e:	2a00      	cmp	r2, #0
    6f80:	d1ec      	bne.n	6f5c <__eqdf2+0x44>
    6f82:	2001      	movs	r0, #1
    6f84:	42b1      	cmp	r1, r6
    6f86:	d1e9      	bne.n	6f5c <__eqdf2+0x44>
    6f88:	9b00      	ldr	r3, [sp, #0]
    6f8a:	4563      	cmp	r3, ip
    6f8c:	d1e6      	bne.n	6f5c <__eqdf2+0x44>
    6f8e:	45d0      	cmp	r8, sl
    6f90:	d1e4      	bne.n	6f5c <__eqdf2+0x44>
    6f92:	45d9      	cmp	r9, fp
    6f94:	d006      	beq.n	6fa4 <__eqdf2+0x8c>
    6f96:	2900      	cmp	r1, #0
    6f98:	d1e0      	bne.n	6f5c <__eqdf2+0x44>
    6f9a:	431c      	orrs	r4, r3
    6f9c:	1c20      	adds	r0, r4, #0
    6f9e:	1e44      	subs	r4, r0, #1
    6fa0:	41a0      	sbcs	r0, r4
    6fa2:	e7db      	b.n	6f5c <__eqdf2+0x44>
    6fa4:	2000      	movs	r0, #0
    6fa6:	e7d9      	b.n	6f5c <__eqdf2+0x44>
    6fa8:	000007ff 	.word	0x000007ff

00006fac <__gedf2>:
    6fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fae:	465f      	mov	r7, fp
    6fb0:	4656      	mov	r6, sl
    6fb2:	464d      	mov	r5, r9
    6fb4:	4644      	mov	r4, r8
    6fb6:	b4f0      	push	{r4, r5, r6, r7}
    6fb8:	0fcd      	lsrs	r5, r1, #31
    6fba:	0fde      	lsrs	r6, r3, #31
    6fbc:	46ac      	mov	ip, r5
    6fbe:	031d      	lsls	r5, r3, #12
    6fc0:	0b2d      	lsrs	r5, r5, #12
    6fc2:	46b1      	mov	r9, r6
    6fc4:	4e37      	ldr	r6, [pc, #220]	; (70a4 <__gedf2+0xf8>)
    6fc6:	030f      	lsls	r7, r1, #12
    6fc8:	004c      	lsls	r4, r1, #1
    6fca:	46ab      	mov	fp, r5
    6fcc:	005d      	lsls	r5, r3, #1
    6fce:	4680      	mov	r8, r0
    6fd0:	0b3f      	lsrs	r7, r7, #12
    6fd2:	0d64      	lsrs	r4, r4, #21
    6fd4:	4692      	mov	sl, r2
    6fd6:	0d6d      	lsrs	r5, r5, #21
    6fd8:	42b4      	cmp	r4, r6
    6fda:	d032      	beq.n	7042 <__gedf2+0x96>
    6fdc:	4e31      	ldr	r6, [pc, #196]	; (70a4 <__gedf2+0xf8>)
    6fde:	42b5      	cmp	r5, r6
    6fe0:	d035      	beq.n	704e <__gedf2+0xa2>
    6fe2:	2c00      	cmp	r4, #0
    6fe4:	d10e      	bne.n	7004 <__gedf2+0x58>
    6fe6:	4338      	orrs	r0, r7
    6fe8:	4241      	negs	r1, r0
    6fea:	4141      	adcs	r1, r0
    6fec:	1c08      	adds	r0, r1, #0
    6fee:	2d00      	cmp	r5, #0
    6ff0:	d00b      	beq.n	700a <__gedf2+0x5e>
    6ff2:	2900      	cmp	r1, #0
    6ff4:	d119      	bne.n	702a <__gedf2+0x7e>
    6ff6:	45cc      	cmp	ip, r9
    6ff8:	d02d      	beq.n	7056 <__gedf2+0xaa>
    6ffa:	4665      	mov	r5, ip
    6ffc:	4268      	negs	r0, r5
    6ffe:	2301      	movs	r3, #1
    7000:	4318      	orrs	r0, r3
    7002:	e018      	b.n	7036 <__gedf2+0x8a>
    7004:	2d00      	cmp	r5, #0
    7006:	d1f6      	bne.n	6ff6 <__gedf2+0x4a>
    7008:	1c28      	adds	r0, r5, #0
    700a:	4659      	mov	r1, fp
    700c:	430a      	orrs	r2, r1
    700e:	4253      	negs	r3, r2
    7010:	4153      	adcs	r3, r2
    7012:	2800      	cmp	r0, #0
    7014:	d106      	bne.n	7024 <__gedf2+0x78>
    7016:	2b00      	cmp	r3, #0
    7018:	d0ed      	beq.n	6ff6 <__gedf2+0x4a>
    701a:	4663      	mov	r3, ip
    701c:	4258      	negs	r0, r3
    701e:	2301      	movs	r3, #1
    7020:	4318      	orrs	r0, r3
    7022:	e008      	b.n	7036 <__gedf2+0x8a>
    7024:	2000      	movs	r0, #0
    7026:	2b00      	cmp	r3, #0
    7028:	d105      	bne.n	7036 <__gedf2+0x8a>
    702a:	464a      	mov	r2, r9
    702c:	4250      	negs	r0, r2
    702e:	4150      	adcs	r0, r2
    7030:	4240      	negs	r0, r0
    7032:	2301      	movs	r3, #1
    7034:	4318      	orrs	r0, r3
    7036:	bc3c      	pop	{r2, r3, r4, r5}
    7038:	4690      	mov	r8, r2
    703a:	4699      	mov	r9, r3
    703c:	46a2      	mov	sl, r4
    703e:	46ab      	mov	fp, r5
    7040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7042:	1c3e      	adds	r6, r7, #0
    7044:	4306      	orrs	r6, r0
    7046:	d0c9      	beq.n	6fdc <__gedf2+0x30>
    7048:	2002      	movs	r0, #2
    704a:	4240      	negs	r0, r0
    704c:	e7f3      	b.n	7036 <__gedf2+0x8a>
    704e:	465e      	mov	r6, fp
    7050:	4316      	orrs	r6, r2
    7052:	d0c6      	beq.n	6fe2 <__gedf2+0x36>
    7054:	e7f8      	b.n	7048 <__gedf2+0x9c>
    7056:	42ac      	cmp	r4, r5
    7058:	dc07      	bgt.n	706a <__gedf2+0xbe>
    705a:	da0b      	bge.n	7074 <__gedf2+0xc8>
    705c:	4661      	mov	r1, ip
    705e:	4248      	negs	r0, r1
    7060:	4148      	adcs	r0, r1
    7062:	4240      	negs	r0, r0
    7064:	2301      	movs	r3, #1
    7066:	4318      	orrs	r0, r3
    7068:	e7e5      	b.n	7036 <__gedf2+0x8a>
    706a:	4666      	mov	r6, ip
    706c:	4270      	negs	r0, r6
    706e:	2301      	movs	r3, #1
    7070:	4318      	orrs	r0, r3
    7072:	e7e0      	b.n	7036 <__gedf2+0x8a>
    7074:	455f      	cmp	r7, fp
    7076:	d80a      	bhi.n	708e <__gedf2+0xe2>
    7078:	d00e      	beq.n	7098 <__gedf2+0xec>
    707a:	2000      	movs	r0, #0
    707c:	455f      	cmp	r7, fp
    707e:	d2da      	bcs.n	7036 <__gedf2+0x8a>
    7080:	4665      	mov	r5, ip
    7082:	4268      	negs	r0, r5
    7084:	4168      	adcs	r0, r5
    7086:	4240      	negs	r0, r0
    7088:	2301      	movs	r3, #1
    708a:	4318      	orrs	r0, r3
    708c:	e7d3      	b.n	7036 <__gedf2+0x8a>
    708e:	4662      	mov	r2, ip
    7090:	4250      	negs	r0, r2
    7092:	2301      	movs	r3, #1
    7094:	4318      	orrs	r0, r3
    7096:	e7ce      	b.n	7036 <__gedf2+0x8a>
    7098:	45d0      	cmp	r8, sl
    709a:	d8f8      	bhi.n	708e <__gedf2+0xe2>
    709c:	2000      	movs	r0, #0
    709e:	45d0      	cmp	r8, sl
    70a0:	d3ee      	bcc.n	7080 <__gedf2+0xd4>
    70a2:	e7c8      	b.n	7036 <__gedf2+0x8a>
    70a4:	000007ff 	.word	0x000007ff

000070a8 <__ledf2>:
    70a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70aa:	4656      	mov	r6, sl
    70ac:	464d      	mov	r5, r9
    70ae:	4644      	mov	r4, r8
    70b0:	465f      	mov	r7, fp
    70b2:	b4f0      	push	{r4, r5, r6, r7}
    70b4:	1c0d      	adds	r5, r1, #0
    70b6:	b083      	sub	sp, #12
    70b8:	1c04      	adds	r4, r0, #0
    70ba:	9001      	str	r0, [sp, #4]
    70bc:	0fe8      	lsrs	r0, r5, #31
    70be:	4681      	mov	r9, r0
    70c0:	0318      	lsls	r0, r3, #12
    70c2:	030f      	lsls	r7, r1, #12
    70c4:	0b00      	lsrs	r0, r0, #12
    70c6:	0b3f      	lsrs	r7, r7, #12
    70c8:	4684      	mov	ip, r0
    70ca:	4835      	ldr	r0, [pc, #212]	; (71a0 <__ledf2+0xf8>)
    70cc:	9700      	str	r7, [sp, #0]
    70ce:	0049      	lsls	r1, r1, #1
    70d0:	005e      	lsls	r6, r3, #1
    70d2:	0fdf      	lsrs	r7, r3, #31
    70d4:	0d49      	lsrs	r1, r1, #21
    70d6:	4692      	mov	sl, r2
    70d8:	0d76      	lsrs	r6, r6, #21
    70da:	46b8      	mov	r8, r7
    70dc:	4281      	cmp	r1, r0
    70de:	d034      	beq.n	714a <__ledf2+0xa2>
    70e0:	482f      	ldr	r0, [pc, #188]	; (71a0 <__ledf2+0xf8>)
    70e2:	4286      	cmp	r6, r0
    70e4:	d036      	beq.n	7154 <__ledf2+0xac>
    70e6:	2900      	cmp	r1, #0
    70e8:	d018      	beq.n	711c <__ledf2+0x74>
    70ea:	2e00      	cmp	r6, #0
    70ec:	d11f      	bne.n	712e <__ledf2+0x86>
    70ee:	1c34      	adds	r4, r6, #0
    70f0:	4667      	mov	r7, ip
    70f2:	433a      	orrs	r2, r7
    70f4:	4253      	negs	r3, r2
    70f6:	4153      	adcs	r3, r2
    70f8:	2c00      	cmp	r4, #0
    70fa:	d01f      	beq.n	713c <__ledf2+0x94>
    70fc:	2000      	movs	r0, #0
    70fe:	2b00      	cmp	r3, #0
    7100:	d105      	bne.n	710e <__ledf2+0x66>
    7102:	4642      	mov	r2, r8
    7104:	4250      	negs	r0, r2
    7106:	4150      	adcs	r0, r2
    7108:	4240      	negs	r0, r0
    710a:	2301      	movs	r3, #1
    710c:	4318      	orrs	r0, r3
    710e:	b003      	add	sp, #12
    7110:	bc3c      	pop	{r2, r3, r4, r5}
    7112:	4690      	mov	r8, r2
    7114:	4699      	mov	r9, r3
    7116:	46a2      	mov	sl, r4
    7118:	46ab      	mov	fp, r5
    711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    711c:	9800      	ldr	r0, [sp, #0]
    711e:	4304      	orrs	r4, r0
    7120:	4260      	negs	r0, r4
    7122:	4160      	adcs	r0, r4
    7124:	1c04      	adds	r4, r0, #0
    7126:	2e00      	cmp	r6, #0
    7128:	d0e2      	beq.n	70f0 <__ledf2+0x48>
    712a:	2800      	cmp	r0, #0
    712c:	d1e9      	bne.n	7102 <__ledf2+0x5a>
    712e:	45c1      	cmp	r9, r8
    7130:	d015      	beq.n	715e <__ledf2+0xb6>
    7132:	464f      	mov	r7, r9
    7134:	4278      	negs	r0, r7
    7136:	2301      	movs	r3, #1
    7138:	4318      	orrs	r0, r3
    713a:	e7e8      	b.n	710e <__ledf2+0x66>
    713c:	2b00      	cmp	r3, #0
    713e:	d0f6      	beq.n	712e <__ledf2+0x86>
    7140:	464b      	mov	r3, r9
    7142:	4258      	negs	r0, r3
    7144:	2301      	movs	r3, #1
    7146:	4318      	orrs	r0, r3
    7148:	e7e1      	b.n	710e <__ledf2+0x66>
    714a:	9f00      	ldr	r7, [sp, #0]
    714c:	2002      	movs	r0, #2
    714e:	4327      	orrs	r7, r4
    7150:	d1dd      	bne.n	710e <__ledf2+0x66>
    7152:	e7c5      	b.n	70e0 <__ledf2+0x38>
    7154:	4667      	mov	r7, ip
    7156:	2002      	movs	r0, #2
    7158:	4317      	orrs	r7, r2
    715a:	d1d8      	bne.n	710e <__ledf2+0x66>
    715c:	e7c3      	b.n	70e6 <__ledf2+0x3e>
    715e:	42b1      	cmp	r1, r6
    7160:	dd04      	ble.n	716c <__ledf2+0xc4>
    7162:	464a      	mov	r2, r9
    7164:	4250      	negs	r0, r2
    7166:	2301      	movs	r3, #1
    7168:	4318      	orrs	r0, r3
    716a:	e7d0      	b.n	710e <__ledf2+0x66>
    716c:	42b1      	cmp	r1, r6
    716e:	db07      	blt.n	7180 <__ledf2+0xd8>
    7170:	9800      	ldr	r0, [sp, #0]
    7172:	4560      	cmp	r0, ip
    7174:	d8e4      	bhi.n	7140 <__ledf2+0x98>
    7176:	d00a      	beq.n	718e <__ledf2+0xe6>
    7178:	9f00      	ldr	r7, [sp, #0]
    717a:	2000      	movs	r0, #0
    717c:	4567      	cmp	r7, ip
    717e:	d2c6      	bcs.n	710e <__ledf2+0x66>
    7180:	464f      	mov	r7, r9
    7182:	4278      	negs	r0, r7
    7184:	4178      	adcs	r0, r7
    7186:	4240      	negs	r0, r0
    7188:	2301      	movs	r3, #1
    718a:	4318      	orrs	r0, r3
    718c:	e7bf      	b.n	710e <__ledf2+0x66>
    718e:	9a01      	ldr	r2, [sp, #4]
    7190:	4552      	cmp	r2, sl
    7192:	d8d5      	bhi.n	7140 <__ledf2+0x98>
    7194:	9a01      	ldr	r2, [sp, #4]
    7196:	2000      	movs	r0, #0
    7198:	4552      	cmp	r2, sl
    719a:	d3f1      	bcc.n	7180 <__ledf2+0xd8>
    719c:	e7b7      	b.n	710e <__ledf2+0x66>
    719e:	46c0      	nop			; (mov r8, r8)
    71a0:	000007ff 	.word	0x000007ff

000071a4 <__assert_func>:
    71a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    71a6:	1c06      	adds	r6, r0, #0
    71a8:	4809      	ldr	r0, [pc, #36]	; (71d0 <__assert_func+0x2c>)
    71aa:	6800      	ldr	r0, [r0, #0]
    71ac:	68c0      	ldr	r0, [r0, #12]
    71ae:	2a00      	cmp	r2, #0
    71b0:	d002      	beq.n	71b8 <__assert_func+0x14>
    71b2:	1c15      	adds	r5, r2, #0
    71b4:	4c07      	ldr	r4, [pc, #28]	; (71d4 <__assert_func+0x30>)
    71b6:	e001      	b.n	71bc <__assert_func+0x18>
    71b8:	4c07      	ldr	r4, [pc, #28]	; (71d8 <__assert_func+0x34>)
    71ba:	1c25      	adds	r5, r4, #0
    71bc:	1c1a      	adds	r2, r3, #0
    71be:	9100      	str	r1, [sp, #0]
    71c0:	1c33      	adds	r3, r6, #0
    71c2:	4906      	ldr	r1, [pc, #24]	; (71dc <__assert_func+0x38>)
    71c4:	9401      	str	r4, [sp, #4]
    71c6:	9502      	str	r5, [sp, #8]
    71c8:	f000 f810 	bl	71ec <fiprintf>
    71cc:	f000 ff58 	bl	8080 <abort>
    71d0:	20000474 	.word	0x20000474
    71d4:	00009348 	.word	0x00009348
    71d8:	00009383 	.word	0x00009383
    71dc:	00009355 	.word	0x00009355

000071e0 <atoi>:
    71e0:	b508      	push	{r3, lr}
    71e2:	2100      	movs	r1, #0
    71e4:	220a      	movs	r2, #10
    71e6:	f000 fa69 	bl	76bc <strtol>
    71ea:	bd08      	pop	{r3, pc}

000071ec <fiprintf>:
    71ec:	b40e      	push	{r1, r2, r3}
    71ee:	b503      	push	{r0, r1, lr}
    71f0:	ab03      	add	r3, sp, #12
    71f2:	cb04      	ldmia	r3!, {r2}
    71f4:	4a05      	ldr	r2, [pc, #20]	; (720c <fiprintf+0x20>)
    71f6:	1c01      	adds	r1, r0, #0
    71f8:	6810      	ldr	r0, [r2, #0]
    71fa:	9a03      	ldr	r2, [sp, #12]
    71fc:	9301      	str	r3, [sp, #4]
    71fe:	f000 fbe3 	bl	79c8 <_vfiprintf_r>
    7202:	b002      	add	sp, #8
    7204:	bc08      	pop	{r3}
    7206:	b003      	add	sp, #12
    7208:	4718      	bx	r3
    720a:	46c0      	nop			; (mov r8, r8)
    720c:	20000474 	.word	0x20000474

00007210 <__libc_init_array>:
    7210:	b570      	push	{r4, r5, r6, lr}
    7212:	4b0e      	ldr	r3, [pc, #56]	; (724c <__libc_init_array+0x3c>)
    7214:	4d0e      	ldr	r5, [pc, #56]	; (7250 <__libc_init_array+0x40>)
    7216:	2400      	movs	r4, #0
    7218:	1aed      	subs	r5, r5, r3
    721a:	10ad      	asrs	r5, r5, #2
    721c:	1c1e      	adds	r6, r3, #0
    721e:	42ac      	cmp	r4, r5
    7220:	d004      	beq.n	722c <__libc_init_array+0x1c>
    7222:	00a3      	lsls	r3, r4, #2
    7224:	58f3      	ldr	r3, [r6, r3]
    7226:	4798      	blx	r3
    7228:	3401      	adds	r4, #1
    722a:	e7f8      	b.n	721e <__libc_init_array+0xe>
    722c:	f002 f978 	bl	9520 <_init>
    7230:	4b08      	ldr	r3, [pc, #32]	; (7254 <__libc_init_array+0x44>)
    7232:	4d09      	ldr	r5, [pc, #36]	; (7258 <__libc_init_array+0x48>)
    7234:	2400      	movs	r4, #0
    7236:	1aed      	subs	r5, r5, r3
    7238:	10ad      	asrs	r5, r5, #2
    723a:	1c1e      	adds	r6, r3, #0
    723c:	42ac      	cmp	r4, r5
    723e:	d004      	beq.n	724a <__libc_init_array+0x3a>
    7240:	00a3      	lsls	r3, r4, #2
    7242:	58f3      	ldr	r3, [r6, r3]
    7244:	4798      	blx	r3
    7246:	3401      	adds	r4, #1
    7248:	e7f8      	b.n	723c <__libc_init_array+0x2c>
    724a:	bd70      	pop	{r4, r5, r6, pc}
    724c:	0000952c 	.word	0x0000952c
    7250:	0000952c 	.word	0x0000952c
    7254:	0000952c 	.word	0x0000952c
    7258:	00009530 	.word	0x00009530

0000725c <memcpy>:
    725c:	b510      	push	{r4, lr}
    725e:	2300      	movs	r3, #0
    7260:	4293      	cmp	r3, r2
    7262:	d003      	beq.n	726c <memcpy+0x10>
    7264:	5ccc      	ldrb	r4, [r1, r3]
    7266:	54c4      	strb	r4, [r0, r3]
    7268:	3301      	adds	r3, #1
    726a:	e7f9      	b.n	7260 <memcpy+0x4>
    726c:	bd10      	pop	{r4, pc}

0000726e <memset>:
    726e:	1c03      	adds	r3, r0, #0
    7270:	1882      	adds	r2, r0, r2
    7272:	4293      	cmp	r3, r2
    7274:	d002      	beq.n	727c <memset+0xe>
    7276:	7019      	strb	r1, [r3, #0]
    7278:	3301      	adds	r3, #1
    727a:	e7fa      	b.n	7272 <memset+0x4>
    727c:	4770      	bx	lr
	...

00007280 <iprintf>:
    7280:	b40f      	push	{r0, r1, r2, r3}
    7282:	4b0b      	ldr	r3, [pc, #44]	; (72b0 <iprintf+0x30>)
    7284:	b513      	push	{r0, r1, r4, lr}
    7286:	681c      	ldr	r4, [r3, #0]
    7288:	2c00      	cmp	r4, #0
    728a:	d005      	beq.n	7298 <iprintf+0x18>
    728c:	69a3      	ldr	r3, [r4, #24]
    728e:	2b00      	cmp	r3, #0
    7290:	d102      	bne.n	7298 <iprintf+0x18>
    7292:	1c20      	adds	r0, r4, #0
    7294:	f001 f804 	bl	82a0 <__sinit>
    7298:	ab05      	add	r3, sp, #20
    729a:	68a1      	ldr	r1, [r4, #8]
    729c:	1c20      	adds	r0, r4, #0
    729e:	9a04      	ldr	r2, [sp, #16]
    72a0:	9301      	str	r3, [sp, #4]
    72a2:	f000 fb91 	bl	79c8 <_vfiprintf_r>
    72a6:	bc16      	pop	{r1, r2, r4}
    72a8:	bc08      	pop	{r3}
    72aa:	b004      	add	sp, #16
    72ac:	4718      	bx	r3
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	20000474 	.word	0x20000474

000072b4 <_puts_r>:
    72b4:	b570      	push	{r4, r5, r6, lr}
    72b6:	1c05      	adds	r5, r0, #0
    72b8:	1c0e      	adds	r6, r1, #0
    72ba:	2800      	cmp	r0, #0
    72bc:	d004      	beq.n	72c8 <_puts_r+0x14>
    72be:	6982      	ldr	r2, [r0, #24]
    72c0:	2a00      	cmp	r2, #0
    72c2:	d101      	bne.n	72c8 <_puts_r+0x14>
    72c4:	f000 ffec 	bl	82a0 <__sinit>
    72c8:	68ac      	ldr	r4, [r5, #8]
    72ca:	89a3      	ldrh	r3, [r4, #12]
    72cc:	071a      	lsls	r2, r3, #28
    72ce:	d502      	bpl.n	72d6 <_puts_r+0x22>
    72d0:	6923      	ldr	r3, [r4, #16]
    72d2:	2b00      	cmp	r3, #0
    72d4:	d119      	bne.n	730a <_puts_r+0x56>
    72d6:	1c28      	adds	r0, r5, #0
    72d8:	1c21      	adds	r1, r4, #0
    72da:	f000 fe5f 	bl	7f9c <__swsetup_r>
    72de:	2800      	cmp	r0, #0
    72e0:	d013      	beq.n	730a <_puts_r+0x56>
    72e2:	2001      	movs	r0, #1
    72e4:	4240      	negs	r0, r0
    72e6:	e045      	b.n	7374 <_puts_r+0xc0>
    72e8:	7831      	ldrb	r1, [r6, #0]
    72ea:	2b00      	cmp	r3, #0
    72ec:	da1b      	bge.n	7326 <_puts_r+0x72>
    72ee:	69a2      	ldr	r2, [r4, #24]
    72f0:	4293      	cmp	r3, r2
    72f2:	da11      	bge.n	7318 <_puts_r+0x64>
    72f4:	1c28      	adds	r0, r5, #0
    72f6:	1c22      	adds	r2, r4, #0
    72f8:	f000 fdf8 	bl	7eec <__swbuf_r>
    72fc:	3001      	adds	r0, #1
    72fe:	4243      	negs	r3, r0
    7300:	4158      	adcs	r0, r3
    7302:	b2c0      	uxtb	r0, r0
    7304:	2800      	cmp	r0, #0
    7306:	d1ec      	bne.n	72e2 <_puts_r+0x2e>
    7308:	3601      	adds	r6, #1
    730a:	68a3      	ldr	r3, [r4, #8]
    730c:	7832      	ldrb	r2, [r6, #0]
    730e:	3b01      	subs	r3, #1
    7310:	60a3      	str	r3, [r4, #8]
    7312:	2a00      	cmp	r2, #0
    7314:	d1e8      	bne.n	72e8 <_puts_r+0x34>
    7316:	e00c      	b.n	7332 <_puts_r+0x7e>
    7318:	6823      	ldr	r3, [r4, #0]
    731a:	7019      	strb	r1, [r3, #0]
    731c:	6823      	ldr	r3, [r4, #0]
    731e:	7819      	ldrb	r1, [r3, #0]
    7320:	290a      	cmp	r1, #10
    7322:	d103      	bne.n	732c <_puts_r+0x78>
    7324:	e7e6      	b.n	72f4 <_puts_r+0x40>
    7326:	6822      	ldr	r2, [r4, #0]
    7328:	7011      	strb	r1, [r2, #0]
    732a:	6823      	ldr	r3, [r4, #0]
    732c:	3301      	adds	r3, #1
    732e:	6023      	str	r3, [r4, #0]
    7330:	e7ea      	b.n	7308 <_puts_r+0x54>
    7332:	2b00      	cmp	r3, #0
    7334:	da17      	bge.n	7366 <_puts_r+0xb2>
    7336:	69a2      	ldr	r2, [r4, #24]
    7338:	4293      	cmp	r3, r2
    733a:	db08      	blt.n	734e <_puts_r+0x9a>
    733c:	6822      	ldr	r2, [r4, #0]
    733e:	230a      	movs	r3, #10
    7340:	7013      	strb	r3, [r2, #0]
    7342:	6823      	ldr	r3, [r4, #0]
    7344:	7819      	ldrb	r1, [r3, #0]
    7346:	290a      	cmp	r1, #10
    7348:	d111      	bne.n	736e <_puts_r+0xba>
    734a:	1c28      	adds	r0, r5, #0
    734c:	e001      	b.n	7352 <_puts_r+0x9e>
    734e:	1c28      	adds	r0, r5, #0
    7350:	210a      	movs	r1, #10
    7352:	1c22      	adds	r2, r4, #0
    7354:	f000 fdca 	bl	7eec <__swbuf_r>
    7358:	3001      	adds	r0, #1
    735a:	4243      	negs	r3, r0
    735c:	4158      	adcs	r0, r3
    735e:	b2c0      	uxtb	r0, r0
    7360:	2800      	cmp	r0, #0
    7362:	d006      	beq.n	7372 <_puts_r+0xbe>
    7364:	e7bd      	b.n	72e2 <_puts_r+0x2e>
    7366:	6822      	ldr	r2, [r4, #0]
    7368:	230a      	movs	r3, #10
    736a:	7013      	strb	r3, [r2, #0]
    736c:	6823      	ldr	r3, [r4, #0]
    736e:	3301      	adds	r3, #1
    7370:	6023      	str	r3, [r4, #0]
    7372:	200a      	movs	r0, #10
    7374:	bd70      	pop	{r4, r5, r6, pc}
	...

00007378 <puts>:
    7378:	b508      	push	{r3, lr}
    737a:	4b03      	ldr	r3, [pc, #12]	; (7388 <puts+0x10>)
    737c:	1c01      	adds	r1, r0, #0
    737e:	6818      	ldr	r0, [r3, #0]
    7380:	f7ff ff98 	bl	72b4 <_puts_r>
    7384:	bd08      	pop	{r3, pc}
    7386:	46c0      	nop			; (mov r8, r8)
    7388:	20000474 	.word	0x20000474

0000738c <setbuf>:
    738c:	b508      	push	{r3, lr}
    738e:	424a      	negs	r2, r1
    7390:	414a      	adcs	r2, r1
    7392:	2380      	movs	r3, #128	; 0x80
    7394:	0052      	lsls	r2, r2, #1
    7396:	00db      	lsls	r3, r3, #3
    7398:	f000 f802 	bl	73a0 <setvbuf>
    739c:	bd08      	pop	{r3, pc}
	...

000073a0 <setvbuf>:
    73a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    73a2:	1c1e      	adds	r6, r3, #0
    73a4:	4b3c      	ldr	r3, [pc, #240]	; (7498 <setvbuf+0xf8>)
    73a6:	1c04      	adds	r4, r0, #0
    73a8:	681d      	ldr	r5, [r3, #0]
    73aa:	1c0f      	adds	r7, r1, #0
    73ac:	9201      	str	r2, [sp, #4]
    73ae:	2d00      	cmp	r5, #0
    73b0:	d005      	beq.n	73be <setvbuf+0x1e>
    73b2:	69aa      	ldr	r2, [r5, #24]
    73b4:	2a00      	cmp	r2, #0
    73b6:	d102      	bne.n	73be <setvbuf+0x1e>
    73b8:	1c28      	adds	r0, r5, #0
    73ba:	f000 ff71 	bl	82a0 <__sinit>
    73be:	4b37      	ldr	r3, [pc, #220]	; (749c <setvbuf+0xfc>)
    73c0:	429c      	cmp	r4, r3
    73c2:	d101      	bne.n	73c8 <setvbuf+0x28>
    73c4:	686c      	ldr	r4, [r5, #4]
    73c6:	e008      	b.n	73da <setvbuf+0x3a>
    73c8:	4b35      	ldr	r3, [pc, #212]	; (74a0 <setvbuf+0x100>)
    73ca:	429c      	cmp	r4, r3
    73cc:	d101      	bne.n	73d2 <setvbuf+0x32>
    73ce:	68ac      	ldr	r4, [r5, #8]
    73d0:	e003      	b.n	73da <setvbuf+0x3a>
    73d2:	4b34      	ldr	r3, [pc, #208]	; (74a4 <setvbuf+0x104>)
    73d4:	429c      	cmp	r4, r3
    73d6:	d100      	bne.n	73da <setvbuf+0x3a>
    73d8:	68ec      	ldr	r4, [r5, #12]
    73da:	9b01      	ldr	r3, [sp, #4]
    73dc:	2b02      	cmp	r3, #2
    73de:	d857      	bhi.n	7490 <setvbuf+0xf0>
    73e0:	2e00      	cmp	r6, #0
    73e2:	db55      	blt.n	7490 <setvbuf+0xf0>
    73e4:	1c28      	adds	r0, r5, #0
    73e6:	1c21      	adds	r1, r4, #0
    73e8:	f000 feda 	bl	81a0 <_fflush_r>
    73ec:	2300      	movs	r3, #0
    73ee:	6063      	str	r3, [r4, #4]
    73f0:	61a3      	str	r3, [r4, #24]
    73f2:	89a3      	ldrh	r3, [r4, #12]
    73f4:	061a      	lsls	r2, r3, #24
    73f6:	d503      	bpl.n	7400 <setvbuf+0x60>
    73f8:	1c28      	adds	r0, r5, #0
    73fa:	6921      	ldr	r1, [r4, #16]
    73fc:	f001 f83e 	bl	847c <_free_r>
    7400:	89a3      	ldrh	r3, [r4, #12]
    7402:	2283      	movs	r2, #131	; 0x83
    7404:	4393      	bics	r3, r2
    7406:	81a3      	strh	r3, [r4, #12]
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	2b02      	cmp	r3, #2
    740c:	d013      	beq.n	7436 <setvbuf+0x96>
    740e:	2f00      	cmp	r7, #0
    7410:	d125      	bne.n	745e <setvbuf+0xbe>
    7412:	2e00      	cmp	r6, #0
    7414:	d101      	bne.n	741a <setvbuf+0x7a>
    7416:	2680      	movs	r6, #128	; 0x80
    7418:	00f6      	lsls	r6, r6, #3
    741a:	1c30      	adds	r0, r6, #0
    741c:	f001 f800 	bl	8420 <malloc>
    7420:	1e07      	subs	r7, r0, #0
    7422:	d118      	bne.n	7456 <setvbuf+0xb6>
    7424:	2080      	movs	r0, #128	; 0x80
    7426:	00c0      	lsls	r0, r0, #3
    7428:	f000 fffa 	bl	8420 <malloc>
    742c:	1e07      	subs	r7, r0, #0
    742e:	d110      	bne.n	7452 <setvbuf+0xb2>
    7430:	2001      	movs	r0, #1
    7432:	4240      	negs	r0, r0
    7434:	e000      	b.n	7438 <setvbuf+0x98>
    7436:	2000      	movs	r0, #0
    7438:	89a3      	ldrh	r3, [r4, #12]
    743a:	2202      	movs	r2, #2
    743c:	4313      	orrs	r3, r2
    743e:	81a3      	strh	r3, [r4, #12]
    7440:	2300      	movs	r3, #0
    7442:	60a3      	str	r3, [r4, #8]
    7444:	1c23      	adds	r3, r4, #0
    7446:	3347      	adds	r3, #71	; 0x47
    7448:	6023      	str	r3, [r4, #0]
    744a:	6123      	str	r3, [r4, #16]
    744c:	2301      	movs	r3, #1
    744e:	6163      	str	r3, [r4, #20]
    7450:	e020      	b.n	7494 <setvbuf+0xf4>
    7452:	2680      	movs	r6, #128	; 0x80
    7454:	00f6      	lsls	r6, r6, #3
    7456:	89a3      	ldrh	r3, [r4, #12]
    7458:	2280      	movs	r2, #128	; 0x80
    745a:	4313      	orrs	r3, r2
    745c:	81a3      	strh	r3, [r4, #12]
    745e:	9a01      	ldr	r2, [sp, #4]
    7460:	2a01      	cmp	r2, #1
    7462:	d104      	bne.n	746e <setvbuf+0xce>
    7464:	89a3      	ldrh	r3, [r4, #12]
    7466:	4313      	orrs	r3, r2
    7468:	81a3      	strh	r3, [r4, #12]
    746a:	4273      	negs	r3, r6
    746c:	61a3      	str	r3, [r4, #24]
    746e:	4b0e      	ldr	r3, [pc, #56]	; (74a8 <setvbuf+0x108>)
    7470:	2000      	movs	r0, #0
    7472:	62ab      	str	r3, [r5, #40]	; 0x28
    7474:	89a3      	ldrh	r3, [r4, #12]
    7476:	6027      	str	r7, [r4, #0]
    7478:	6127      	str	r7, [r4, #16]
    747a:	6166      	str	r6, [r4, #20]
    747c:	071a      	lsls	r2, r3, #28
    747e:	d509      	bpl.n	7494 <setvbuf+0xf4>
    7480:	2203      	movs	r2, #3
    7482:	4013      	ands	r3, r2
    7484:	425a      	negs	r2, r3
    7486:	4153      	adcs	r3, r2
    7488:	425b      	negs	r3, r3
    748a:	401e      	ands	r6, r3
    748c:	60a6      	str	r6, [r4, #8]
    748e:	e001      	b.n	7494 <setvbuf+0xf4>
    7490:	2001      	movs	r0, #1
    7492:	4240      	negs	r0, r0
    7494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	20000474 	.word	0x20000474
    749c:	000094c0 	.word	0x000094c0
    74a0:	000094e0 	.word	0x000094e0
    74a4:	00009500 	.word	0x00009500
    74a8:	000081f9 	.word	0x000081f9

000074ac <sniprintf>:
    74ac:	b40c      	push	{r2, r3}
    74ae:	b530      	push	{r4, r5, lr}
    74b0:	4b16      	ldr	r3, [pc, #88]	; (750c <sniprintf+0x60>)
    74b2:	b09d      	sub	sp, #116	; 0x74
    74b4:	1c0c      	adds	r4, r1, #0
    74b6:	681d      	ldr	r5, [r3, #0]
    74b8:	d504      	bpl.n	74c4 <sniprintf+0x18>
    74ba:	238b      	movs	r3, #139	; 0x8b
    74bc:	2001      	movs	r0, #1
    74be:	602b      	str	r3, [r5, #0]
    74c0:	4240      	negs	r0, r0
    74c2:	e01d      	b.n	7500 <sniprintf+0x54>
    74c4:	2382      	movs	r3, #130	; 0x82
    74c6:	a902      	add	r1, sp, #8
    74c8:	009b      	lsls	r3, r3, #2
    74ca:	818b      	strh	r3, [r1, #12]
    74cc:	2300      	movs	r3, #0
    74ce:	9002      	str	r0, [sp, #8]
    74d0:	6108      	str	r0, [r1, #16]
    74d2:	429c      	cmp	r4, r3
    74d4:	d000      	beq.n	74d8 <sniprintf+0x2c>
    74d6:	1e63      	subs	r3, r4, #1
    74d8:	608b      	str	r3, [r1, #8]
    74da:	614b      	str	r3, [r1, #20]
    74dc:	2301      	movs	r3, #1
    74de:	425b      	negs	r3, r3
    74e0:	81cb      	strh	r3, [r1, #14]
    74e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    74e4:	ab21      	add	r3, sp, #132	; 0x84
    74e6:	1c28      	adds	r0, r5, #0
    74e8:	9301      	str	r3, [sp, #4]
    74ea:	f000 f955 	bl	7798 <_svfiprintf_r>
    74ee:	1c42      	adds	r2, r0, #1
    74f0:	da01      	bge.n	74f6 <sniprintf+0x4a>
    74f2:	238b      	movs	r3, #139	; 0x8b
    74f4:	602b      	str	r3, [r5, #0]
    74f6:	2c00      	cmp	r4, #0
    74f8:	d002      	beq.n	7500 <sniprintf+0x54>
    74fa:	9a02      	ldr	r2, [sp, #8]
    74fc:	2300      	movs	r3, #0
    74fe:	7013      	strb	r3, [r2, #0]
    7500:	b01d      	add	sp, #116	; 0x74
    7502:	bc30      	pop	{r4, r5}
    7504:	bc08      	pop	{r3}
    7506:	b002      	add	sp, #8
    7508:	4718      	bx	r3
    750a:	46c0      	nop			; (mov r8, r8)
    750c:	20000474 	.word	0x20000474

00007510 <siprintf>:
    7510:	b40e      	push	{r1, r2, r3}
    7512:	b500      	push	{lr}
    7514:	b09c      	sub	sp, #112	; 0x70
    7516:	ab1d      	add	r3, sp, #116	; 0x74
    7518:	cb04      	ldmia	r3!, {r2}
    751a:	2282      	movs	r2, #130	; 0x82
    751c:	a902      	add	r1, sp, #8
    751e:	0092      	lsls	r2, r2, #2
    7520:	818a      	strh	r2, [r1, #12]
    7522:	4a0a      	ldr	r2, [pc, #40]	; (754c <siprintf+0x3c>)
    7524:	9002      	str	r0, [sp, #8]
    7526:	608a      	str	r2, [r1, #8]
    7528:	614a      	str	r2, [r1, #20]
    752a:	2201      	movs	r2, #1
    752c:	4252      	negs	r2, r2
    752e:	81ca      	strh	r2, [r1, #14]
    7530:	4a07      	ldr	r2, [pc, #28]	; (7550 <siprintf+0x40>)
    7532:	6108      	str	r0, [r1, #16]
    7534:	6810      	ldr	r0, [r2, #0]
    7536:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    7538:	9301      	str	r3, [sp, #4]
    753a:	f000 f92d 	bl	7798 <_svfiprintf_r>
    753e:	9a02      	ldr	r2, [sp, #8]
    7540:	2300      	movs	r3, #0
    7542:	7013      	strb	r3, [r2, #0]
    7544:	b01c      	add	sp, #112	; 0x70
    7546:	bc08      	pop	{r3}
    7548:	b003      	add	sp, #12
    754a:	4718      	bx	r3
    754c:	7fffffff 	.word	0x7fffffff
    7550:	20000474 	.word	0x20000474

00007554 <strcmp>:
    7554:	7802      	ldrb	r2, [r0, #0]
    7556:	780b      	ldrb	r3, [r1, #0]
    7558:	3001      	adds	r0, #1
    755a:	3101      	adds	r1, #1
    755c:	2a00      	cmp	r2, #0
    755e:	d001      	beq.n	7564 <strcmp+0x10>
    7560:	429a      	cmp	r2, r3
    7562:	d0f7      	beq.n	7554 <strcmp>
    7564:	1ad0      	subs	r0, r2, r3
    7566:	4770      	bx	lr

00007568 <strcpy>:
    7568:	1c03      	adds	r3, r0, #0
    756a:	780a      	ldrb	r2, [r1, #0]
    756c:	3101      	adds	r1, #1
    756e:	701a      	strb	r2, [r3, #0]
    7570:	3301      	adds	r3, #1
    7572:	2a00      	cmp	r2, #0
    7574:	d1f9      	bne.n	756a <strcpy+0x2>
    7576:	4770      	bx	lr

00007578 <strlen>:
    7578:	2300      	movs	r3, #0
    757a:	5cc2      	ldrb	r2, [r0, r3]
    757c:	3301      	adds	r3, #1
    757e:	2a00      	cmp	r2, #0
    7580:	d1fb      	bne.n	757a <strlen+0x2>
    7582:	1e58      	subs	r0, r3, #1
    7584:	4770      	bx	lr

00007586 <strspn>:
    7586:	b530      	push	{r4, r5, lr}
    7588:	1c03      	adds	r3, r0, #0
    758a:	781c      	ldrb	r4, [r3, #0]
    758c:	2c00      	cmp	r4, #0
    758e:	d101      	bne.n	7594 <strspn+0xe>
    7590:	1a18      	subs	r0, r3, r0
    7592:	bd30      	pop	{r4, r5, pc}
    7594:	1c0a      	adds	r2, r1, #0
    7596:	7815      	ldrb	r5, [r2, #0]
    7598:	2d00      	cmp	r5, #0
    759a:	d0f9      	beq.n	7590 <strspn+0xa>
    759c:	42ac      	cmp	r4, r5
    759e:	d001      	beq.n	75a4 <strspn+0x1e>
    75a0:	3201      	adds	r2, #1
    75a2:	e7f8      	b.n	7596 <strspn+0x10>
    75a4:	3301      	adds	r3, #1
    75a6:	e7f0      	b.n	758a <strspn+0x4>

000075a8 <_strtol_r>:
    75a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75aa:	1c1d      	adds	r5, r3, #0
    75ac:	4b42      	ldr	r3, [pc, #264]	; (76b8 <_strtol_r+0x110>)
    75ae:	b087      	sub	sp, #28
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	9005      	str	r0, [sp, #20]
    75b4:	9302      	str	r3, [sp, #8]
    75b6:	9103      	str	r1, [sp, #12]
    75b8:	9201      	str	r2, [sp, #4]
    75ba:	1c0b      	adds	r3, r1, #0
    75bc:	781c      	ldrb	r4, [r3, #0]
    75be:	9f02      	ldr	r7, [sp, #8]
    75c0:	1c5e      	adds	r6, r3, #1
    75c2:	193a      	adds	r2, r7, r4
    75c4:	7851      	ldrb	r1, [r2, #1]
    75c6:	2208      	movs	r2, #8
    75c8:	400a      	ands	r2, r1
    75ca:	d001      	beq.n	75d0 <_strtol_r+0x28>
    75cc:	1c33      	adds	r3, r6, #0
    75ce:	e7f5      	b.n	75bc <_strtol_r+0x14>
    75d0:	2c2d      	cmp	r4, #45	; 0x2d
    75d2:	d104      	bne.n	75de <_strtol_r+0x36>
    75d4:	2701      	movs	r7, #1
    75d6:	1c9e      	adds	r6, r3, #2
    75d8:	785c      	ldrb	r4, [r3, #1]
    75da:	9700      	str	r7, [sp, #0]
    75dc:	e004      	b.n	75e8 <_strtol_r+0x40>
    75de:	9200      	str	r2, [sp, #0]
    75e0:	2c2b      	cmp	r4, #43	; 0x2b
    75e2:	d101      	bne.n	75e8 <_strtol_r+0x40>
    75e4:	785c      	ldrb	r4, [r3, #1]
    75e6:	1c9e      	adds	r6, r3, #2
    75e8:	2310      	movs	r3, #16
    75ea:	1c2a      	adds	r2, r5, #0
    75ec:	439a      	bics	r2, r3
    75ee:	d111      	bne.n	7614 <_strtol_r+0x6c>
    75f0:	2c30      	cmp	r4, #48	; 0x30
    75f2:	d108      	bne.n	7606 <_strtol_r+0x5e>
    75f4:	7832      	ldrb	r2, [r6, #0]
    75f6:	2120      	movs	r1, #32
    75f8:	438a      	bics	r2, r1
    75fa:	2a58      	cmp	r2, #88	; 0x58
    75fc:	d107      	bne.n	760e <_strtol_r+0x66>
    75fe:	7874      	ldrb	r4, [r6, #1]
    7600:	1c1d      	adds	r5, r3, #0
    7602:	3602      	adds	r6, #2
    7604:	e006      	b.n	7614 <_strtol_r+0x6c>
    7606:	2d00      	cmp	r5, #0
    7608:	d104      	bne.n	7614 <_strtol_r+0x6c>
    760a:	250a      	movs	r5, #10
    760c:	e002      	b.n	7614 <_strtol_r+0x6c>
    760e:	2d00      	cmp	r5, #0
    7610:	d100      	bne.n	7614 <_strtol_r+0x6c>
    7612:	2508      	movs	r5, #8
    7614:	9f00      	ldr	r7, [sp, #0]
    7616:	1c29      	adds	r1, r5, #0
    7618:	427b      	negs	r3, r7
    761a:	417b      	adcs	r3, r7
    761c:	2780      	movs	r7, #128	; 0x80
    761e:	063f      	lsls	r7, r7, #24
    7620:	1aff      	subs	r7, r7, r3
    7622:	1c38      	adds	r0, r7, #0
    7624:	f7fe fa14 	bl	5a50 <__aeabi_uidivmod>
    7628:	1c38      	adds	r0, r7, #0
    762a:	9104      	str	r1, [sp, #16]
    762c:	1c29      	adds	r1, r5, #0
    762e:	f7fe f9cb 	bl	59c8 <__aeabi_uidiv>
    7632:	2300      	movs	r3, #0
    7634:	1c02      	adds	r2, r0, #0
    7636:	1c18      	adds	r0, r3, #0
    7638:	9f02      	ldr	r7, [sp, #8]
    763a:	1939      	adds	r1, r7, r4
    763c:	7849      	ldrb	r1, [r1, #1]
    763e:	074f      	lsls	r7, r1, #29
    7640:	d501      	bpl.n	7646 <_strtol_r+0x9e>
    7642:	3c30      	subs	r4, #48	; 0x30
    7644:	e007      	b.n	7656 <_strtol_r+0xae>
    7646:	2703      	movs	r7, #3
    7648:	400f      	ands	r7, r1
    764a:	d017      	beq.n	767c <_strtol_r+0xd4>
    764c:	2157      	movs	r1, #87	; 0x57
    764e:	2f01      	cmp	r7, #1
    7650:	d100      	bne.n	7654 <_strtol_r+0xac>
    7652:	2137      	movs	r1, #55	; 0x37
    7654:	1a64      	subs	r4, r4, r1
    7656:	42ac      	cmp	r4, r5
    7658:	da10      	bge.n	767c <_strtol_r+0xd4>
    765a:	1c59      	adds	r1, r3, #1
    765c:	d00b      	beq.n	7676 <_strtol_r+0xce>
    765e:	4290      	cmp	r0, r2
    7660:	d807      	bhi.n	7672 <_strtol_r+0xca>
    7662:	d102      	bne.n	766a <_strtol_r+0xc2>
    7664:	9f04      	ldr	r7, [sp, #16]
    7666:	42bc      	cmp	r4, r7
    7668:	dc03      	bgt.n	7672 <_strtol_r+0xca>
    766a:	4368      	muls	r0, r5
    766c:	2301      	movs	r3, #1
    766e:	1820      	adds	r0, r4, r0
    7670:	e001      	b.n	7676 <_strtol_r+0xce>
    7672:	2301      	movs	r3, #1
    7674:	425b      	negs	r3, r3
    7676:	7834      	ldrb	r4, [r6, #0]
    7678:	3601      	adds	r6, #1
    767a:	e7dd      	b.n	7638 <_strtol_r+0x90>
    767c:	9f00      	ldr	r7, [sp, #0]
    767e:	1c59      	adds	r1, r3, #1
    7680:	d10b      	bne.n	769a <_strtol_r+0xf2>
    7682:	2080      	movs	r0, #128	; 0x80
    7684:	427b      	negs	r3, r7
    7686:	417b      	adcs	r3, r7
    7688:	0600      	lsls	r0, r0, #24
    768a:	9f05      	ldr	r7, [sp, #20]
    768c:	1ac0      	subs	r0, r0, r3
    768e:	2322      	movs	r3, #34	; 0x22
    7690:	603b      	str	r3, [r7, #0]
    7692:	9f01      	ldr	r7, [sp, #4]
    7694:	2f00      	cmp	r7, #0
    7696:	d109      	bne.n	76ac <_strtol_r+0x104>
    7698:	e00b      	b.n	76b2 <_strtol_r+0x10a>
    769a:	2f00      	cmp	r7, #0
    769c:	d000      	beq.n	76a0 <_strtol_r+0xf8>
    769e:	4240      	negs	r0, r0
    76a0:	9f01      	ldr	r7, [sp, #4]
    76a2:	2f00      	cmp	r7, #0
    76a4:	d005      	beq.n	76b2 <_strtol_r+0x10a>
    76a6:	9a03      	ldr	r2, [sp, #12]
    76a8:	2b00      	cmp	r3, #0
    76aa:	d000      	beq.n	76ae <_strtol_r+0x106>
    76ac:	1e72      	subs	r2, r6, #1
    76ae:	9f01      	ldr	r7, [sp, #4]
    76b0:	603a      	str	r2, [r7, #0]
    76b2:	b007      	add	sp, #28
    76b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76b6:	46c0      	nop			; (mov r8, r8)
    76b8:	20000478 	.word	0x20000478

000076bc <strtol>:
    76bc:	b538      	push	{r3, r4, r5, lr}
    76be:	1c13      	adds	r3, r2, #0
    76c0:	4a04      	ldr	r2, [pc, #16]	; (76d4 <strtol+0x18>)
    76c2:	1c05      	adds	r5, r0, #0
    76c4:	1c0c      	adds	r4, r1, #0
    76c6:	6810      	ldr	r0, [r2, #0]
    76c8:	1c29      	adds	r1, r5, #0
    76ca:	1c22      	adds	r2, r4, #0
    76cc:	f7ff ff6c 	bl	75a8 <_strtol_r>
    76d0:	bd38      	pop	{r3, r4, r5, pc}
    76d2:	46c0      	nop			; (mov r8, r8)
    76d4:	20000474 	.word	0x20000474

000076d8 <__ssputs_r>:
    76d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76da:	688d      	ldr	r5, [r1, #8]
    76dc:	b085      	sub	sp, #20
    76de:	1c07      	adds	r7, r0, #0
    76e0:	1c0c      	adds	r4, r1, #0
    76e2:	9203      	str	r2, [sp, #12]
    76e4:	9301      	str	r3, [sp, #4]
    76e6:	42ab      	cmp	r3, r5
    76e8:	d345      	bcc.n	7776 <__ssputs_r+0x9e>
    76ea:	2290      	movs	r2, #144	; 0x90
    76ec:	898b      	ldrh	r3, [r1, #12]
    76ee:	00d2      	lsls	r2, r2, #3
    76f0:	4213      	tst	r3, r2
    76f2:	d03d      	beq.n	7770 <__ssputs_r+0x98>
    76f4:	6962      	ldr	r2, [r4, #20]
    76f6:	2603      	movs	r6, #3
    76f8:	4356      	muls	r6, r2
    76fa:	6909      	ldr	r1, [r1, #16]
    76fc:	6820      	ldr	r0, [r4, #0]
    76fe:	0ff2      	lsrs	r2, r6, #31
    7700:	1a40      	subs	r0, r0, r1
    7702:	1996      	adds	r6, r2, r6
    7704:	9002      	str	r0, [sp, #8]
    7706:	1c02      	adds	r2, r0, #0
    7708:	9801      	ldr	r0, [sp, #4]
    770a:	3201      	adds	r2, #1
    770c:	1812      	adds	r2, r2, r0
    770e:	1076      	asrs	r6, r6, #1
    7710:	4296      	cmp	r6, r2
    7712:	d200      	bcs.n	7716 <__ssputs_r+0x3e>
    7714:	1c16      	adds	r6, r2, #0
    7716:	1c38      	adds	r0, r7, #0
    7718:	055a      	lsls	r2, r3, #21
    771a:	d50f      	bpl.n	773c <__ssputs_r+0x64>
    771c:	1c31      	adds	r1, r6, #0
    771e:	f000 fef5 	bl	850c <_malloc_r>
    7722:	1e05      	subs	r5, r0, #0
    7724:	d013      	beq.n	774e <__ssputs_r+0x76>
    7726:	9a02      	ldr	r2, [sp, #8]
    7728:	6921      	ldr	r1, [r4, #16]
    772a:	f7ff fd97 	bl	725c <memcpy>
    772e:	89a2      	ldrh	r2, [r4, #12]
    7730:	4b18      	ldr	r3, [pc, #96]	; (7794 <__ssputs_r+0xbc>)
    7732:	4013      	ands	r3, r2
    7734:	2280      	movs	r2, #128	; 0x80
    7736:	4313      	orrs	r3, r2
    7738:	81a3      	strh	r3, [r4, #12]
    773a:	e011      	b.n	7760 <__ssputs_r+0x88>
    773c:	1c32      	adds	r2, r6, #0
    773e:	f000 ff39 	bl	85b4 <_realloc_r>
    7742:	1e05      	subs	r5, r0, #0
    7744:	d10c      	bne.n	7760 <__ssputs_r+0x88>
    7746:	1c38      	adds	r0, r7, #0
    7748:	6921      	ldr	r1, [r4, #16]
    774a:	f000 fe97 	bl	847c <_free_r>
    774e:	230c      	movs	r3, #12
    7750:	603b      	str	r3, [r7, #0]
    7752:	89a3      	ldrh	r3, [r4, #12]
    7754:	2240      	movs	r2, #64	; 0x40
    7756:	4313      	orrs	r3, r2
    7758:	2001      	movs	r0, #1
    775a:	81a3      	strh	r3, [r4, #12]
    775c:	4240      	negs	r0, r0
    775e:	e017      	b.n	7790 <__ssputs_r+0xb8>
    7760:	9b02      	ldr	r3, [sp, #8]
    7762:	6125      	str	r5, [r4, #16]
    7764:	18ed      	adds	r5, r5, r3
    7766:	6025      	str	r5, [r4, #0]
    7768:	6166      	str	r6, [r4, #20]
    776a:	9d01      	ldr	r5, [sp, #4]
    776c:	1af6      	subs	r6, r6, r3
    776e:	60a6      	str	r6, [r4, #8]
    7770:	9801      	ldr	r0, [sp, #4]
    7772:	42a8      	cmp	r0, r5
    7774:	d200      	bcs.n	7778 <__ssputs_r+0xa0>
    7776:	9d01      	ldr	r5, [sp, #4]
    7778:	1c2a      	adds	r2, r5, #0
    777a:	6820      	ldr	r0, [r4, #0]
    777c:	9903      	ldr	r1, [sp, #12]
    777e:	f000 fe64 	bl	844a <memmove>
    7782:	68a2      	ldr	r2, [r4, #8]
    7784:	2000      	movs	r0, #0
    7786:	1b53      	subs	r3, r2, r5
    7788:	60a3      	str	r3, [r4, #8]
    778a:	6823      	ldr	r3, [r4, #0]
    778c:	195d      	adds	r5, r3, r5
    778e:	6025      	str	r5, [r4, #0]
    7790:	b005      	add	sp, #20
    7792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7794:	fffffb7f 	.word	0xfffffb7f

00007798 <_svfiprintf_r>:
    7798:	b5f0      	push	{r4, r5, r6, r7, lr}
    779a:	b09f      	sub	sp, #124	; 0x7c
    779c:	9003      	str	r0, [sp, #12]
    779e:	9305      	str	r3, [sp, #20]
    77a0:	898b      	ldrh	r3, [r1, #12]
    77a2:	1c0e      	adds	r6, r1, #0
    77a4:	1c17      	adds	r7, r2, #0
    77a6:	0619      	lsls	r1, r3, #24
    77a8:	d50f      	bpl.n	77ca <_svfiprintf_r+0x32>
    77aa:	6932      	ldr	r2, [r6, #16]
    77ac:	2a00      	cmp	r2, #0
    77ae:	d10c      	bne.n	77ca <_svfiprintf_r+0x32>
    77b0:	2140      	movs	r1, #64	; 0x40
    77b2:	f000 feab 	bl	850c <_malloc_r>
    77b6:	6030      	str	r0, [r6, #0]
    77b8:	6130      	str	r0, [r6, #16]
    77ba:	2800      	cmp	r0, #0
    77bc:	d103      	bne.n	77c6 <_svfiprintf_r+0x2e>
    77be:	9903      	ldr	r1, [sp, #12]
    77c0:	230c      	movs	r3, #12
    77c2:	600b      	str	r3, [r1, #0]
    77c4:	e0c9      	b.n	795a <_svfiprintf_r+0x1c2>
    77c6:	2340      	movs	r3, #64	; 0x40
    77c8:	6173      	str	r3, [r6, #20]
    77ca:	ad06      	add	r5, sp, #24
    77cc:	2300      	movs	r3, #0
    77ce:	616b      	str	r3, [r5, #20]
    77d0:	2320      	movs	r3, #32
    77d2:	766b      	strb	r3, [r5, #25]
    77d4:	2330      	movs	r3, #48	; 0x30
    77d6:	76ab      	strb	r3, [r5, #26]
    77d8:	1c3c      	adds	r4, r7, #0
    77da:	7823      	ldrb	r3, [r4, #0]
    77dc:	2b00      	cmp	r3, #0
    77de:	d103      	bne.n	77e8 <_svfiprintf_r+0x50>
    77e0:	1be2      	subs	r2, r4, r7
    77e2:	9202      	str	r2, [sp, #8]
    77e4:	d011      	beq.n	780a <_svfiprintf_r+0x72>
    77e6:	e003      	b.n	77f0 <_svfiprintf_r+0x58>
    77e8:	2b25      	cmp	r3, #37	; 0x25
    77ea:	d0f9      	beq.n	77e0 <_svfiprintf_r+0x48>
    77ec:	3401      	adds	r4, #1
    77ee:	e7f4      	b.n	77da <_svfiprintf_r+0x42>
    77f0:	9803      	ldr	r0, [sp, #12]
    77f2:	1c31      	adds	r1, r6, #0
    77f4:	1c3a      	adds	r2, r7, #0
    77f6:	9b02      	ldr	r3, [sp, #8]
    77f8:	f7ff ff6e 	bl	76d8 <__ssputs_r>
    77fc:	3001      	adds	r0, #1
    77fe:	d100      	bne.n	7802 <_svfiprintf_r+0x6a>
    7800:	e0a6      	b.n	7950 <_svfiprintf_r+0x1b8>
    7802:	6969      	ldr	r1, [r5, #20]
    7804:	9a02      	ldr	r2, [sp, #8]
    7806:	188b      	adds	r3, r1, r2
    7808:	616b      	str	r3, [r5, #20]
    780a:	7823      	ldrb	r3, [r4, #0]
    780c:	2b00      	cmp	r3, #0
    780e:	d100      	bne.n	7812 <_svfiprintf_r+0x7a>
    7810:	e09e      	b.n	7950 <_svfiprintf_r+0x1b8>
    7812:	2201      	movs	r2, #1
    7814:	4252      	negs	r2, r2
    7816:	606a      	str	r2, [r5, #4]
    7818:	466a      	mov	r2, sp
    781a:	2300      	movs	r3, #0
    781c:	325b      	adds	r2, #91	; 0x5b
    781e:	3401      	adds	r4, #1
    7820:	602b      	str	r3, [r5, #0]
    7822:	60eb      	str	r3, [r5, #12]
    7824:	60ab      	str	r3, [r5, #8]
    7826:	7013      	strb	r3, [r2, #0]
    7828:	65ab      	str	r3, [r5, #88]	; 0x58
    782a:	4f4e      	ldr	r7, [pc, #312]	; (7964 <_svfiprintf_r+0x1cc>)
    782c:	7821      	ldrb	r1, [r4, #0]
    782e:	1c38      	adds	r0, r7, #0
    7830:	2205      	movs	r2, #5
    7832:	f000 fdff 	bl	8434 <memchr>
    7836:	2800      	cmp	r0, #0
    7838:	d007      	beq.n	784a <_svfiprintf_r+0xb2>
    783a:	1bc7      	subs	r7, r0, r7
    783c:	682b      	ldr	r3, [r5, #0]
    783e:	2001      	movs	r0, #1
    7840:	40b8      	lsls	r0, r7
    7842:	4318      	orrs	r0, r3
    7844:	6028      	str	r0, [r5, #0]
    7846:	3401      	adds	r4, #1
    7848:	e7ef      	b.n	782a <_svfiprintf_r+0x92>
    784a:	682b      	ldr	r3, [r5, #0]
    784c:	06d9      	lsls	r1, r3, #27
    784e:	d503      	bpl.n	7858 <_svfiprintf_r+0xc0>
    7850:	466a      	mov	r2, sp
    7852:	2120      	movs	r1, #32
    7854:	325b      	adds	r2, #91	; 0x5b
    7856:	7011      	strb	r1, [r2, #0]
    7858:	071a      	lsls	r2, r3, #28
    785a:	d503      	bpl.n	7864 <_svfiprintf_r+0xcc>
    785c:	466a      	mov	r2, sp
    785e:	212b      	movs	r1, #43	; 0x2b
    7860:	325b      	adds	r2, #91	; 0x5b
    7862:	7011      	strb	r1, [r2, #0]
    7864:	7822      	ldrb	r2, [r4, #0]
    7866:	2a2a      	cmp	r2, #42	; 0x2a
    7868:	d001      	beq.n	786e <_svfiprintf_r+0xd6>
    786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    786c:	e00e      	b.n	788c <_svfiprintf_r+0xf4>
    786e:	9a05      	ldr	r2, [sp, #20]
    7870:	1d11      	adds	r1, r2, #4
    7872:	6812      	ldr	r2, [r2, #0]
    7874:	9105      	str	r1, [sp, #20]
    7876:	2a00      	cmp	r2, #0
    7878:	db01      	blt.n	787e <_svfiprintf_r+0xe6>
    787a:	9209      	str	r2, [sp, #36]	; 0x24
    787c:	e004      	b.n	7888 <_svfiprintf_r+0xf0>
    787e:	4252      	negs	r2, r2
    7880:	60ea      	str	r2, [r5, #12]
    7882:	2202      	movs	r2, #2
    7884:	4313      	orrs	r3, r2
    7886:	602b      	str	r3, [r5, #0]
    7888:	3401      	adds	r4, #1
    788a:	e009      	b.n	78a0 <_svfiprintf_r+0x108>
    788c:	7822      	ldrb	r2, [r4, #0]
    788e:	3a30      	subs	r2, #48	; 0x30
    7890:	2a09      	cmp	r2, #9
    7892:	d804      	bhi.n	789e <_svfiprintf_r+0x106>
    7894:	210a      	movs	r1, #10
    7896:	434b      	muls	r3, r1
    7898:	3401      	adds	r4, #1
    789a:	189b      	adds	r3, r3, r2
    789c:	e7f6      	b.n	788c <_svfiprintf_r+0xf4>
    789e:	9309      	str	r3, [sp, #36]	; 0x24
    78a0:	7823      	ldrb	r3, [r4, #0]
    78a2:	2b2e      	cmp	r3, #46	; 0x2e
    78a4:	d118      	bne.n	78d8 <_svfiprintf_r+0x140>
    78a6:	7863      	ldrb	r3, [r4, #1]
    78a8:	2b2a      	cmp	r3, #42	; 0x2a
    78aa:	d109      	bne.n	78c0 <_svfiprintf_r+0x128>
    78ac:	9b05      	ldr	r3, [sp, #20]
    78ae:	3402      	adds	r4, #2
    78b0:	1d1a      	adds	r2, r3, #4
    78b2:	681b      	ldr	r3, [r3, #0]
    78b4:	9205      	str	r2, [sp, #20]
    78b6:	2b00      	cmp	r3, #0
    78b8:	da0d      	bge.n	78d6 <_svfiprintf_r+0x13e>
    78ba:	2301      	movs	r3, #1
    78bc:	425b      	negs	r3, r3
    78be:	e00a      	b.n	78d6 <_svfiprintf_r+0x13e>
    78c0:	3401      	adds	r4, #1
    78c2:	2300      	movs	r3, #0
    78c4:	7822      	ldrb	r2, [r4, #0]
    78c6:	3a30      	subs	r2, #48	; 0x30
    78c8:	2a09      	cmp	r2, #9
    78ca:	d804      	bhi.n	78d6 <_svfiprintf_r+0x13e>
    78cc:	210a      	movs	r1, #10
    78ce:	434b      	muls	r3, r1
    78d0:	3401      	adds	r4, #1
    78d2:	189b      	adds	r3, r3, r2
    78d4:	e7f6      	b.n	78c4 <_svfiprintf_r+0x12c>
    78d6:	9307      	str	r3, [sp, #28]
    78d8:	4f23      	ldr	r7, [pc, #140]	; (7968 <_svfiprintf_r+0x1d0>)
    78da:	7821      	ldrb	r1, [r4, #0]
    78dc:	1c38      	adds	r0, r7, #0
    78de:	2203      	movs	r2, #3
    78e0:	f000 fda8 	bl	8434 <memchr>
    78e4:	2800      	cmp	r0, #0
    78e6:	d006      	beq.n	78f6 <_svfiprintf_r+0x15e>
    78e8:	1bc7      	subs	r7, r0, r7
    78ea:	682b      	ldr	r3, [r5, #0]
    78ec:	2040      	movs	r0, #64	; 0x40
    78ee:	40b8      	lsls	r0, r7
    78f0:	4318      	orrs	r0, r3
    78f2:	6028      	str	r0, [r5, #0]
    78f4:	3401      	adds	r4, #1
    78f6:	7821      	ldrb	r1, [r4, #0]
    78f8:	481c      	ldr	r0, [pc, #112]	; (796c <_svfiprintf_r+0x1d4>)
    78fa:	2206      	movs	r2, #6
    78fc:	1c67      	adds	r7, r4, #1
    78fe:	7629      	strb	r1, [r5, #24]
    7900:	f000 fd98 	bl	8434 <memchr>
    7904:	2800      	cmp	r0, #0
    7906:	d012      	beq.n	792e <_svfiprintf_r+0x196>
    7908:	4b19      	ldr	r3, [pc, #100]	; (7970 <_svfiprintf_r+0x1d8>)
    790a:	2b00      	cmp	r3, #0
    790c:	d106      	bne.n	791c <_svfiprintf_r+0x184>
    790e:	9b05      	ldr	r3, [sp, #20]
    7910:	2207      	movs	r2, #7
    7912:	3307      	adds	r3, #7
    7914:	4393      	bics	r3, r2
    7916:	3308      	adds	r3, #8
    7918:	9305      	str	r3, [sp, #20]
    791a:	e014      	b.n	7946 <_svfiprintf_r+0x1ae>
    791c:	ab05      	add	r3, sp, #20
    791e:	9300      	str	r3, [sp, #0]
    7920:	9803      	ldr	r0, [sp, #12]
    7922:	1c29      	adds	r1, r5, #0
    7924:	1c32      	adds	r2, r6, #0
    7926:	4b13      	ldr	r3, [pc, #76]	; (7974 <_svfiprintf_r+0x1dc>)
    7928:	e000      	b.n	792c <_svfiprintf_r+0x194>
    792a:	bf00      	nop
    792c:	e007      	b.n	793e <_svfiprintf_r+0x1a6>
    792e:	ab05      	add	r3, sp, #20
    7930:	9300      	str	r3, [sp, #0]
    7932:	9803      	ldr	r0, [sp, #12]
    7934:	1c29      	adds	r1, r5, #0
    7936:	1c32      	adds	r2, r6, #0
    7938:	4b0e      	ldr	r3, [pc, #56]	; (7974 <_svfiprintf_r+0x1dc>)
    793a:	f000 f9c1 	bl	7cc0 <_printf_i>
    793e:	9004      	str	r0, [sp, #16]
    7940:	9904      	ldr	r1, [sp, #16]
    7942:	3101      	adds	r1, #1
    7944:	d004      	beq.n	7950 <_svfiprintf_r+0x1b8>
    7946:	696a      	ldr	r2, [r5, #20]
    7948:	9904      	ldr	r1, [sp, #16]
    794a:	1853      	adds	r3, r2, r1
    794c:	616b      	str	r3, [r5, #20]
    794e:	e743      	b.n	77d8 <_svfiprintf_r+0x40>
    7950:	89b3      	ldrh	r3, [r6, #12]
    7952:	065a      	lsls	r2, r3, #25
    7954:	d401      	bmi.n	795a <_svfiprintf_r+0x1c2>
    7956:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7958:	e001      	b.n	795e <_svfiprintf_r+0x1c6>
    795a:	2001      	movs	r0, #1
    795c:	4240      	negs	r0, r0
    795e:	b01f      	add	sp, #124	; 0x7c
    7960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7962:	46c0      	nop			; (mov r8, r8)
    7964:	0000938c 	.word	0x0000938c
    7968:	00009392 	.word	0x00009392
    796c:	00009396 	.word	0x00009396
    7970:	00000000 	.word	0x00000000
    7974:	000076d9 	.word	0x000076d9

00007978 <__sfputc_r>:
    7978:	6893      	ldr	r3, [r2, #8]
    797a:	b510      	push	{r4, lr}
    797c:	3b01      	subs	r3, #1
    797e:	6093      	str	r3, [r2, #8]
    7980:	2b00      	cmp	r3, #0
    7982:	da05      	bge.n	7990 <__sfputc_r+0x18>
    7984:	6994      	ldr	r4, [r2, #24]
    7986:	42a3      	cmp	r3, r4
    7988:	db08      	blt.n	799c <__sfputc_r+0x24>
    798a:	b2cb      	uxtb	r3, r1
    798c:	2b0a      	cmp	r3, #10
    798e:	d005      	beq.n	799c <__sfputc_r+0x24>
    7990:	6813      	ldr	r3, [r2, #0]
    7992:	1c58      	adds	r0, r3, #1
    7994:	6010      	str	r0, [r2, #0]
    7996:	7019      	strb	r1, [r3, #0]
    7998:	b2c8      	uxtb	r0, r1
    799a:	e001      	b.n	79a0 <__sfputc_r+0x28>
    799c:	f000 faa6 	bl	7eec <__swbuf_r>
    79a0:	bd10      	pop	{r4, pc}

000079a2 <__sfputs_r>:
    79a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79a4:	1c06      	adds	r6, r0, #0
    79a6:	1c0f      	adds	r7, r1, #0
    79a8:	1c14      	adds	r4, r2, #0
    79aa:	18d5      	adds	r5, r2, r3
    79ac:	42ac      	cmp	r4, r5
    79ae:	d008      	beq.n	79c2 <__sfputs_r+0x20>
    79b0:	7821      	ldrb	r1, [r4, #0]
    79b2:	1c30      	adds	r0, r6, #0
    79b4:	1c3a      	adds	r2, r7, #0
    79b6:	f7ff ffdf 	bl	7978 <__sfputc_r>
    79ba:	3401      	adds	r4, #1
    79bc:	1c43      	adds	r3, r0, #1
    79be:	d1f5      	bne.n	79ac <__sfputs_r+0xa>
    79c0:	e000      	b.n	79c4 <__sfputs_r+0x22>
    79c2:	2000      	movs	r0, #0
    79c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000079c8 <_vfiprintf_r>:
    79c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ca:	b09f      	sub	sp, #124	; 0x7c
    79cc:	1c06      	adds	r6, r0, #0
    79ce:	1c0f      	adds	r7, r1, #0
    79d0:	9203      	str	r2, [sp, #12]
    79d2:	9305      	str	r3, [sp, #20]
    79d4:	2800      	cmp	r0, #0
    79d6:	d004      	beq.n	79e2 <_vfiprintf_r+0x1a>
    79d8:	6981      	ldr	r1, [r0, #24]
    79da:	2900      	cmp	r1, #0
    79dc:	d101      	bne.n	79e2 <_vfiprintf_r+0x1a>
    79de:	f000 fc5f 	bl	82a0 <__sinit>
    79e2:	4b75      	ldr	r3, [pc, #468]	; (7bb8 <_vfiprintf_r+0x1f0>)
    79e4:	429f      	cmp	r7, r3
    79e6:	d101      	bne.n	79ec <_vfiprintf_r+0x24>
    79e8:	6877      	ldr	r7, [r6, #4]
    79ea:	e008      	b.n	79fe <_vfiprintf_r+0x36>
    79ec:	4b73      	ldr	r3, [pc, #460]	; (7bbc <_vfiprintf_r+0x1f4>)
    79ee:	429f      	cmp	r7, r3
    79f0:	d101      	bne.n	79f6 <_vfiprintf_r+0x2e>
    79f2:	68b7      	ldr	r7, [r6, #8]
    79f4:	e003      	b.n	79fe <_vfiprintf_r+0x36>
    79f6:	4b72      	ldr	r3, [pc, #456]	; (7bc0 <_vfiprintf_r+0x1f8>)
    79f8:	429f      	cmp	r7, r3
    79fa:	d100      	bne.n	79fe <_vfiprintf_r+0x36>
    79fc:	68f7      	ldr	r7, [r6, #12]
    79fe:	89bb      	ldrh	r3, [r7, #12]
    7a00:	071a      	lsls	r2, r3, #28
    7a02:	d50a      	bpl.n	7a1a <_vfiprintf_r+0x52>
    7a04:	693b      	ldr	r3, [r7, #16]
    7a06:	2b00      	cmp	r3, #0
    7a08:	d007      	beq.n	7a1a <_vfiprintf_r+0x52>
    7a0a:	ad06      	add	r5, sp, #24
    7a0c:	2300      	movs	r3, #0
    7a0e:	616b      	str	r3, [r5, #20]
    7a10:	2320      	movs	r3, #32
    7a12:	766b      	strb	r3, [r5, #25]
    7a14:	2330      	movs	r3, #48	; 0x30
    7a16:	76ab      	strb	r3, [r5, #26]
    7a18:	e03b      	b.n	7a92 <_vfiprintf_r+0xca>
    7a1a:	1c30      	adds	r0, r6, #0
    7a1c:	1c39      	adds	r1, r7, #0
    7a1e:	f000 fabd 	bl	7f9c <__swsetup_r>
    7a22:	2800      	cmp	r0, #0
    7a24:	d0f1      	beq.n	7a0a <_vfiprintf_r+0x42>
    7a26:	2001      	movs	r0, #1
    7a28:	4240      	negs	r0, r0
    7a2a:	e0c2      	b.n	7bb2 <_vfiprintf_r+0x1ea>
    7a2c:	9a05      	ldr	r2, [sp, #20]
    7a2e:	1d11      	adds	r1, r2, #4
    7a30:	6812      	ldr	r2, [r2, #0]
    7a32:	9105      	str	r1, [sp, #20]
    7a34:	2a00      	cmp	r2, #0
    7a36:	db76      	blt.n	7b26 <_vfiprintf_r+0x15e>
    7a38:	9209      	str	r2, [sp, #36]	; 0x24
    7a3a:	3401      	adds	r4, #1
    7a3c:	7823      	ldrb	r3, [r4, #0]
    7a3e:	2b2e      	cmp	r3, #46	; 0x2e
    7a40:	d100      	bne.n	7a44 <_vfiprintf_r+0x7c>
    7a42:	e081      	b.n	7b48 <_vfiprintf_r+0x180>
    7a44:	7821      	ldrb	r1, [r4, #0]
    7a46:	485f      	ldr	r0, [pc, #380]	; (7bc4 <_vfiprintf_r+0x1fc>)
    7a48:	2203      	movs	r2, #3
    7a4a:	f000 fcf3 	bl	8434 <memchr>
    7a4e:	2800      	cmp	r0, #0
    7a50:	d007      	beq.n	7a62 <_vfiprintf_r+0x9a>
    7a52:	495c      	ldr	r1, [pc, #368]	; (7bc4 <_vfiprintf_r+0x1fc>)
    7a54:	682a      	ldr	r2, [r5, #0]
    7a56:	1a43      	subs	r3, r0, r1
    7a58:	2040      	movs	r0, #64	; 0x40
    7a5a:	4098      	lsls	r0, r3
    7a5c:	4310      	orrs	r0, r2
    7a5e:	6028      	str	r0, [r5, #0]
    7a60:	3401      	adds	r4, #1
    7a62:	7821      	ldrb	r1, [r4, #0]
    7a64:	1c63      	adds	r3, r4, #1
    7a66:	4858      	ldr	r0, [pc, #352]	; (7bc8 <_vfiprintf_r+0x200>)
    7a68:	2206      	movs	r2, #6
    7a6a:	9303      	str	r3, [sp, #12]
    7a6c:	7629      	strb	r1, [r5, #24]
    7a6e:	f000 fce1 	bl	8434 <memchr>
    7a72:	2800      	cmp	r0, #0
    7a74:	d100      	bne.n	7a78 <_vfiprintf_r+0xb0>
    7a76:	e08a      	b.n	7b8e <_vfiprintf_r+0x1c6>
    7a78:	4b54      	ldr	r3, [pc, #336]	; (7bcc <_vfiprintf_r+0x204>)
    7a7a:	2b00      	cmp	r3, #0
    7a7c:	d17e      	bne.n	7b7c <_vfiprintf_r+0x1b4>
    7a7e:	9b05      	ldr	r3, [sp, #20]
    7a80:	2207      	movs	r2, #7
    7a82:	3307      	adds	r3, #7
    7a84:	4393      	bics	r3, r2
    7a86:	3308      	adds	r3, #8
    7a88:	9305      	str	r3, [sp, #20]
    7a8a:	696a      	ldr	r2, [r5, #20]
    7a8c:	9904      	ldr	r1, [sp, #16]
    7a8e:	1853      	adds	r3, r2, r1
    7a90:	616b      	str	r3, [r5, #20]
    7a92:	9c03      	ldr	r4, [sp, #12]
    7a94:	7823      	ldrb	r3, [r4, #0]
    7a96:	2b00      	cmp	r3, #0
    7a98:	d104      	bne.n	7aa4 <_vfiprintf_r+0xdc>
    7a9a:	9903      	ldr	r1, [sp, #12]
    7a9c:	1a61      	subs	r1, r4, r1
    7a9e:	9102      	str	r1, [sp, #8]
    7aa0:	d010      	beq.n	7ac4 <_vfiprintf_r+0xfc>
    7aa2:	e003      	b.n	7aac <_vfiprintf_r+0xe4>
    7aa4:	2b25      	cmp	r3, #37	; 0x25
    7aa6:	d0f8      	beq.n	7a9a <_vfiprintf_r+0xd2>
    7aa8:	3401      	adds	r4, #1
    7aaa:	e7f3      	b.n	7a94 <_vfiprintf_r+0xcc>
    7aac:	1c30      	adds	r0, r6, #0
    7aae:	1c39      	adds	r1, r7, #0
    7ab0:	9a03      	ldr	r2, [sp, #12]
    7ab2:	9b02      	ldr	r3, [sp, #8]
    7ab4:	f7ff ff75 	bl	79a2 <__sfputs_r>
    7ab8:	3001      	adds	r0, #1
    7aba:	d075      	beq.n	7ba8 <_vfiprintf_r+0x1e0>
    7abc:	696a      	ldr	r2, [r5, #20]
    7abe:	9902      	ldr	r1, [sp, #8]
    7ac0:	1853      	adds	r3, r2, r1
    7ac2:	616b      	str	r3, [r5, #20]
    7ac4:	7823      	ldrb	r3, [r4, #0]
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d06e      	beq.n	7ba8 <_vfiprintf_r+0x1e0>
    7aca:	2201      	movs	r2, #1
    7acc:	4252      	negs	r2, r2
    7ace:	606a      	str	r2, [r5, #4]
    7ad0:	466a      	mov	r2, sp
    7ad2:	2300      	movs	r3, #0
    7ad4:	325b      	adds	r2, #91	; 0x5b
    7ad6:	3401      	adds	r4, #1
    7ad8:	602b      	str	r3, [r5, #0]
    7ada:	60eb      	str	r3, [r5, #12]
    7adc:	60ab      	str	r3, [r5, #8]
    7ade:	7013      	strb	r3, [r2, #0]
    7ae0:	65ab      	str	r3, [r5, #88]	; 0x58
    7ae2:	7821      	ldrb	r1, [r4, #0]
    7ae4:	483a      	ldr	r0, [pc, #232]	; (7bd0 <_vfiprintf_r+0x208>)
    7ae6:	2205      	movs	r2, #5
    7ae8:	f000 fca4 	bl	8434 <memchr>
    7aec:	2800      	cmp	r0, #0
    7aee:	d008      	beq.n	7b02 <_vfiprintf_r+0x13a>
    7af0:	4a37      	ldr	r2, [pc, #220]	; (7bd0 <_vfiprintf_r+0x208>)
    7af2:	3401      	adds	r4, #1
    7af4:	1a83      	subs	r3, r0, r2
    7af6:	2001      	movs	r0, #1
    7af8:	4098      	lsls	r0, r3
    7afa:	682b      	ldr	r3, [r5, #0]
    7afc:	4318      	orrs	r0, r3
    7afe:	6028      	str	r0, [r5, #0]
    7b00:	e7ef      	b.n	7ae2 <_vfiprintf_r+0x11a>
    7b02:	682b      	ldr	r3, [r5, #0]
    7b04:	06d9      	lsls	r1, r3, #27
    7b06:	d503      	bpl.n	7b10 <_vfiprintf_r+0x148>
    7b08:	466a      	mov	r2, sp
    7b0a:	2120      	movs	r1, #32
    7b0c:	325b      	adds	r2, #91	; 0x5b
    7b0e:	7011      	strb	r1, [r2, #0]
    7b10:	071a      	lsls	r2, r3, #28
    7b12:	d503      	bpl.n	7b1c <_vfiprintf_r+0x154>
    7b14:	466a      	mov	r2, sp
    7b16:	212b      	movs	r1, #43	; 0x2b
    7b18:	325b      	adds	r2, #91	; 0x5b
    7b1a:	7011      	strb	r1, [r2, #0]
    7b1c:	7822      	ldrb	r2, [r4, #0]
    7b1e:	2a2a      	cmp	r2, #42	; 0x2a
    7b20:	d084      	beq.n	7a2c <_vfiprintf_r+0x64>
    7b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b24:	e005      	b.n	7b32 <_vfiprintf_r+0x16a>
    7b26:	4252      	negs	r2, r2
    7b28:	60ea      	str	r2, [r5, #12]
    7b2a:	2202      	movs	r2, #2
    7b2c:	4313      	orrs	r3, r2
    7b2e:	602b      	str	r3, [r5, #0]
    7b30:	e783      	b.n	7a3a <_vfiprintf_r+0x72>
    7b32:	7822      	ldrb	r2, [r4, #0]
    7b34:	3a30      	subs	r2, #48	; 0x30
    7b36:	2a09      	cmp	r2, #9
    7b38:	d804      	bhi.n	7b44 <_vfiprintf_r+0x17c>
    7b3a:	210a      	movs	r1, #10
    7b3c:	434b      	muls	r3, r1
    7b3e:	3401      	adds	r4, #1
    7b40:	189b      	adds	r3, r3, r2
    7b42:	e7f6      	b.n	7b32 <_vfiprintf_r+0x16a>
    7b44:	9309      	str	r3, [sp, #36]	; 0x24
    7b46:	e779      	b.n	7a3c <_vfiprintf_r+0x74>
    7b48:	7863      	ldrb	r3, [r4, #1]
    7b4a:	2b2a      	cmp	r3, #42	; 0x2a
    7b4c:	d109      	bne.n	7b62 <_vfiprintf_r+0x19a>
    7b4e:	9b05      	ldr	r3, [sp, #20]
    7b50:	3402      	adds	r4, #2
    7b52:	1d1a      	adds	r2, r3, #4
    7b54:	681b      	ldr	r3, [r3, #0]
    7b56:	9205      	str	r2, [sp, #20]
    7b58:	2b00      	cmp	r3, #0
    7b5a:	da0d      	bge.n	7b78 <_vfiprintf_r+0x1b0>
    7b5c:	2301      	movs	r3, #1
    7b5e:	425b      	negs	r3, r3
    7b60:	e00a      	b.n	7b78 <_vfiprintf_r+0x1b0>
    7b62:	3401      	adds	r4, #1
    7b64:	2300      	movs	r3, #0
    7b66:	7822      	ldrb	r2, [r4, #0]
    7b68:	3a30      	subs	r2, #48	; 0x30
    7b6a:	2a09      	cmp	r2, #9
    7b6c:	d804      	bhi.n	7b78 <_vfiprintf_r+0x1b0>
    7b6e:	210a      	movs	r1, #10
    7b70:	434b      	muls	r3, r1
    7b72:	3401      	adds	r4, #1
    7b74:	189b      	adds	r3, r3, r2
    7b76:	e7f6      	b.n	7b66 <_vfiprintf_r+0x19e>
    7b78:	9307      	str	r3, [sp, #28]
    7b7a:	e763      	b.n	7a44 <_vfiprintf_r+0x7c>
    7b7c:	ab05      	add	r3, sp, #20
    7b7e:	9300      	str	r3, [sp, #0]
    7b80:	1c30      	adds	r0, r6, #0
    7b82:	1c29      	adds	r1, r5, #0
    7b84:	1c3a      	adds	r2, r7, #0
    7b86:	4b13      	ldr	r3, [pc, #76]	; (7bd4 <_vfiprintf_r+0x20c>)
    7b88:	e000      	b.n	7b8c <_vfiprintf_r+0x1c4>
    7b8a:	bf00      	nop
    7b8c:	e007      	b.n	7b9e <_vfiprintf_r+0x1d6>
    7b8e:	ab05      	add	r3, sp, #20
    7b90:	9300      	str	r3, [sp, #0]
    7b92:	1c30      	adds	r0, r6, #0
    7b94:	1c29      	adds	r1, r5, #0
    7b96:	1c3a      	adds	r2, r7, #0
    7b98:	4b0e      	ldr	r3, [pc, #56]	; (7bd4 <_vfiprintf_r+0x20c>)
    7b9a:	f000 f891 	bl	7cc0 <_printf_i>
    7b9e:	9004      	str	r0, [sp, #16]
    7ba0:	9904      	ldr	r1, [sp, #16]
    7ba2:	3101      	adds	r1, #1
    7ba4:	d000      	beq.n	7ba8 <_vfiprintf_r+0x1e0>
    7ba6:	e770      	b.n	7a8a <_vfiprintf_r+0xc2>
    7ba8:	89bb      	ldrh	r3, [r7, #12]
    7baa:	065a      	lsls	r2, r3, #25
    7bac:	d500      	bpl.n	7bb0 <_vfiprintf_r+0x1e8>
    7bae:	e73a      	b.n	7a26 <_vfiprintf_r+0x5e>
    7bb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7bb2:	b01f      	add	sp, #124	; 0x7c
    7bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bb6:	46c0      	nop			; (mov r8, r8)
    7bb8:	000094c0 	.word	0x000094c0
    7bbc:	000094e0 	.word	0x000094e0
    7bc0:	00009500 	.word	0x00009500
    7bc4:	00009392 	.word	0x00009392
    7bc8:	00009396 	.word	0x00009396
    7bcc:	00000000 	.word	0x00000000
    7bd0:	0000938c 	.word	0x0000938c
    7bd4:	000079a3 	.word	0x000079a3

00007bd8 <_printf_common>:
    7bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7bda:	1c15      	adds	r5, r2, #0
    7bdc:	9301      	str	r3, [sp, #4]
    7bde:	690a      	ldr	r2, [r1, #16]
    7be0:	688b      	ldr	r3, [r1, #8]
    7be2:	1c06      	adds	r6, r0, #0
    7be4:	1c0c      	adds	r4, r1, #0
    7be6:	4293      	cmp	r3, r2
    7be8:	da00      	bge.n	7bec <_printf_common+0x14>
    7bea:	1c13      	adds	r3, r2, #0
    7bec:	1c22      	adds	r2, r4, #0
    7bee:	602b      	str	r3, [r5, #0]
    7bf0:	3243      	adds	r2, #67	; 0x43
    7bf2:	7812      	ldrb	r2, [r2, #0]
    7bf4:	2a00      	cmp	r2, #0
    7bf6:	d001      	beq.n	7bfc <_printf_common+0x24>
    7bf8:	3301      	adds	r3, #1
    7bfa:	602b      	str	r3, [r5, #0]
    7bfc:	6820      	ldr	r0, [r4, #0]
    7bfe:	0680      	lsls	r0, r0, #26
    7c00:	d502      	bpl.n	7c08 <_printf_common+0x30>
    7c02:	682b      	ldr	r3, [r5, #0]
    7c04:	3302      	adds	r3, #2
    7c06:	602b      	str	r3, [r5, #0]
    7c08:	6821      	ldr	r1, [r4, #0]
    7c0a:	2706      	movs	r7, #6
    7c0c:	400f      	ands	r7, r1
    7c0e:	d01f      	beq.n	7c50 <_printf_common+0x78>
    7c10:	1c23      	adds	r3, r4, #0
    7c12:	3343      	adds	r3, #67	; 0x43
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	1e5a      	subs	r2, r3, #1
    7c18:	4193      	sbcs	r3, r2
    7c1a:	6822      	ldr	r2, [r4, #0]
    7c1c:	0692      	lsls	r2, r2, #26
    7c1e:	d51f      	bpl.n	7c60 <_printf_common+0x88>
    7c20:	18e1      	adds	r1, r4, r3
    7c22:	3140      	adds	r1, #64	; 0x40
    7c24:	2030      	movs	r0, #48	; 0x30
    7c26:	70c8      	strb	r0, [r1, #3]
    7c28:	1c21      	adds	r1, r4, #0
    7c2a:	1c5a      	adds	r2, r3, #1
    7c2c:	3145      	adds	r1, #69	; 0x45
    7c2e:	7809      	ldrb	r1, [r1, #0]
    7c30:	18a2      	adds	r2, r4, r2
    7c32:	3240      	adds	r2, #64	; 0x40
    7c34:	3302      	adds	r3, #2
    7c36:	70d1      	strb	r1, [r2, #3]
    7c38:	e012      	b.n	7c60 <_printf_common+0x88>
    7c3a:	1c22      	adds	r2, r4, #0
    7c3c:	1c30      	adds	r0, r6, #0
    7c3e:	9901      	ldr	r1, [sp, #4]
    7c40:	3219      	adds	r2, #25
    7c42:	2301      	movs	r3, #1
    7c44:	9f08      	ldr	r7, [sp, #32]
    7c46:	47b8      	blx	r7
    7c48:	3001      	adds	r0, #1
    7c4a:	d011      	beq.n	7c70 <_printf_common+0x98>
    7c4c:	9f00      	ldr	r7, [sp, #0]
    7c4e:	3701      	adds	r7, #1
    7c50:	9700      	str	r7, [sp, #0]
    7c52:	68e0      	ldr	r0, [r4, #12]
    7c54:	6829      	ldr	r1, [r5, #0]
    7c56:	9f00      	ldr	r7, [sp, #0]
    7c58:	1a43      	subs	r3, r0, r1
    7c5a:	429f      	cmp	r7, r3
    7c5c:	dbed      	blt.n	7c3a <_printf_common+0x62>
    7c5e:	e7d7      	b.n	7c10 <_printf_common+0x38>
    7c60:	1c22      	adds	r2, r4, #0
    7c62:	1c30      	adds	r0, r6, #0
    7c64:	9901      	ldr	r1, [sp, #4]
    7c66:	3243      	adds	r2, #67	; 0x43
    7c68:	9f08      	ldr	r7, [sp, #32]
    7c6a:	47b8      	blx	r7
    7c6c:	3001      	adds	r0, #1
    7c6e:	d102      	bne.n	7c76 <_printf_common+0x9e>
    7c70:	2001      	movs	r0, #1
    7c72:	4240      	negs	r0, r0
    7c74:	e023      	b.n	7cbe <_printf_common+0xe6>
    7c76:	6820      	ldr	r0, [r4, #0]
    7c78:	2106      	movs	r1, #6
    7c7a:	682b      	ldr	r3, [r5, #0]
    7c7c:	68e2      	ldr	r2, [r4, #12]
    7c7e:	4001      	ands	r1, r0
    7c80:	2500      	movs	r5, #0
    7c82:	2904      	cmp	r1, #4
    7c84:	d103      	bne.n	7c8e <_printf_common+0xb6>
    7c86:	1ad5      	subs	r5, r2, r3
    7c88:	43eb      	mvns	r3, r5
    7c8a:	17db      	asrs	r3, r3, #31
    7c8c:	401d      	ands	r5, r3
    7c8e:	68a2      	ldr	r2, [r4, #8]
    7c90:	6923      	ldr	r3, [r4, #16]
    7c92:	429a      	cmp	r2, r3
    7c94:	dd01      	ble.n	7c9a <_printf_common+0xc2>
    7c96:	1ad3      	subs	r3, r2, r3
    7c98:	18ed      	adds	r5, r5, r3
    7c9a:	2700      	movs	r7, #0
    7c9c:	9700      	str	r7, [sp, #0]
    7c9e:	9f00      	ldr	r7, [sp, #0]
    7ca0:	42af      	cmp	r7, r5
    7ca2:	da0b      	bge.n	7cbc <_printf_common+0xe4>
    7ca4:	1c22      	adds	r2, r4, #0
    7ca6:	1c30      	adds	r0, r6, #0
    7ca8:	9901      	ldr	r1, [sp, #4]
    7caa:	321a      	adds	r2, #26
    7cac:	2301      	movs	r3, #1
    7cae:	9f08      	ldr	r7, [sp, #32]
    7cb0:	47b8      	blx	r7
    7cb2:	3001      	adds	r0, #1
    7cb4:	d0dc      	beq.n	7c70 <_printf_common+0x98>
    7cb6:	9f00      	ldr	r7, [sp, #0]
    7cb8:	3701      	adds	r7, #1
    7cba:	e7ef      	b.n	7c9c <_printf_common+0xc4>
    7cbc:	2000      	movs	r0, #0
    7cbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00007cc0 <_printf_i>:
    7cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cc2:	1c0d      	adds	r5, r1, #0
    7cc4:	b08b      	sub	sp, #44	; 0x2c
    7cc6:	3543      	adds	r5, #67	; 0x43
    7cc8:	9206      	str	r2, [sp, #24]
    7cca:	9005      	str	r0, [sp, #20]
    7ccc:	9307      	str	r3, [sp, #28]
    7cce:	9504      	str	r5, [sp, #16]
    7cd0:	7e0b      	ldrb	r3, [r1, #24]
    7cd2:	1c0c      	adds	r4, r1, #0
    7cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7cd6:	2b6e      	cmp	r3, #110	; 0x6e
    7cd8:	d100      	bne.n	7cdc <_printf_i+0x1c>
    7cda:	e0a7      	b.n	7e2c <_printf_i+0x16c>
    7cdc:	d811      	bhi.n	7d02 <_printf_i+0x42>
    7cde:	2b63      	cmp	r3, #99	; 0x63
    7ce0:	d022      	beq.n	7d28 <_printf_i+0x68>
    7ce2:	d809      	bhi.n	7cf8 <_printf_i+0x38>
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d100      	bne.n	7cea <_printf_i+0x2a>
    7ce8:	e0b0      	b.n	7e4c <_printf_i+0x18c>
    7cea:	2b58      	cmp	r3, #88	; 0x58
    7cec:	d000      	beq.n	7cf0 <_printf_i+0x30>
    7cee:	e0c0      	b.n	7e72 <_printf_i+0x1b2>
    7cf0:	3145      	adds	r1, #69	; 0x45
    7cf2:	700b      	strb	r3, [r1, #0]
    7cf4:	4d7b      	ldr	r5, [pc, #492]	; (7ee4 <_printf_i+0x224>)
    7cf6:	e04e      	b.n	7d96 <_printf_i+0xd6>
    7cf8:	2b64      	cmp	r3, #100	; 0x64
    7cfa:	d01c      	beq.n	7d36 <_printf_i+0x76>
    7cfc:	2b69      	cmp	r3, #105	; 0x69
    7cfe:	d01a      	beq.n	7d36 <_printf_i+0x76>
    7d00:	e0b7      	b.n	7e72 <_printf_i+0x1b2>
    7d02:	2b73      	cmp	r3, #115	; 0x73
    7d04:	d100      	bne.n	7d08 <_printf_i+0x48>
    7d06:	e0a5      	b.n	7e54 <_printf_i+0x194>
    7d08:	d809      	bhi.n	7d1e <_printf_i+0x5e>
    7d0a:	2b6f      	cmp	r3, #111	; 0x6f
    7d0c:	d029      	beq.n	7d62 <_printf_i+0xa2>
    7d0e:	2b70      	cmp	r3, #112	; 0x70
    7d10:	d000      	beq.n	7d14 <_printf_i+0x54>
    7d12:	e0ae      	b.n	7e72 <_printf_i+0x1b2>
    7d14:	680e      	ldr	r6, [r1, #0]
    7d16:	2320      	movs	r3, #32
    7d18:	4333      	orrs	r3, r6
    7d1a:	600b      	str	r3, [r1, #0]
    7d1c:	e036      	b.n	7d8c <_printf_i+0xcc>
    7d1e:	2b75      	cmp	r3, #117	; 0x75
    7d20:	d01f      	beq.n	7d62 <_printf_i+0xa2>
    7d22:	2b78      	cmp	r3, #120	; 0x78
    7d24:	d032      	beq.n	7d8c <_printf_i+0xcc>
    7d26:	e0a4      	b.n	7e72 <_printf_i+0x1b2>
    7d28:	6813      	ldr	r3, [r2, #0]
    7d2a:	1c0d      	adds	r5, r1, #0
    7d2c:	1d19      	adds	r1, r3, #4
    7d2e:	3542      	adds	r5, #66	; 0x42
    7d30:	6011      	str	r1, [r2, #0]
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	e09f      	b.n	7e76 <_printf_i+0x1b6>
    7d36:	6821      	ldr	r1, [r4, #0]
    7d38:	6813      	ldr	r3, [r2, #0]
    7d3a:	060e      	lsls	r6, r1, #24
    7d3c:	d503      	bpl.n	7d46 <_printf_i+0x86>
    7d3e:	1d19      	adds	r1, r3, #4
    7d40:	6011      	str	r1, [r2, #0]
    7d42:	681e      	ldr	r6, [r3, #0]
    7d44:	e005      	b.n	7d52 <_printf_i+0x92>
    7d46:	0648      	lsls	r0, r1, #25
    7d48:	d5f9      	bpl.n	7d3e <_printf_i+0x7e>
    7d4a:	1d19      	adds	r1, r3, #4
    7d4c:	6011      	str	r1, [r2, #0]
    7d4e:	2100      	movs	r1, #0
    7d50:	5e5e      	ldrsh	r6, [r3, r1]
    7d52:	4b64      	ldr	r3, [pc, #400]	; (7ee4 <_printf_i+0x224>)
    7d54:	2e00      	cmp	r6, #0
    7d56:	da3b      	bge.n	7dd0 <_printf_i+0x110>
    7d58:	9d04      	ldr	r5, [sp, #16]
    7d5a:	222d      	movs	r2, #45	; 0x2d
    7d5c:	4276      	negs	r6, r6
    7d5e:	702a      	strb	r2, [r5, #0]
    7d60:	e036      	b.n	7dd0 <_printf_i+0x110>
    7d62:	6821      	ldr	r1, [r4, #0]
    7d64:	6813      	ldr	r3, [r2, #0]
    7d66:	060e      	lsls	r6, r1, #24
    7d68:	d503      	bpl.n	7d72 <_printf_i+0xb2>
    7d6a:	1d19      	adds	r1, r3, #4
    7d6c:	6011      	str	r1, [r2, #0]
    7d6e:	681e      	ldr	r6, [r3, #0]
    7d70:	e004      	b.n	7d7c <_printf_i+0xbc>
    7d72:	0648      	lsls	r0, r1, #25
    7d74:	d5f9      	bpl.n	7d6a <_printf_i+0xaa>
    7d76:	1d19      	adds	r1, r3, #4
    7d78:	881e      	ldrh	r6, [r3, #0]
    7d7a:	6011      	str	r1, [r2, #0]
    7d7c:	4b59      	ldr	r3, [pc, #356]	; (7ee4 <_printf_i+0x224>)
    7d7e:	7e22      	ldrb	r2, [r4, #24]
    7d80:	9303      	str	r3, [sp, #12]
    7d82:	2708      	movs	r7, #8
    7d84:	2a6f      	cmp	r2, #111	; 0x6f
    7d86:	d01e      	beq.n	7dc6 <_printf_i+0x106>
    7d88:	270a      	movs	r7, #10
    7d8a:	e01c      	b.n	7dc6 <_printf_i+0x106>
    7d8c:	1c23      	adds	r3, r4, #0
    7d8e:	2178      	movs	r1, #120	; 0x78
    7d90:	3345      	adds	r3, #69	; 0x45
    7d92:	4d55      	ldr	r5, [pc, #340]	; (7ee8 <_printf_i+0x228>)
    7d94:	7019      	strb	r1, [r3, #0]
    7d96:	6811      	ldr	r1, [r2, #0]
    7d98:	6823      	ldr	r3, [r4, #0]
    7d9a:	1d08      	adds	r0, r1, #4
    7d9c:	9503      	str	r5, [sp, #12]
    7d9e:	6010      	str	r0, [r2, #0]
    7da0:	061e      	lsls	r6, r3, #24
    7da2:	d501      	bpl.n	7da8 <_printf_i+0xe8>
    7da4:	680e      	ldr	r6, [r1, #0]
    7da6:	e002      	b.n	7dae <_printf_i+0xee>
    7da8:	0658      	lsls	r0, r3, #25
    7daa:	d5fb      	bpl.n	7da4 <_printf_i+0xe4>
    7dac:	880e      	ldrh	r6, [r1, #0]
    7dae:	07d9      	lsls	r1, r3, #31
    7db0:	d502      	bpl.n	7db8 <_printf_i+0xf8>
    7db2:	2220      	movs	r2, #32
    7db4:	4313      	orrs	r3, r2
    7db6:	6023      	str	r3, [r4, #0]
    7db8:	2710      	movs	r7, #16
    7dba:	2e00      	cmp	r6, #0
    7dbc:	d103      	bne.n	7dc6 <_printf_i+0x106>
    7dbe:	6822      	ldr	r2, [r4, #0]
    7dc0:	2320      	movs	r3, #32
    7dc2:	439a      	bics	r2, r3
    7dc4:	6022      	str	r2, [r4, #0]
    7dc6:	1c23      	adds	r3, r4, #0
    7dc8:	2200      	movs	r2, #0
    7dca:	3343      	adds	r3, #67	; 0x43
    7dcc:	701a      	strb	r2, [r3, #0]
    7dce:	e001      	b.n	7dd4 <_printf_i+0x114>
    7dd0:	9303      	str	r3, [sp, #12]
    7dd2:	270a      	movs	r7, #10
    7dd4:	6863      	ldr	r3, [r4, #4]
    7dd6:	60a3      	str	r3, [r4, #8]
    7dd8:	2b00      	cmp	r3, #0
    7dda:	db03      	blt.n	7de4 <_printf_i+0x124>
    7ddc:	6825      	ldr	r5, [r4, #0]
    7dde:	2204      	movs	r2, #4
    7de0:	4395      	bics	r5, r2
    7de2:	6025      	str	r5, [r4, #0]
    7de4:	2e00      	cmp	r6, #0
    7de6:	d102      	bne.n	7dee <_printf_i+0x12e>
    7de8:	9d04      	ldr	r5, [sp, #16]
    7dea:	2b00      	cmp	r3, #0
    7dec:	d00e      	beq.n	7e0c <_printf_i+0x14c>
    7dee:	9d04      	ldr	r5, [sp, #16]
    7df0:	1c30      	adds	r0, r6, #0
    7df2:	1c39      	adds	r1, r7, #0
    7df4:	f7fd fe2c 	bl	5a50 <__aeabi_uidivmod>
    7df8:	9803      	ldr	r0, [sp, #12]
    7dfa:	3d01      	subs	r5, #1
    7dfc:	5c43      	ldrb	r3, [r0, r1]
    7dfe:	1c30      	adds	r0, r6, #0
    7e00:	702b      	strb	r3, [r5, #0]
    7e02:	1c39      	adds	r1, r7, #0
    7e04:	f7fd fde0 	bl	59c8 <__aeabi_uidiv>
    7e08:	1e06      	subs	r6, r0, #0
    7e0a:	d1f1      	bne.n	7df0 <_printf_i+0x130>
    7e0c:	2f08      	cmp	r7, #8
    7e0e:	d109      	bne.n	7e24 <_printf_i+0x164>
    7e10:	6821      	ldr	r1, [r4, #0]
    7e12:	07c9      	lsls	r1, r1, #31
    7e14:	d506      	bpl.n	7e24 <_printf_i+0x164>
    7e16:	6862      	ldr	r2, [r4, #4]
    7e18:	6923      	ldr	r3, [r4, #16]
    7e1a:	429a      	cmp	r2, r3
    7e1c:	dc02      	bgt.n	7e24 <_printf_i+0x164>
    7e1e:	3d01      	subs	r5, #1
    7e20:	2330      	movs	r3, #48	; 0x30
    7e22:	702b      	strb	r3, [r5, #0]
    7e24:	9e04      	ldr	r6, [sp, #16]
    7e26:	1b73      	subs	r3, r6, r5
    7e28:	6123      	str	r3, [r4, #16]
    7e2a:	e02a      	b.n	7e82 <_printf_i+0x1c2>
    7e2c:	6808      	ldr	r0, [r1, #0]
    7e2e:	6813      	ldr	r3, [r2, #0]
    7e30:	6949      	ldr	r1, [r1, #20]
    7e32:	0605      	lsls	r5, r0, #24
    7e34:	d504      	bpl.n	7e40 <_printf_i+0x180>
    7e36:	1d18      	adds	r0, r3, #4
    7e38:	6010      	str	r0, [r2, #0]
    7e3a:	681b      	ldr	r3, [r3, #0]
    7e3c:	6019      	str	r1, [r3, #0]
    7e3e:	e005      	b.n	7e4c <_printf_i+0x18c>
    7e40:	0646      	lsls	r6, r0, #25
    7e42:	d5f8      	bpl.n	7e36 <_printf_i+0x176>
    7e44:	1d18      	adds	r0, r3, #4
    7e46:	6010      	str	r0, [r2, #0]
    7e48:	681b      	ldr	r3, [r3, #0]
    7e4a:	8019      	strh	r1, [r3, #0]
    7e4c:	2300      	movs	r3, #0
    7e4e:	6123      	str	r3, [r4, #16]
    7e50:	9d04      	ldr	r5, [sp, #16]
    7e52:	e016      	b.n	7e82 <_printf_i+0x1c2>
    7e54:	6813      	ldr	r3, [r2, #0]
    7e56:	1d19      	adds	r1, r3, #4
    7e58:	6011      	str	r1, [r2, #0]
    7e5a:	681d      	ldr	r5, [r3, #0]
    7e5c:	1c28      	adds	r0, r5, #0
    7e5e:	f7ff fb8b 	bl	7578 <strlen>
    7e62:	6863      	ldr	r3, [r4, #4]
    7e64:	6120      	str	r0, [r4, #16]
    7e66:	4298      	cmp	r0, r3
    7e68:	d900      	bls.n	7e6c <_printf_i+0x1ac>
    7e6a:	6123      	str	r3, [r4, #16]
    7e6c:	6920      	ldr	r0, [r4, #16]
    7e6e:	6060      	str	r0, [r4, #4]
    7e70:	e004      	b.n	7e7c <_printf_i+0x1bc>
    7e72:	1c25      	adds	r5, r4, #0
    7e74:	3542      	adds	r5, #66	; 0x42
    7e76:	702b      	strb	r3, [r5, #0]
    7e78:	2301      	movs	r3, #1
    7e7a:	6123      	str	r3, [r4, #16]
    7e7c:	9e04      	ldr	r6, [sp, #16]
    7e7e:	2300      	movs	r3, #0
    7e80:	7033      	strb	r3, [r6, #0]
    7e82:	9e07      	ldr	r6, [sp, #28]
    7e84:	9805      	ldr	r0, [sp, #20]
    7e86:	9600      	str	r6, [sp, #0]
    7e88:	1c21      	adds	r1, r4, #0
    7e8a:	aa09      	add	r2, sp, #36	; 0x24
    7e8c:	9b06      	ldr	r3, [sp, #24]
    7e8e:	f7ff fea3 	bl	7bd8 <_printf_common>
    7e92:	3001      	adds	r0, #1
    7e94:	d102      	bne.n	7e9c <_printf_i+0x1dc>
    7e96:	2001      	movs	r0, #1
    7e98:	4240      	negs	r0, r0
    7e9a:	e021      	b.n	7ee0 <_printf_i+0x220>
    7e9c:	1c2a      	adds	r2, r5, #0
    7e9e:	9805      	ldr	r0, [sp, #20]
    7ea0:	9906      	ldr	r1, [sp, #24]
    7ea2:	6923      	ldr	r3, [r4, #16]
    7ea4:	9d07      	ldr	r5, [sp, #28]
    7ea6:	47a8      	blx	r5
    7ea8:	3001      	adds	r0, #1
    7eaa:	d0f4      	beq.n	7e96 <_printf_i+0x1d6>
    7eac:	6826      	ldr	r6, [r4, #0]
    7eae:	07b6      	lsls	r6, r6, #30
    7eb0:	d405      	bmi.n	7ebe <_printf_i+0x1fe>
    7eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7eb4:	68e0      	ldr	r0, [r4, #12]
    7eb6:	4298      	cmp	r0, r3
    7eb8:	da12      	bge.n	7ee0 <_printf_i+0x220>
    7eba:	1c18      	adds	r0, r3, #0
    7ebc:	e010      	b.n	7ee0 <_printf_i+0x220>
    7ebe:	2500      	movs	r5, #0
    7ec0:	68e0      	ldr	r0, [r4, #12]
    7ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ec4:	1a43      	subs	r3, r0, r1
    7ec6:	429d      	cmp	r5, r3
    7ec8:	daf3      	bge.n	7eb2 <_printf_i+0x1f2>
    7eca:	1c22      	adds	r2, r4, #0
    7ecc:	9805      	ldr	r0, [sp, #20]
    7ece:	9906      	ldr	r1, [sp, #24]
    7ed0:	3219      	adds	r2, #25
    7ed2:	2301      	movs	r3, #1
    7ed4:	9e07      	ldr	r6, [sp, #28]
    7ed6:	47b0      	blx	r6
    7ed8:	3001      	adds	r0, #1
    7eda:	d0dc      	beq.n	7e96 <_printf_i+0x1d6>
    7edc:	3501      	adds	r5, #1
    7ede:	e7ef      	b.n	7ec0 <_printf_i+0x200>
    7ee0:	b00b      	add	sp, #44	; 0x2c
    7ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ee4:	0000939d 	.word	0x0000939d
    7ee8:	000093ae 	.word	0x000093ae

00007eec <__swbuf_r>:
    7eec:	b570      	push	{r4, r5, r6, lr}
    7eee:	1c05      	adds	r5, r0, #0
    7ef0:	1c0e      	adds	r6, r1, #0
    7ef2:	1c14      	adds	r4, r2, #0
    7ef4:	2800      	cmp	r0, #0
    7ef6:	d004      	beq.n	7f02 <__swbuf_r+0x16>
    7ef8:	6982      	ldr	r2, [r0, #24]
    7efa:	2a00      	cmp	r2, #0
    7efc:	d101      	bne.n	7f02 <__swbuf_r+0x16>
    7efe:	f000 f9cf 	bl	82a0 <__sinit>
    7f02:	4b23      	ldr	r3, [pc, #140]	; (7f90 <__swbuf_r+0xa4>)
    7f04:	429c      	cmp	r4, r3
    7f06:	d101      	bne.n	7f0c <__swbuf_r+0x20>
    7f08:	686c      	ldr	r4, [r5, #4]
    7f0a:	e008      	b.n	7f1e <__swbuf_r+0x32>
    7f0c:	4b21      	ldr	r3, [pc, #132]	; (7f94 <__swbuf_r+0xa8>)
    7f0e:	429c      	cmp	r4, r3
    7f10:	d101      	bne.n	7f16 <__swbuf_r+0x2a>
    7f12:	68ac      	ldr	r4, [r5, #8]
    7f14:	e003      	b.n	7f1e <__swbuf_r+0x32>
    7f16:	4b20      	ldr	r3, [pc, #128]	; (7f98 <__swbuf_r+0xac>)
    7f18:	429c      	cmp	r4, r3
    7f1a:	d100      	bne.n	7f1e <__swbuf_r+0x32>
    7f1c:	68ec      	ldr	r4, [r5, #12]
    7f1e:	69a3      	ldr	r3, [r4, #24]
    7f20:	60a3      	str	r3, [r4, #8]
    7f22:	89a3      	ldrh	r3, [r4, #12]
    7f24:	071a      	lsls	r2, r3, #28
    7f26:	d50a      	bpl.n	7f3e <__swbuf_r+0x52>
    7f28:	6923      	ldr	r3, [r4, #16]
    7f2a:	2b00      	cmp	r3, #0
    7f2c:	d007      	beq.n	7f3e <__swbuf_r+0x52>
    7f2e:	6822      	ldr	r2, [r4, #0]
    7f30:	6923      	ldr	r3, [r4, #16]
    7f32:	b2f6      	uxtb	r6, r6
    7f34:	1ad0      	subs	r0, r2, r3
    7f36:	6962      	ldr	r2, [r4, #20]
    7f38:	4290      	cmp	r0, r2
    7f3a:	db0f      	blt.n	7f5c <__swbuf_r+0x70>
    7f3c:	e008      	b.n	7f50 <__swbuf_r+0x64>
    7f3e:	1c28      	adds	r0, r5, #0
    7f40:	1c21      	adds	r1, r4, #0
    7f42:	f000 f82b 	bl	7f9c <__swsetup_r>
    7f46:	2800      	cmp	r0, #0
    7f48:	d0f1      	beq.n	7f2e <__swbuf_r+0x42>
    7f4a:	2001      	movs	r0, #1
    7f4c:	4240      	negs	r0, r0
    7f4e:	e01d      	b.n	7f8c <__swbuf_r+0xa0>
    7f50:	1c28      	adds	r0, r5, #0
    7f52:	1c21      	adds	r1, r4, #0
    7f54:	f000 f924 	bl	81a0 <_fflush_r>
    7f58:	2800      	cmp	r0, #0
    7f5a:	d1f6      	bne.n	7f4a <__swbuf_r+0x5e>
    7f5c:	68a3      	ldr	r3, [r4, #8]
    7f5e:	3001      	adds	r0, #1
    7f60:	3b01      	subs	r3, #1
    7f62:	60a3      	str	r3, [r4, #8]
    7f64:	6823      	ldr	r3, [r4, #0]
    7f66:	1c5a      	adds	r2, r3, #1
    7f68:	6022      	str	r2, [r4, #0]
    7f6a:	701e      	strb	r6, [r3, #0]
    7f6c:	6963      	ldr	r3, [r4, #20]
    7f6e:	4298      	cmp	r0, r3
    7f70:	d005      	beq.n	7f7e <__swbuf_r+0x92>
    7f72:	89a3      	ldrh	r3, [r4, #12]
    7f74:	1c30      	adds	r0, r6, #0
    7f76:	07da      	lsls	r2, r3, #31
    7f78:	d508      	bpl.n	7f8c <__swbuf_r+0xa0>
    7f7a:	2e0a      	cmp	r6, #10
    7f7c:	d106      	bne.n	7f8c <__swbuf_r+0xa0>
    7f7e:	1c28      	adds	r0, r5, #0
    7f80:	1c21      	adds	r1, r4, #0
    7f82:	f000 f90d 	bl	81a0 <_fflush_r>
    7f86:	2800      	cmp	r0, #0
    7f88:	d1df      	bne.n	7f4a <__swbuf_r+0x5e>
    7f8a:	1c30      	adds	r0, r6, #0
    7f8c:	bd70      	pop	{r4, r5, r6, pc}
    7f8e:	46c0      	nop			; (mov r8, r8)
    7f90:	000094c0 	.word	0x000094c0
    7f94:	000094e0 	.word	0x000094e0
    7f98:	00009500 	.word	0x00009500

00007f9c <__swsetup_r>:
    7f9c:	4b34      	ldr	r3, [pc, #208]	; (8070 <__swsetup_r+0xd4>)
    7f9e:	b570      	push	{r4, r5, r6, lr}
    7fa0:	681d      	ldr	r5, [r3, #0]
    7fa2:	1c06      	adds	r6, r0, #0
    7fa4:	1c0c      	adds	r4, r1, #0
    7fa6:	2d00      	cmp	r5, #0
    7fa8:	d005      	beq.n	7fb6 <__swsetup_r+0x1a>
    7faa:	69a9      	ldr	r1, [r5, #24]
    7fac:	2900      	cmp	r1, #0
    7fae:	d102      	bne.n	7fb6 <__swsetup_r+0x1a>
    7fb0:	1c28      	adds	r0, r5, #0
    7fb2:	f000 f975 	bl	82a0 <__sinit>
    7fb6:	4b2f      	ldr	r3, [pc, #188]	; (8074 <__swsetup_r+0xd8>)
    7fb8:	429c      	cmp	r4, r3
    7fba:	d101      	bne.n	7fc0 <__swsetup_r+0x24>
    7fbc:	686c      	ldr	r4, [r5, #4]
    7fbe:	e008      	b.n	7fd2 <__swsetup_r+0x36>
    7fc0:	4b2d      	ldr	r3, [pc, #180]	; (8078 <__swsetup_r+0xdc>)
    7fc2:	429c      	cmp	r4, r3
    7fc4:	d101      	bne.n	7fca <__swsetup_r+0x2e>
    7fc6:	68ac      	ldr	r4, [r5, #8]
    7fc8:	e003      	b.n	7fd2 <__swsetup_r+0x36>
    7fca:	4b2c      	ldr	r3, [pc, #176]	; (807c <__swsetup_r+0xe0>)
    7fcc:	429c      	cmp	r4, r3
    7fce:	d100      	bne.n	7fd2 <__swsetup_r+0x36>
    7fd0:	68ec      	ldr	r4, [r5, #12]
    7fd2:	89a2      	ldrh	r2, [r4, #12]
    7fd4:	b293      	uxth	r3, r2
    7fd6:	0719      	lsls	r1, r3, #28
    7fd8:	d421      	bmi.n	801e <__swsetup_r+0x82>
    7fda:	06d9      	lsls	r1, r3, #27
    7fdc:	d405      	bmi.n	7fea <__swsetup_r+0x4e>
    7fde:	2309      	movs	r3, #9
    7fe0:	6033      	str	r3, [r6, #0]
    7fe2:	2340      	movs	r3, #64	; 0x40
    7fe4:	431a      	orrs	r2, r3
    7fe6:	81a2      	strh	r2, [r4, #12]
    7fe8:	e03f      	b.n	806a <__swsetup_r+0xce>
    7fea:	075a      	lsls	r2, r3, #29
    7fec:	d513      	bpl.n	8016 <__swsetup_r+0x7a>
    7fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7ff0:	2900      	cmp	r1, #0
    7ff2:	d008      	beq.n	8006 <__swsetup_r+0x6a>
    7ff4:	1c23      	adds	r3, r4, #0
    7ff6:	3344      	adds	r3, #68	; 0x44
    7ff8:	4299      	cmp	r1, r3
    7ffa:	d002      	beq.n	8002 <__swsetup_r+0x66>
    7ffc:	1c30      	adds	r0, r6, #0
    7ffe:	f000 fa3d 	bl	847c <_free_r>
    8002:	2300      	movs	r3, #0
    8004:	6363      	str	r3, [r4, #52]	; 0x34
    8006:	89a3      	ldrh	r3, [r4, #12]
    8008:	2224      	movs	r2, #36	; 0x24
    800a:	4393      	bics	r3, r2
    800c:	81a3      	strh	r3, [r4, #12]
    800e:	2300      	movs	r3, #0
    8010:	6063      	str	r3, [r4, #4]
    8012:	6923      	ldr	r3, [r4, #16]
    8014:	6023      	str	r3, [r4, #0]
    8016:	89a3      	ldrh	r3, [r4, #12]
    8018:	2208      	movs	r2, #8
    801a:	4313      	orrs	r3, r2
    801c:	81a3      	strh	r3, [r4, #12]
    801e:	6921      	ldr	r1, [r4, #16]
    8020:	2900      	cmp	r1, #0
    8022:	d10b      	bne.n	803c <__swsetup_r+0xa0>
    8024:	89a3      	ldrh	r3, [r4, #12]
    8026:	22a0      	movs	r2, #160	; 0xa0
    8028:	0092      	lsls	r2, r2, #2
    802a:	401a      	ands	r2, r3
    802c:	2380      	movs	r3, #128	; 0x80
    802e:	009b      	lsls	r3, r3, #2
    8030:	429a      	cmp	r2, r3
    8032:	d003      	beq.n	803c <__swsetup_r+0xa0>
    8034:	1c30      	adds	r0, r6, #0
    8036:	1c21      	adds	r1, r4, #0
    8038:	f000 f9a2 	bl	8380 <__smakebuf_r>
    803c:	89a3      	ldrh	r3, [r4, #12]
    803e:	2201      	movs	r2, #1
    8040:	401a      	ands	r2, r3
    8042:	d005      	beq.n	8050 <__swsetup_r+0xb4>
    8044:	6961      	ldr	r1, [r4, #20]
    8046:	2200      	movs	r2, #0
    8048:	60a2      	str	r2, [r4, #8]
    804a:	424a      	negs	r2, r1
    804c:	61a2      	str	r2, [r4, #24]
    804e:	e003      	b.n	8058 <__swsetup_r+0xbc>
    8050:	0799      	lsls	r1, r3, #30
    8052:	d400      	bmi.n	8056 <__swsetup_r+0xba>
    8054:	6962      	ldr	r2, [r4, #20]
    8056:	60a2      	str	r2, [r4, #8]
    8058:	6922      	ldr	r2, [r4, #16]
    805a:	2000      	movs	r0, #0
    805c:	4282      	cmp	r2, r0
    805e:	d106      	bne.n	806e <__swsetup_r+0xd2>
    8060:	0619      	lsls	r1, r3, #24
    8062:	d504      	bpl.n	806e <__swsetup_r+0xd2>
    8064:	2240      	movs	r2, #64	; 0x40
    8066:	4313      	orrs	r3, r2
    8068:	81a3      	strh	r3, [r4, #12]
    806a:	2001      	movs	r0, #1
    806c:	4240      	negs	r0, r0
    806e:	bd70      	pop	{r4, r5, r6, pc}
    8070:	20000474 	.word	0x20000474
    8074:	000094c0 	.word	0x000094c0
    8078:	000094e0 	.word	0x000094e0
    807c:	00009500 	.word	0x00009500

00008080 <abort>:
    8080:	b508      	push	{r3, lr}
    8082:	2006      	movs	r0, #6
    8084:	f000 fafa 	bl	867c <raise>
    8088:	2001      	movs	r0, #1
    808a:	f7fd f8d7 	bl	523c <_exit>

0000808e <__sflush_r>:
    808e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8090:	898b      	ldrh	r3, [r1, #12]
    8092:	1c05      	adds	r5, r0, #0
    8094:	1c0c      	adds	r4, r1, #0
    8096:	0719      	lsls	r1, r3, #28
    8098:	d45e      	bmi.n	8158 <__sflush_r+0xca>
    809a:	6862      	ldr	r2, [r4, #4]
    809c:	2a00      	cmp	r2, #0
    809e:	dc02      	bgt.n	80a6 <__sflush_r+0x18>
    80a0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    80a2:	2f00      	cmp	r7, #0
    80a4:	dd1a      	ble.n	80dc <__sflush_r+0x4e>
    80a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    80a8:	2f00      	cmp	r7, #0
    80aa:	d017      	beq.n	80dc <__sflush_r+0x4e>
    80ac:	2200      	movs	r2, #0
    80ae:	682e      	ldr	r6, [r5, #0]
    80b0:	602a      	str	r2, [r5, #0]
    80b2:	2280      	movs	r2, #128	; 0x80
    80b4:	0152      	lsls	r2, r2, #5
    80b6:	401a      	ands	r2, r3
    80b8:	d001      	beq.n	80be <__sflush_r+0x30>
    80ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
    80bc:	e015      	b.n	80ea <__sflush_r+0x5c>
    80be:	1c28      	adds	r0, r5, #0
    80c0:	6a21      	ldr	r1, [r4, #32]
    80c2:	2301      	movs	r3, #1
    80c4:	47b8      	blx	r7
    80c6:	1c02      	adds	r2, r0, #0
    80c8:	1c41      	adds	r1, r0, #1
    80ca:	d10e      	bne.n	80ea <__sflush_r+0x5c>
    80cc:	682b      	ldr	r3, [r5, #0]
    80ce:	2b00      	cmp	r3, #0
    80d0:	d00b      	beq.n	80ea <__sflush_r+0x5c>
    80d2:	2b1d      	cmp	r3, #29
    80d4:	d001      	beq.n	80da <__sflush_r+0x4c>
    80d6:	2b16      	cmp	r3, #22
    80d8:	d102      	bne.n	80e0 <__sflush_r+0x52>
    80da:	602e      	str	r6, [r5, #0]
    80dc:	2000      	movs	r0, #0
    80de:	e05e      	b.n	819e <__sflush_r+0x110>
    80e0:	89a3      	ldrh	r3, [r4, #12]
    80e2:	2140      	movs	r1, #64	; 0x40
    80e4:	430b      	orrs	r3, r1
    80e6:	81a3      	strh	r3, [r4, #12]
    80e8:	e059      	b.n	819e <__sflush_r+0x110>
    80ea:	89a3      	ldrh	r3, [r4, #12]
    80ec:	075f      	lsls	r7, r3, #29
    80ee:	d506      	bpl.n	80fe <__sflush_r+0x70>
    80f0:	6861      	ldr	r1, [r4, #4]
    80f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    80f4:	1a52      	subs	r2, r2, r1
    80f6:	2b00      	cmp	r3, #0
    80f8:	d001      	beq.n	80fe <__sflush_r+0x70>
    80fa:	6c27      	ldr	r7, [r4, #64]	; 0x40
    80fc:	1bd2      	subs	r2, r2, r7
    80fe:	1c28      	adds	r0, r5, #0
    8100:	6a21      	ldr	r1, [r4, #32]
    8102:	2300      	movs	r3, #0
    8104:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8106:	47b8      	blx	r7
    8108:	89a2      	ldrh	r2, [r4, #12]
    810a:	1c41      	adds	r1, r0, #1
    810c:	d106      	bne.n	811c <__sflush_r+0x8e>
    810e:	682b      	ldr	r3, [r5, #0]
    8110:	2b00      	cmp	r3, #0
    8112:	d003      	beq.n	811c <__sflush_r+0x8e>
    8114:	2b1d      	cmp	r3, #29
    8116:	d001      	beq.n	811c <__sflush_r+0x8e>
    8118:	2b16      	cmp	r3, #22
    811a:	d119      	bne.n	8150 <__sflush_r+0xc2>
    811c:	2300      	movs	r3, #0
    811e:	6063      	str	r3, [r4, #4]
    8120:	6923      	ldr	r3, [r4, #16]
    8122:	6023      	str	r3, [r4, #0]
    8124:	04d7      	lsls	r7, r2, #19
    8126:	d505      	bpl.n	8134 <__sflush_r+0xa6>
    8128:	1c41      	adds	r1, r0, #1
    812a:	d102      	bne.n	8132 <__sflush_r+0xa4>
    812c:	682a      	ldr	r2, [r5, #0]
    812e:	2a00      	cmp	r2, #0
    8130:	d100      	bne.n	8134 <__sflush_r+0xa6>
    8132:	6560      	str	r0, [r4, #84]	; 0x54
    8134:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8136:	602e      	str	r6, [r5, #0]
    8138:	2900      	cmp	r1, #0
    813a:	d0cf      	beq.n	80dc <__sflush_r+0x4e>
    813c:	1c23      	adds	r3, r4, #0
    813e:	3344      	adds	r3, #68	; 0x44
    8140:	4299      	cmp	r1, r3
    8142:	d002      	beq.n	814a <__sflush_r+0xbc>
    8144:	1c28      	adds	r0, r5, #0
    8146:	f000 f999 	bl	847c <_free_r>
    814a:	2000      	movs	r0, #0
    814c:	6360      	str	r0, [r4, #52]	; 0x34
    814e:	e026      	b.n	819e <__sflush_r+0x110>
    8150:	2340      	movs	r3, #64	; 0x40
    8152:	431a      	orrs	r2, r3
    8154:	81a2      	strh	r2, [r4, #12]
    8156:	e022      	b.n	819e <__sflush_r+0x110>
    8158:	6926      	ldr	r6, [r4, #16]
    815a:	2e00      	cmp	r6, #0
    815c:	d0be      	beq.n	80dc <__sflush_r+0x4e>
    815e:	6827      	ldr	r7, [r4, #0]
    8160:	2200      	movs	r2, #0
    8162:	1bbf      	subs	r7, r7, r6
    8164:	9701      	str	r7, [sp, #4]
    8166:	6026      	str	r6, [r4, #0]
    8168:	0799      	lsls	r1, r3, #30
    816a:	d100      	bne.n	816e <__sflush_r+0xe0>
    816c:	6962      	ldr	r2, [r4, #20]
    816e:	60a2      	str	r2, [r4, #8]
    8170:	9f01      	ldr	r7, [sp, #4]
    8172:	2f00      	cmp	r7, #0
    8174:	ddb2      	ble.n	80dc <__sflush_r+0x4e>
    8176:	1c28      	adds	r0, r5, #0
    8178:	6a21      	ldr	r1, [r4, #32]
    817a:	1c32      	adds	r2, r6, #0
    817c:	9b01      	ldr	r3, [sp, #4]
    817e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    8180:	47b8      	blx	r7
    8182:	2800      	cmp	r0, #0
    8184:	dc06      	bgt.n	8194 <__sflush_r+0x106>
    8186:	89a3      	ldrh	r3, [r4, #12]
    8188:	2240      	movs	r2, #64	; 0x40
    818a:	4313      	orrs	r3, r2
    818c:	2001      	movs	r0, #1
    818e:	81a3      	strh	r3, [r4, #12]
    8190:	4240      	negs	r0, r0
    8192:	e004      	b.n	819e <__sflush_r+0x110>
    8194:	9f01      	ldr	r7, [sp, #4]
    8196:	1836      	adds	r6, r6, r0
    8198:	1a3f      	subs	r7, r7, r0
    819a:	9701      	str	r7, [sp, #4]
    819c:	e7e8      	b.n	8170 <__sflush_r+0xe2>
    819e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000081a0 <_fflush_r>:
    81a0:	690a      	ldr	r2, [r1, #16]
    81a2:	b538      	push	{r3, r4, r5, lr}
    81a4:	1c05      	adds	r5, r0, #0
    81a6:	1c0c      	adds	r4, r1, #0
    81a8:	2a00      	cmp	r2, #0
    81aa:	d101      	bne.n	81b0 <_fflush_r+0x10>
    81ac:	2000      	movs	r0, #0
    81ae:	e01c      	b.n	81ea <_fflush_r+0x4a>
    81b0:	2800      	cmp	r0, #0
    81b2:	d004      	beq.n	81be <_fflush_r+0x1e>
    81b4:	6983      	ldr	r3, [r0, #24]
    81b6:	2b00      	cmp	r3, #0
    81b8:	d101      	bne.n	81be <_fflush_r+0x1e>
    81ba:	f000 f871 	bl	82a0 <__sinit>
    81be:	4b0b      	ldr	r3, [pc, #44]	; (81ec <_fflush_r+0x4c>)
    81c0:	429c      	cmp	r4, r3
    81c2:	d101      	bne.n	81c8 <_fflush_r+0x28>
    81c4:	686c      	ldr	r4, [r5, #4]
    81c6:	e008      	b.n	81da <_fflush_r+0x3a>
    81c8:	4b09      	ldr	r3, [pc, #36]	; (81f0 <_fflush_r+0x50>)
    81ca:	429c      	cmp	r4, r3
    81cc:	d101      	bne.n	81d2 <_fflush_r+0x32>
    81ce:	68ac      	ldr	r4, [r5, #8]
    81d0:	e003      	b.n	81da <_fflush_r+0x3a>
    81d2:	4b08      	ldr	r3, [pc, #32]	; (81f4 <_fflush_r+0x54>)
    81d4:	429c      	cmp	r4, r3
    81d6:	d100      	bne.n	81da <_fflush_r+0x3a>
    81d8:	68ec      	ldr	r4, [r5, #12]
    81da:	220c      	movs	r2, #12
    81dc:	5ea3      	ldrsh	r3, [r4, r2]
    81de:	2b00      	cmp	r3, #0
    81e0:	d0e4      	beq.n	81ac <_fflush_r+0xc>
    81e2:	1c28      	adds	r0, r5, #0
    81e4:	1c21      	adds	r1, r4, #0
    81e6:	f7ff ff52 	bl	808e <__sflush_r>
    81ea:	bd38      	pop	{r3, r4, r5, pc}
    81ec:	000094c0 	.word	0x000094c0
    81f0:	000094e0 	.word	0x000094e0
    81f4:	00009500 	.word	0x00009500

000081f8 <_cleanup_r>:
    81f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81fa:	1c04      	adds	r4, r0, #0
    81fc:	1c07      	adds	r7, r0, #0
    81fe:	3448      	adds	r4, #72	; 0x48
    8200:	2c00      	cmp	r4, #0
    8202:	d012      	beq.n	822a <_cleanup_r+0x32>
    8204:	68a5      	ldr	r5, [r4, #8]
    8206:	6866      	ldr	r6, [r4, #4]
    8208:	3e01      	subs	r6, #1
    820a:	d40c      	bmi.n	8226 <_cleanup_r+0x2e>
    820c:	89ab      	ldrh	r3, [r5, #12]
    820e:	2b01      	cmp	r3, #1
    8210:	d907      	bls.n	8222 <_cleanup_r+0x2a>
    8212:	220e      	movs	r2, #14
    8214:	5eab      	ldrsh	r3, [r5, r2]
    8216:	3301      	adds	r3, #1
    8218:	d003      	beq.n	8222 <_cleanup_r+0x2a>
    821a:	1c38      	adds	r0, r7, #0
    821c:	1c29      	adds	r1, r5, #0
    821e:	f7ff ffbf 	bl	81a0 <_fflush_r>
    8222:	3568      	adds	r5, #104	; 0x68
    8224:	e7f0      	b.n	8208 <_cleanup_r+0x10>
    8226:	6824      	ldr	r4, [r4, #0]
    8228:	e7ea      	b.n	8200 <_cleanup_r+0x8>
    822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000822c <std.isra.0>:
    822c:	2300      	movs	r3, #0
    822e:	b510      	push	{r4, lr}
    8230:	1c04      	adds	r4, r0, #0
    8232:	6003      	str	r3, [r0, #0]
    8234:	6043      	str	r3, [r0, #4]
    8236:	6083      	str	r3, [r0, #8]
    8238:	8181      	strh	r1, [r0, #12]
    823a:	6643      	str	r3, [r0, #100]	; 0x64
    823c:	81c2      	strh	r2, [r0, #14]
    823e:	6103      	str	r3, [r0, #16]
    8240:	6143      	str	r3, [r0, #20]
    8242:	6183      	str	r3, [r0, #24]
    8244:	1c19      	adds	r1, r3, #0
    8246:	2208      	movs	r2, #8
    8248:	305c      	adds	r0, #92	; 0x5c
    824a:	f7ff f810 	bl	726e <memset>
    824e:	4b05      	ldr	r3, [pc, #20]	; (8264 <std.isra.0+0x38>)
    8250:	6224      	str	r4, [r4, #32]
    8252:	6263      	str	r3, [r4, #36]	; 0x24
    8254:	4b04      	ldr	r3, [pc, #16]	; (8268 <std.isra.0+0x3c>)
    8256:	62a3      	str	r3, [r4, #40]	; 0x28
    8258:	4b04      	ldr	r3, [pc, #16]	; (826c <std.isra.0+0x40>)
    825a:	62e3      	str	r3, [r4, #44]	; 0x2c
    825c:	4b04      	ldr	r3, [pc, #16]	; (8270 <std.isra.0+0x44>)
    825e:	6323      	str	r3, [r4, #48]	; 0x30
    8260:	bd10      	pop	{r4, pc}
    8262:	46c0      	nop			; (mov r8, r8)
    8264:	000086bd 	.word	0x000086bd
    8268:	000086e5 	.word	0x000086e5
    826c:	0000871d 	.word	0x0000871d
    8270:	00008749 	.word	0x00008749

00008274 <__sfmoreglue>:
    8274:	b570      	push	{r4, r5, r6, lr}
    8276:	1e4b      	subs	r3, r1, #1
    8278:	2568      	movs	r5, #104	; 0x68
    827a:	435d      	muls	r5, r3
    827c:	1c0e      	adds	r6, r1, #0
    827e:	1c29      	adds	r1, r5, #0
    8280:	3174      	adds	r1, #116	; 0x74
    8282:	f000 f943 	bl	850c <_malloc_r>
    8286:	1e04      	subs	r4, r0, #0
    8288:	d008      	beq.n	829c <__sfmoreglue+0x28>
    828a:	2100      	movs	r1, #0
    828c:	6001      	str	r1, [r0, #0]
    828e:	6046      	str	r6, [r0, #4]
    8290:	1c2a      	adds	r2, r5, #0
    8292:	300c      	adds	r0, #12
    8294:	60a0      	str	r0, [r4, #8]
    8296:	3268      	adds	r2, #104	; 0x68
    8298:	f7fe ffe9 	bl	726e <memset>
    829c:	1c20      	adds	r0, r4, #0
    829e:	bd70      	pop	{r4, r5, r6, pc}

000082a0 <__sinit>:
    82a0:	6983      	ldr	r3, [r0, #24]
    82a2:	b513      	push	{r0, r1, r4, lr}
    82a4:	1c04      	adds	r4, r0, #0
    82a6:	2b00      	cmp	r3, #0
    82a8:	d127      	bne.n	82fa <__sinit+0x5a>
    82aa:	6483      	str	r3, [r0, #72]	; 0x48
    82ac:	64c3      	str	r3, [r0, #76]	; 0x4c
    82ae:	6503      	str	r3, [r0, #80]	; 0x50
    82b0:	4b12      	ldr	r3, [pc, #72]	; (82fc <__sinit+0x5c>)
    82b2:	4a13      	ldr	r2, [pc, #76]	; (8300 <__sinit+0x60>)
    82b4:	681b      	ldr	r3, [r3, #0]
    82b6:	6282      	str	r2, [r0, #40]	; 0x28
    82b8:	4298      	cmp	r0, r3
    82ba:	d101      	bne.n	82c0 <__sinit+0x20>
    82bc:	2301      	movs	r3, #1
    82be:	6183      	str	r3, [r0, #24]
    82c0:	1c20      	adds	r0, r4, #0
    82c2:	f000 f81f 	bl	8304 <__sfp>
    82c6:	6060      	str	r0, [r4, #4]
    82c8:	1c20      	adds	r0, r4, #0
    82ca:	f000 f81b 	bl	8304 <__sfp>
    82ce:	60a0      	str	r0, [r4, #8]
    82d0:	1c20      	adds	r0, r4, #0
    82d2:	f000 f817 	bl	8304 <__sfp>
    82d6:	2104      	movs	r1, #4
    82d8:	60e0      	str	r0, [r4, #12]
    82da:	2200      	movs	r2, #0
    82dc:	6860      	ldr	r0, [r4, #4]
    82de:	f7ff ffa5 	bl	822c <std.isra.0>
    82e2:	68a0      	ldr	r0, [r4, #8]
    82e4:	2109      	movs	r1, #9
    82e6:	2201      	movs	r2, #1
    82e8:	f7ff ffa0 	bl	822c <std.isra.0>
    82ec:	68e0      	ldr	r0, [r4, #12]
    82ee:	2112      	movs	r1, #18
    82f0:	2202      	movs	r2, #2
    82f2:	f7ff ff9b 	bl	822c <std.isra.0>
    82f6:	2301      	movs	r3, #1
    82f8:	61a3      	str	r3, [r4, #24]
    82fa:	bd13      	pop	{r0, r1, r4, pc}
    82fc:	00009388 	.word	0x00009388
    8300:	000081f9 	.word	0x000081f9

00008304 <__sfp>:
    8304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8306:	4b1d      	ldr	r3, [pc, #116]	; (837c <__sfp+0x78>)
    8308:	1c07      	adds	r7, r0, #0
    830a:	681e      	ldr	r6, [r3, #0]
    830c:	69b2      	ldr	r2, [r6, #24]
    830e:	2a00      	cmp	r2, #0
    8310:	d102      	bne.n	8318 <__sfp+0x14>
    8312:	1c30      	adds	r0, r6, #0
    8314:	f7ff ffc4 	bl	82a0 <__sinit>
    8318:	3648      	adds	r6, #72	; 0x48
    831a:	68b4      	ldr	r4, [r6, #8]
    831c:	6873      	ldr	r3, [r6, #4]
    831e:	3b01      	subs	r3, #1
    8320:	d405      	bmi.n	832e <__sfp+0x2a>
    8322:	220c      	movs	r2, #12
    8324:	5ea5      	ldrsh	r5, [r4, r2]
    8326:	2d00      	cmp	r5, #0
    8328:	d010      	beq.n	834c <__sfp+0x48>
    832a:	3468      	adds	r4, #104	; 0x68
    832c:	e7f7      	b.n	831e <__sfp+0x1a>
    832e:	6833      	ldr	r3, [r6, #0]
    8330:	2b00      	cmp	r3, #0
    8332:	d106      	bne.n	8342 <__sfp+0x3e>
    8334:	1c38      	adds	r0, r7, #0
    8336:	2104      	movs	r1, #4
    8338:	f7ff ff9c 	bl	8274 <__sfmoreglue>
    833c:	6030      	str	r0, [r6, #0]
    833e:	2800      	cmp	r0, #0
    8340:	d001      	beq.n	8346 <__sfp+0x42>
    8342:	6836      	ldr	r6, [r6, #0]
    8344:	e7e9      	b.n	831a <__sfp+0x16>
    8346:	230c      	movs	r3, #12
    8348:	603b      	str	r3, [r7, #0]
    834a:	e016      	b.n	837a <__sfp+0x76>
    834c:	2301      	movs	r3, #1
    834e:	425b      	negs	r3, r3
    8350:	81e3      	strh	r3, [r4, #14]
    8352:	1c20      	adds	r0, r4, #0
    8354:	2301      	movs	r3, #1
    8356:	81a3      	strh	r3, [r4, #12]
    8358:	6665      	str	r5, [r4, #100]	; 0x64
    835a:	6025      	str	r5, [r4, #0]
    835c:	60a5      	str	r5, [r4, #8]
    835e:	6065      	str	r5, [r4, #4]
    8360:	6125      	str	r5, [r4, #16]
    8362:	6165      	str	r5, [r4, #20]
    8364:	61a5      	str	r5, [r4, #24]
    8366:	305c      	adds	r0, #92	; 0x5c
    8368:	1c29      	adds	r1, r5, #0
    836a:	2208      	movs	r2, #8
    836c:	f7fe ff7f 	bl	726e <memset>
    8370:	6365      	str	r5, [r4, #52]	; 0x34
    8372:	63a5      	str	r5, [r4, #56]	; 0x38
    8374:	64a5      	str	r5, [r4, #72]	; 0x48
    8376:	64e5      	str	r5, [r4, #76]	; 0x4c
    8378:	1c20      	adds	r0, r4, #0
    837a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    837c:	00009388 	.word	0x00009388

00008380 <__smakebuf_r>:
    8380:	b5f0      	push	{r4, r5, r6, r7, lr}
    8382:	898b      	ldrh	r3, [r1, #12]
    8384:	b091      	sub	sp, #68	; 0x44
    8386:	1c05      	adds	r5, r0, #0
    8388:	1c0c      	adds	r4, r1, #0
    838a:	079a      	lsls	r2, r3, #30
    838c:	d425      	bmi.n	83da <__smakebuf_r+0x5a>
    838e:	230e      	movs	r3, #14
    8390:	5ec9      	ldrsh	r1, [r1, r3]
    8392:	2900      	cmp	r1, #0
    8394:	da06      	bge.n	83a4 <__smakebuf_r+0x24>
    8396:	89a7      	ldrh	r7, [r4, #12]
    8398:	2380      	movs	r3, #128	; 0x80
    839a:	401f      	ands	r7, r3
    839c:	d00f      	beq.n	83be <__smakebuf_r+0x3e>
    839e:	2700      	movs	r7, #0
    83a0:	2640      	movs	r6, #64	; 0x40
    83a2:	e00e      	b.n	83c2 <__smakebuf_r+0x42>
    83a4:	aa01      	add	r2, sp, #4
    83a6:	f000 f9fb 	bl	87a0 <_fstat_r>
    83aa:	2800      	cmp	r0, #0
    83ac:	dbf3      	blt.n	8396 <__smakebuf_r+0x16>
    83ae:	9b02      	ldr	r3, [sp, #8]
    83b0:	27f0      	movs	r7, #240	; 0xf0
    83b2:	023f      	lsls	r7, r7, #8
    83b4:	4a18      	ldr	r2, [pc, #96]	; (8418 <__smakebuf_r+0x98>)
    83b6:	401f      	ands	r7, r3
    83b8:	18bf      	adds	r7, r7, r2
    83ba:	427b      	negs	r3, r7
    83bc:	415f      	adcs	r7, r3
    83be:	2680      	movs	r6, #128	; 0x80
    83c0:	00f6      	lsls	r6, r6, #3
    83c2:	1c28      	adds	r0, r5, #0
    83c4:	1c31      	adds	r1, r6, #0
    83c6:	f000 f8a1 	bl	850c <_malloc_r>
    83ca:	2800      	cmp	r0, #0
    83cc:	d10c      	bne.n	83e8 <__smakebuf_r+0x68>
    83ce:	89a3      	ldrh	r3, [r4, #12]
    83d0:	059a      	lsls	r2, r3, #22
    83d2:	d41f      	bmi.n	8414 <__smakebuf_r+0x94>
    83d4:	2202      	movs	r2, #2
    83d6:	4313      	orrs	r3, r2
    83d8:	81a3      	strh	r3, [r4, #12]
    83da:	1c23      	adds	r3, r4, #0
    83dc:	3347      	adds	r3, #71	; 0x47
    83de:	6023      	str	r3, [r4, #0]
    83e0:	6123      	str	r3, [r4, #16]
    83e2:	2301      	movs	r3, #1
    83e4:	6163      	str	r3, [r4, #20]
    83e6:	e015      	b.n	8414 <__smakebuf_r+0x94>
    83e8:	4b0c      	ldr	r3, [pc, #48]	; (841c <__smakebuf_r+0x9c>)
    83ea:	2280      	movs	r2, #128	; 0x80
    83ec:	62ab      	str	r3, [r5, #40]	; 0x28
    83ee:	89a3      	ldrh	r3, [r4, #12]
    83f0:	6020      	str	r0, [r4, #0]
    83f2:	4313      	orrs	r3, r2
    83f4:	81a3      	strh	r3, [r4, #12]
    83f6:	6120      	str	r0, [r4, #16]
    83f8:	6166      	str	r6, [r4, #20]
    83fa:	2f00      	cmp	r7, #0
    83fc:	d00a      	beq.n	8414 <__smakebuf_r+0x94>
    83fe:	230e      	movs	r3, #14
    8400:	5ee1      	ldrsh	r1, [r4, r3]
    8402:	1c28      	adds	r0, r5, #0
    8404:	f000 f9de 	bl	87c4 <_isatty_r>
    8408:	2800      	cmp	r0, #0
    840a:	d003      	beq.n	8414 <__smakebuf_r+0x94>
    840c:	89a3      	ldrh	r3, [r4, #12]
    840e:	2201      	movs	r2, #1
    8410:	4313      	orrs	r3, r2
    8412:	81a3      	strh	r3, [r4, #12]
    8414:	b011      	add	sp, #68	; 0x44
    8416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8418:	ffffe000 	.word	0xffffe000
    841c:	000081f9 	.word	0x000081f9

00008420 <malloc>:
    8420:	b508      	push	{r3, lr}
    8422:	4b03      	ldr	r3, [pc, #12]	; (8430 <malloc+0x10>)
    8424:	1c01      	adds	r1, r0, #0
    8426:	6818      	ldr	r0, [r3, #0]
    8428:	f000 f870 	bl	850c <_malloc_r>
    842c:	bd08      	pop	{r3, pc}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	20000474 	.word	0x20000474

00008434 <memchr>:
    8434:	b2c9      	uxtb	r1, r1
    8436:	1882      	adds	r2, r0, r2
    8438:	4290      	cmp	r0, r2
    843a:	d004      	beq.n	8446 <memchr+0x12>
    843c:	7803      	ldrb	r3, [r0, #0]
    843e:	428b      	cmp	r3, r1
    8440:	d002      	beq.n	8448 <memchr+0x14>
    8442:	3001      	adds	r0, #1
    8444:	e7f8      	b.n	8438 <memchr+0x4>
    8446:	2000      	movs	r0, #0
    8448:	4770      	bx	lr

0000844a <memmove>:
    844a:	b570      	push	{r4, r5, r6, lr}
    844c:	4281      	cmp	r1, r0
    844e:	d301      	bcc.n	8454 <memmove+0xa>
    8450:	2300      	movs	r3, #0
    8452:	e00c      	b.n	846e <memmove+0x24>
    8454:	188c      	adds	r4, r1, r2
    8456:	42a0      	cmp	r0, r4
    8458:	d2fa      	bcs.n	8450 <memmove+0x6>
    845a:	1885      	adds	r5, r0, r2
    845c:	1c13      	adds	r3, r2, #0
    845e:	3b01      	subs	r3, #1
    8460:	d30b      	bcc.n	847a <memmove+0x30>
    8462:	4251      	negs	r1, r2
    8464:	1866      	adds	r6, r4, r1
    8466:	5cf6      	ldrb	r6, [r6, r3]
    8468:	1869      	adds	r1, r5, r1
    846a:	54ce      	strb	r6, [r1, r3]
    846c:	e7f7      	b.n	845e <memmove+0x14>
    846e:	4293      	cmp	r3, r2
    8470:	d003      	beq.n	847a <memmove+0x30>
    8472:	5ccc      	ldrb	r4, [r1, r3]
    8474:	54c4      	strb	r4, [r0, r3]
    8476:	3301      	adds	r3, #1
    8478:	e7f9      	b.n	846e <memmove+0x24>
    847a:	bd70      	pop	{r4, r5, r6, pc}

0000847c <_free_r>:
    847c:	b530      	push	{r4, r5, lr}
    847e:	2900      	cmp	r1, #0
    8480:	d040      	beq.n	8504 <_free_r+0x88>
    8482:	3904      	subs	r1, #4
    8484:	680b      	ldr	r3, [r1, #0]
    8486:	2b00      	cmp	r3, #0
    8488:	da00      	bge.n	848c <_free_r+0x10>
    848a:	18c9      	adds	r1, r1, r3
    848c:	4a1e      	ldr	r2, [pc, #120]	; (8508 <_free_r+0x8c>)
    848e:	6813      	ldr	r3, [r2, #0]
    8490:	1c14      	adds	r4, r2, #0
    8492:	2b00      	cmp	r3, #0
    8494:	d102      	bne.n	849c <_free_r+0x20>
    8496:	604b      	str	r3, [r1, #4]
    8498:	6011      	str	r1, [r2, #0]
    849a:	e033      	b.n	8504 <_free_r+0x88>
    849c:	4299      	cmp	r1, r3
    849e:	d20f      	bcs.n	84c0 <_free_r+0x44>
    84a0:	6808      	ldr	r0, [r1, #0]
    84a2:	180a      	adds	r2, r1, r0
    84a4:	429a      	cmp	r2, r3
    84a6:	d105      	bne.n	84b4 <_free_r+0x38>
    84a8:	6813      	ldr	r3, [r2, #0]
    84aa:	6852      	ldr	r2, [r2, #4]
    84ac:	18c0      	adds	r0, r0, r3
    84ae:	6008      	str	r0, [r1, #0]
    84b0:	604a      	str	r2, [r1, #4]
    84b2:	e000      	b.n	84b6 <_free_r+0x3a>
    84b4:	604b      	str	r3, [r1, #4]
    84b6:	6021      	str	r1, [r4, #0]
    84b8:	e024      	b.n	8504 <_free_r+0x88>
    84ba:	428a      	cmp	r2, r1
    84bc:	d803      	bhi.n	84c6 <_free_r+0x4a>
    84be:	1c13      	adds	r3, r2, #0
    84c0:	685a      	ldr	r2, [r3, #4]
    84c2:	2a00      	cmp	r2, #0
    84c4:	d1f9      	bne.n	84ba <_free_r+0x3e>
    84c6:	681d      	ldr	r5, [r3, #0]
    84c8:	195c      	adds	r4, r3, r5
    84ca:	428c      	cmp	r4, r1
    84cc:	d10b      	bne.n	84e6 <_free_r+0x6a>
    84ce:	6809      	ldr	r1, [r1, #0]
    84d0:	1869      	adds	r1, r5, r1
    84d2:	1858      	adds	r0, r3, r1
    84d4:	6019      	str	r1, [r3, #0]
    84d6:	4290      	cmp	r0, r2
    84d8:	d114      	bne.n	8504 <_free_r+0x88>
    84da:	6814      	ldr	r4, [r2, #0]
    84dc:	6852      	ldr	r2, [r2, #4]
    84de:	1909      	adds	r1, r1, r4
    84e0:	6019      	str	r1, [r3, #0]
    84e2:	605a      	str	r2, [r3, #4]
    84e4:	e00e      	b.n	8504 <_free_r+0x88>
    84e6:	428c      	cmp	r4, r1
    84e8:	d902      	bls.n	84f0 <_free_r+0x74>
    84ea:	230c      	movs	r3, #12
    84ec:	6003      	str	r3, [r0, #0]
    84ee:	e009      	b.n	8504 <_free_r+0x88>
    84f0:	6808      	ldr	r0, [r1, #0]
    84f2:	180c      	adds	r4, r1, r0
    84f4:	4294      	cmp	r4, r2
    84f6:	d103      	bne.n	8500 <_free_r+0x84>
    84f8:	6814      	ldr	r4, [r2, #0]
    84fa:	6852      	ldr	r2, [r2, #4]
    84fc:	1900      	adds	r0, r0, r4
    84fe:	6008      	str	r0, [r1, #0]
    8500:	604a      	str	r2, [r1, #4]
    8502:	6059      	str	r1, [r3, #4]
    8504:	bd30      	pop	{r4, r5, pc}
    8506:	46c0      	nop			; (mov r8, r8)
    8508:	20000c8c 	.word	0x20000c8c

0000850c <_malloc_r>:
    850c:	b570      	push	{r4, r5, r6, lr}
    850e:	2303      	movs	r3, #3
    8510:	1ccd      	adds	r5, r1, #3
    8512:	439d      	bics	r5, r3
    8514:	3508      	adds	r5, #8
    8516:	1c06      	adds	r6, r0, #0
    8518:	2d0c      	cmp	r5, #12
    851a:	d201      	bcs.n	8520 <_malloc_r+0x14>
    851c:	250c      	movs	r5, #12
    851e:	e001      	b.n	8524 <_malloc_r+0x18>
    8520:	2d00      	cmp	r5, #0
    8522:	db3f      	blt.n	85a4 <_malloc_r+0x98>
    8524:	428d      	cmp	r5, r1
    8526:	d33d      	bcc.n	85a4 <_malloc_r+0x98>
    8528:	4b20      	ldr	r3, [pc, #128]	; (85ac <_malloc_r+0xa0>)
    852a:	681c      	ldr	r4, [r3, #0]
    852c:	1c1a      	adds	r2, r3, #0
    852e:	1c21      	adds	r1, r4, #0
    8530:	2900      	cmp	r1, #0
    8532:	d013      	beq.n	855c <_malloc_r+0x50>
    8534:	6808      	ldr	r0, [r1, #0]
    8536:	1b43      	subs	r3, r0, r5
    8538:	d40d      	bmi.n	8556 <_malloc_r+0x4a>
    853a:	2b0b      	cmp	r3, #11
    853c:	d902      	bls.n	8544 <_malloc_r+0x38>
    853e:	600b      	str	r3, [r1, #0]
    8540:	18cc      	adds	r4, r1, r3
    8542:	e01e      	b.n	8582 <_malloc_r+0x76>
    8544:	428c      	cmp	r4, r1
    8546:	d102      	bne.n	854e <_malloc_r+0x42>
    8548:	6863      	ldr	r3, [r4, #4]
    854a:	6013      	str	r3, [r2, #0]
    854c:	e01a      	b.n	8584 <_malloc_r+0x78>
    854e:	6848      	ldr	r0, [r1, #4]
    8550:	6060      	str	r0, [r4, #4]
    8552:	1c0c      	adds	r4, r1, #0
    8554:	e016      	b.n	8584 <_malloc_r+0x78>
    8556:	1c0c      	adds	r4, r1, #0
    8558:	6849      	ldr	r1, [r1, #4]
    855a:	e7e9      	b.n	8530 <_malloc_r+0x24>
    855c:	4c14      	ldr	r4, [pc, #80]	; (85b0 <_malloc_r+0xa4>)
    855e:	6820      	ldr	r0, [r4, #0]
    8560:	2800      	cmp	r0, #0
    8562:	d103      	bne.n	856c <_malloc_r+0x60>
    8564:	1c30      	adds	r0, r6, #0
    8566:	f000 f84b 	bl	8600 <_sbrk_r>
    856a:	6020      	str	r0, [r4, #0]
    856c:	1c30      	adds	r0, r6, #0
    856e:	1c29      	adds	r1, r5, #0
    8570:	f000 f846 	bl	8600 <_sbrk_r>
    8574:	1c43      	adds	r3, r0, #1
    8576:	d015      	beq.n	85a4 <_malloc_r+0x98>
    8578:	1cc4      	adds	r4, r0, #3
    857a:	2303      	movs	r3, #3
    857c:	439c      	bics	r4, r3
    857e:	4284      	cmp	r4, r0
    8580:	d10a      	bne.n	8598 <_malloc_r+0x8c>
    8582:	6025      	str	r5, [r4, #0]
    8584:	1c20      	adds	r0, r4, #0
    8586:	300b      	adds	r0, #11
    8588:	2207      	movs	r2, #7
    858a:	1d23      	adds	r3, r4, #4
    858c:	4390      	bics	r0, r2
    858e:	1ac3      	subs	r3, r0, r3
    8590:	d00b      	beq.n	85aa <_malloc_r+0x9e>
    8592:	425a      	negs	r2, r3
    8594:	50e2      	str	r2, [r4, r3]
    8596:	e008      	b.n	85aa <_malloc_r+0x9e>
    8598:	1a21      	subs	r1, r4, r0
    859a:	1c30      	adds	r0, r6, #0
    859c:	f000 f830 	bl	8600 <_sbrk_r>
    85a0:	3001      	adds	r0, #1
    85a2:	d1ee      	bne.n	8582 <_malloc_r+0x76>
    85a4:	230c      	movs	r3, #12
    85a6:	6033      	str	r3, [r6, #0]
    85a8:	2000      	movs	r0, #0
    85aa:	bd70      	pop	{r4, r5, r6, pc}
    85ac:	20000c8c 	.word	0x20000c8c
    85b0:	20000c88 	.word	0x20000c88

000085b4 <_realloc_r>:
    85b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85b6:	1c06      	adds	r6, r0, #0
    85b8:	1c0c      	adds	r4, r1, #0
    85ba:	1c15      	adds	r5, r2, #0
    85bc:	2900      	cmp	r1, #0
    85be:	d104      	bne.n	85ca <_realloc_r+0x16>
    85c0:	1c11      	adds	r1, r2, #0
    85c2:	f7ff ffa3 	bl	850c <_malloc_r>
    85c6:	1c04      	adds	r4, r0, #0
    85c8:	e018      	b.n	85fc <_realloc_r+0x48>
    85ca:	2a00      	cmp	r2, #0
    85cc:	d103      	bne.n	85d6 <_realloc_r+0x22>
    85ce:	f7ff ff55 	bl	847c <_free_r>
    85d2:	1c2c      	adds	r4, r5, #0
    85d4:	e012      	b.n	85fc <_realloc_r+0x48>
    85d6:	f000 f91b 	bl	8810 <_malloc_usable_size_r>
    85da:	42a8      	cmp	r0, r5
    85dc:	d20e      	bcs.n	85fc <_realloc_r+0x48>
    85de:	1c30      	adds	r0, r6, #0
    85e0:	1c29      	adds	r1, r5, #0
    85e2:	f7ff ff93 	bl	850c <_malloc_r>
    85e6:	1e07      	subs	r7, r0, #0
    85e8:	d007      	beq.n	85fa <_realloc_r+0x46>
    85ea:	1c21      	adds	r1, r4, #0
    85ec:	1c2a      	adds	r2, r5, #0
    85ee:	f7fe fe35 	bl	725c <memcpy>
    85f2:	1c30      	adds	r0, r6, #0
    85f4:	1c21      	adds	r1, r4, #0
    85f6:	f7ff ff41 	bl	847c <_free_r>
    85fa:	1c3c      	adds	r4, r7, #0
    85fc:	1c20      	adds	r0, r4, #0
    85fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008600 <_sbrk_r>:
    8600:	b538      	push	{r3, r4, r5, lr}
    8602:	4c07      	ldr	r4, [pc, #28]	; (8620 <_sbrk_r+0x20>)
    8604:	2300      	movs	r3, #0
    8606:	1c05      	adds	r5, r0, #0
    8608:	1c08      	adds	r0, r1, #0
    860a:	6023      	str	r3, [r4, #0]
    860c:	f7fc fdf6 	bl	51fc <_sbrk>
    8610:	1c43      	adds	r3, r0, #1
    8612:	d103      	bne.n	861c <_sbrk_r+0x1c>
    8614:	6823      	ldr	r3, [r4, #0]
    8616:	2b00      	cmp	r3, #0
    8618:	d000      	beq.n	861c <_sbrk_r+0x1c>
    861a:	602b      	str	r3, [r5, #0]
    861c:	bd38      	pop	{r3, r4, r5, pc}
    861e:	46c0      	nop			; (mov r8, r8)
    8620:	20000df4 	.word	0x20000df4

00008624 <_raise_r>:
    8624:	b538      	push	{r3, r4, r5, lr}
    8626:	1c04      	adds	r4, r0, #0
    8628:	1e0d      	subs	r5, r1, #0
    862a:	2d1f      	cmp	r5, #31
    862c:	d904      	bls.n	8638 <_raise_r+0x14>
    862e:	2316      	movs	r3, #22
    8630:	6003      	str	r3, [r0, #0]
    8632:	2001      	movs	r0, #1
    8634:	4240      	negs	r0, r0
    8636:	e01f      	b.n	8678 <_raise_r+0x54>
    8638:	6c43      	ldr	r3, [r0, #68]	; 0x44
    863a:	2b00      	cmp	r3, #0
    863c:	d004      	beq.n	8648 <_raise_r+0x24>
    863e:	008a      	lsls	r2, r1, #2
    8640:	189a      	adds	r2, r3, r2
    8642:	6813      	ldr	r3, [r2, #0]
    8644:	2b00      	cmp	r3, #0
    8646:	d108      	bne.n	865a <_raise_r+0x36>
    8648:	1c20      	adds	r0, r4, #0
    864a:	f000 f833 	bl	86b4 <_getpid_r>
    864e:	1c2a      	adds	r2, r5, #0
    8650:	1c01      	adds	r1, r0, #0
    8652:	1c20      	adds	r0, r4, #0
    8654:	f000 f81c 	bl	8690 <_kill_r>
    8658:	e00e      	b.n	8678 <_raise_r+0x54>
    865a:	2b01      	cmp	r3, #1
    865c:	d00b      	beq.n	8676 <_raise_r+0x52>
    865e:	1c59      	adds	r1, r3, #1
    8660:	d103      	bne.n	866a <_raise_r+0x46>
    8662:	2316      	movs	r3, #22
    8664:	6003      	str	r3, [r0, #0]
    8666:	2001      	movs	r0, #1
    8668:	e006      	b.n	8678 <_raise_r+0x54>
    866a:	2400      	movs	r4, #0
    866c:	1c28      	adds	r0, r5, #0
    866e:	6014      	str	r4, [r2, #0]
    8670:	4798      	blx	r3
    8672:	1c20      	adds	r0, r4, #0
    8674:	e000      	b.n	8678 <_raise_r+0x54>
    8676:	2000      	movs	r0, #0
    8678:	bd38      	pop	{r3, r4, r5, pc}
	...

0000867c <raise>:
    867c:	b508      	push	{r3, lr}
    867e:	4b03      	ldr	r3, [pc, #12]	; (868c <raise+0x10>)
    8680:	1c01      	adds	r1, r0, #0
    8682:	6818      	ldr	r0, [r3, #0]
    8684:	f7ff ffce 	bl	8624 <_raise_r>
    8688:	bd08      	pop	{r3, pc}
    868a:	46c0      	nop			; (mov r8, r8)
    868c:	20000474 	.word	0x20000474

00008690 <_kill_r>:
    8690:	b538      	push	{r3, r4, r5, lr}
    8692:	4c07      	ldr	r4, [pc, #28]	; (86b0 <_kill_r+0x20>)
    8694:	2300      	movs	r3, #0
    8696:	1c05      	adds	r5, r0, #0
    8698:	1c08      	adds	r0, r1, #0
    869a:	1c11      	adds	r1, r2, #0
    869c:	6023      	str	r3, [r4, #0]
    869e:	f7fc fdd7 	bl	5250 <_kill>
    86a2:	1c43      	adds	r3, r0, #1
    86a4:	d103      	bne.n	86ae <_kill_r+0x1e>
    86a6:	6823      	ldr	r3, [r4, #0]
    86a8:	2b00      	cmp	r3, #0
    86aa:	d000      	beq.n	86ae <_kill_r+0x1e>
    86ac:	602b      	str	r3, [r5, #0]
    86ae:	bd38      	pop	{r3, r4, r5, pc}
    86b0:	20000df4 	.word	0x20000df4

000086b4 <_getpid_r>:
    86b4:	b508      	push	{r3, lr}
    86b6:	f7fc fdcd 	bl	5254 <_getpid>
    86ba:	bd08      	pop	{r3, pc}

000086bc <__sread>:
    86bc:	b538      	push	{r3, r4, r5, lr}
    86be:	1c0c      	adds	r4, r1, #0
    86c0:	250e      	movs	r5, #14
    86c2:	5f49      	ldrsh	r1, [r1, r5]
    86c4:	f000 f8ae 	bl	8824 <_read_r>
    86c8:	2800      	cmp	r0, #0
    86ca:	db03      	blt.n	86d4 <__sread+0x18>
    86cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    86ce:	1813      	adds	r3, r2, r0
    86d0:	6563      	str	r3, [r4, #84]	; 0x54
    86d2:	e003      	b.n	86dc <__sread+0x20>
    86d4:	89a2      	ldrh	r2, [r4, #12]
    86d6:	4b02      	ldr	r3, [pc, #8]	; (86e0 <__sread+0x24>)
    86d8:	4013      	ands	r3, r2
    86da:	81a3      	strh	r3, [r4, #12]
    86dc:	bd38      	pop	{r3, r4, r5, pc}
    86de:	46c0      	nop			; (mov r8, r8)
    86e0:	ffffefff 	.word	0xffffefff

000086e4 <__swrite>:
    86e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86e6:	1c1e      	adds	r6, r3, #0
    86e8:	898b      	ldrh	r3, [r1, #12]
    86ea:	1c05      	adds	r5, r0, #0
    86ec:	1c0c      	adds	r4, r1, #0
    86ee:	1c17      	adds	r7, r2, #0
    86f0:	05da      	lsls	r2, r3, #23
    86f2:	d505      	bpl.n	8700 <__swrite+0x1c>
    86f4:	230e      	movs	r3, #14
    86f6:	5ec9      	ldrsh	r1, [r1, r3]
    86f8:	2200      	movs	r2, #0
    86fa:	2302      	movs	r3, #2
    86fc:	f000 f874 	bl	87e8 <_lseek_r>
    8700:	89a2      	ldrh	r2, [r4, #12]
    8702:	4b05      	ldr	r3, [pc, #20]	; (8718 <__swrite+0x34>)
    8704:	1c28      	adds	r0, r5, #0
    8706:	4013      	ands	r3, r2
    8708:	81a3      	strh	r3, [r4, #12]
    870a:	220e      	movs	r2, #14
    870c:	5ea1      	ldrsh	r1, [r4, r2]
    870e:	1c33      	adds	r3, r6, #0
    8710:	1c3a      	adds	r2, r7, #0
    8712:	f000 f81f 	bl	8754 <_write_r>
    8716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8718:	ffffefff 	.word	0xffffefff

0000871c <__sseek>:
    871c:	b538      	push	{r3, r4, r5, lr}
    871e:	1c0c      	adds	r4, r1, #0
    8720:	250e      	movs	r5, #14
    8722:	5f49      	ldrsh	r1, [r1, r5]
    8724:	f000 f860 	bl	87e8 <_lseek_r>
    8728:	89a3      	ldrh	r3, [r4, #12]
    872a:	1c42      	adds	r2, r0, #1
    872c:	d103      	bne.n	8736 <__sseek+0x1a>
    872e:	4a05      	ldr	r2, [pc, #20]	; (8744 <__sseek+0x28>)
    8730:	4013      	ands	r3, r2
    8732:	81a3      	strh	r3, [r4, #12]
    8734:	e004      	b.n	8740 <__sseek+0x24>
    8736:	2280      	movs	r2, #128	; 0x80
    8738:	0152      	lsls	r2, r2, #5
    873a:	4313      	orrs	r3, r2
    873c:	81a3      	strh	r3, [r4, #12]
    873e:	6560      	str	r0, [r4, #84]	; 0x54
    8740:	bd38      	pop	{r3, r4, r5, pc}
    8742:	46c0      	nop			; (mov r8, r8)
    8744:	ffffefff 	.word	0xffffefff

00008748 <__sclose>:
    8748:	b508      	push	{r3, lr}
    874a:	230e      	movs	r3, #14
    874c:	5ec9      	ldrsh	r1, [r1, r3]
    874e:	f000 f815 	bl	877c <_close_r>
    8752:	bd08      	pop	{r3, pc}

00008754 <_write_r>:
    8754:	b538      	push	{r3, r4, r5, lr}
    8756:	4c08      	ldr	r4, [pc, #32]	; (8778 <_write_r+0x24>)
    8758:	1c05      	adds	r5, r0, #0
    875a:	2000      	movs	r0, #0
    875c:	6020      	str	r0, [r4, #0]
    875e:	1c08      	adds	r0, r1, #0
    8760:	1c11      	adds	r1, r2, #0
    8762:	1c1a      	adds	r2, r3, #0
    8764:	f7fc fd20 	bl	51a8 <_write>
    8768:	1c43      	adds	r3, r0, #1
    876a:	d103      	bne.n	8774 <_write_r+0x20>
    876c:	6823      	ldr	r3, [r4, #0]
    876e:	2b00      	cmp	r3, #0
    8770:	d000      	beq.n	8774 <_write_r+0x20>
    8772:	602b      	str	r3, [r5, #0]
    8774:	bd38      	pop	{r3, r4, r5, pc}
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	20000df4 	.word	0x20000df4

0000877c <_close_r>:
    877c:	b538      	push	{r3, r4, r5, lr}
    877e:	4c07      	ldr	r4, [pc, #28]	; (879c <_close_r+0x20>)
    8780:	2300      	movs	r3, #0
    8782:	1c05      	adds	r5, r0, #0
    8784:	1c08      	adds	r0, r1, #0
    8786:	6023      	str	r3, [r4, #0]
    8788:	f7fc fd4a 	bl	5220 <_close>
    878c:	1c43      	adds	r3, r0, #1
    878e:	d103      	bne.n	8798 <_close_r+0x1c>
    8790:	6823      	ldr	r3, [r4, #0]
    8792:	2b00      	cmp	r3, #0
    8794:	d000      	beq.n	8798 <_close_r+0x1c>
    8796:	602b      	str	r3, [r5, #0]
    8798:	bd38      	pop	{r3, r4, r5, pc}
    879a:	46c0      	nop			; (mov r8, r8)
    879c:	20000df4 	.word	0x20000df4

000087a0 <_fstat_r>:
    87a0:	b538      	push	{r3, r4, r5, lr}
    87a2:	4c07      	ldr	r4, [pc, #28]	; (87c0 <_fstat_r+0x20>)
    87a4:	2300      	movs	r3, #0
    87a6:	1c05      	adds	r5, r0, #0
    87a8:	1c08      	adds	r0, r1, #0
    87aa:	1c11      	adds	r1, r2, #0
    87ac:	6023      	str	r3, [r4, #0]
    87ae:	f7fc fd3b 	bl	5228 <_fstat>
    87b2:	1c43      	adds	r3, r0, #1
    87b4:	d103      	bne.n	87be <_fstat_r+0x1e>
    87b6:	6823      	ldr	r3, [r4, #0]
    87b8:	2b00      	cmp	r3, #0
    87ba:	d000      	beq.n	87be <_fstat_r+0x1e>
    87bc:	602b      	str	r3, [r5, #0]
    87be:	bd38      	pop	{r3, r4, r5, pc}
    87c0:	20000df4 	.word	0x20000df4

000087c4 <_isatty_r>:
    87c4:	b538      	push	{r3, r4, r5, lr}
    87c6:	4c07      	ldr	r4, [pc, #28]	; (87e4 <_isatty_r+0x20>)
    87c8:	2300      	movs	r3, #0
    87ca:	1c05      	adds	r5, r0, #0
    87cc:	1c08      	adds	r0, r1, #0
    87ce:	6023      	str	r3, [r4, #0]
    87d0:	f7fc fd30 	bl	5234 <_isatty>
    87d4:	1c43      	adds	r3, r0, #1
    87d6:	d103      	bne.n	87e0 <_isatty_r+0x1c>
    87d8:	6823      	ldr	r3, [r4, #0]
    87da:	2b00      	cmp	r3, #0
    87dc:	d000      	beq.n	87e0 <_isatty_r+0x1c>
    87de:	602b      	str	r3, [r5, #0]
    87e0:	bd38      	pop	{r3, r4, r5, pc}
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	20000df4 	.word	0x20000df4

000087e8 <_lseek_r>:
    87e8:	b538      	push	{r3, r4, r5, lr}
    87ea:	4c08      	ldr	r4, [pc, #32]	; (880c <_lseek_r+0x24>)
    87ec:	1c05      	adds	r5, r0, #0
    87ee:	2000      	movs	r0, #0
    87f0:	6020      	str	r0, [r4, #0]
    87f2:	1c08      	adds	r0, r1, #0
    87f4:	1c11      	adds	r1, r2, #0
    87f6:	1c1a      	adds	r2, r3, #0
    87f8:	f7fc fd1e 	bl	5238 <_lseek>
    87fc:	1c43      	adds	r3, r0, #1
    87fe:	d103      	bne.n	8808 <_lseek_r+0x20>
    8800:	6823      	ldr	r3, [r4, #0]
    8802:	2b00      	cmp	r3, #0
    8804:	d000      	beq.n	8808 <_lseek_r+0x20>
    8806:	602b      	str	r3, [r5, #0]
    8808:	bd38      	pop	{r3, r4, r5, pc}
    880a:	46c0      	nop			; (mov r8, r8)
    880c:	20000df4 	.word	0x20000df4

00008810 <_malloc_usable_size_r>:
    8810:	3904      	subs	r1, #4
    8812:	680b      	ldr	r3, [r1, #0]
    8814:	1f18      	subs	r0, r3, #4
    8816:	2b00      	cmp	r3, #0
    8818:	da02      	bge.n	8820 <_malloc_usable_size_r+0x10>
    881a:	58c8      	ldr	r0, [r1, r3]
    881c:	181b      	adds	r3, r3, r0
    881e:	1f18      	subs	r0, r3, #4
    8820:	4770      	bx	lr
	...

00008824 <_read_r>:
    8824:	b538      	push	{r3, r4, r5, lr}
    8826:	4c08      	ldr	r4, [pc, #32]	; (8848 <_read_r+0x24>)
    8828:	1c05      	adds	r5, r0, #0
    882a:	2000      	movs	r0, #0
    882c:	6020      	str	r0, [r4, #0]
    882e:	1c08      	adds	r0, r1, #0
    8830:	1c11      	adds	r1, r2, #0
    8832:	1c1a      	adds	r2, r3, #0
    8834:	f7fc fc96 	bl	5164 <_read>
    8838:	1c43      	adds	r3, r0, #1
    883a:	d103      	bne.n	8844 <_read_r+0x20>
    883c:	6823      	ldr	r3, [r4, #0]
    883e:	2b00      	cmp	r3, #0
    8840:	d000      	beq.n	8844 <_read_r+0x20>
    8842:	602b      	str	r3, [r5, #0]
    8844:	bd38      	pop	{r3, r4, r5, pc}
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	20000df4 	.word	0x20000df4
    884c:	00000718 	.word	0x00000718
    8850:	0000095c 	.word	0x0000095c
    8854:	0000095c 	.word	0x0000095c
    8858:	0000095c 	.word	0x0000095c
    885c:	0000095c 	.word	0x0000095c
    8860:	0000095c 	.word	0x0000095c
    8864:	0000095c 	.word	0x0000095c
    8868:	0000095c 	.word	0x0000095c
    886c:	0000095c 	.word	0x0000095c
    8870:	0000095c 	.word	0x0000095c
    8874:	0000095c 	.word	0x0000095c
    8878:	0000095c 	.word	0x0000095c
    887c:	0000095c 	.word	0x0000095c
    8880:	0000095c 	.word	0x0000095c
    8884:	0000095c 	.word	0x0000095c
    8888:	0000095c 	.word	0x0000095c
    888c:	00000700 	.word	0x00000700
    8890:	0000095c 	.word	0x0000095c
    8894:	0000095c 	.word	0x0000095c
    8898:	0000095c 	.word	0x0000095c
    889c:	0000095c 	.word	0x0000095c
    88a0:	0000095c 	.word	0x0000095c
    88a4:	0000095c 	.word	0x0000095c
    88a8:	0000095c 	.word	0x0000095c
    88ac:	0000095c 	.word	0x0000095c
    88b0:	0000095c 	.word	0x0000095c
    88b4:	0000095c 	.word	0x0000095c
    88b8:	0000095c 	.word	0x0000095c
    88bc:	0000095c 	.word	0x0000095c
    88c0:	0000095c 	.word	0x0000095c
    88c4:	0000095c 	.word	0x0000095c
    88c8:	0000095c 	.word	0x0000095c
    88cc:	00000710 	.word	0x00000710
    88d0:	0000095c 	.word	0x0000095c
    88d4:	0000095c 	.word	0x0000095c
    88d8:	0000095c 	.word	0x0000095c
    88dc:	0000095c 	.word	0x0000095c
    88e0:	0000095c 	.word	0x0000095c
    88e4:	0000095c 	.word	0x0000095c
    88e8:	0000095c 	.word	0x0000095c
    88ec:	0000095c 	.word	0x0000095c
    88f0:	0000095c 	.word	0x0000095c
    88f4:	0000095c 	.word	0x0000095c
    88f8:	0000095c 	.word	0x0000095c
    88fc:	0000095c 	.word	0x0000095c
    8900:	0000095c 	.word	0x0000095c
    8904:	0000095c 	.word	0x0000095c
    8908:	0000095c 	.word	0x0000095c
    890c:	00000708 	.word	0x00000708
    8910:	000006e8 	.word	0x000006e8
    8914:	00000720 	.word	0x00000720
    8918:	000006f8 	.word	0x000006f8
    891c:	000006f0 	.word	0x000006f0
    8920:	00000002 	.word	0x00000002
    8924:	00000003 	.word	0x00000003
    8928:	00000028 	.word	0x00000028
    892c:	00000029 	.word	0x00000029
    8930:	00000004 	.word	0x00000004
    8934:	00000005 	.word	0x00000005
    8938:	00000006 	.word	0x00000006
    893c:	00000007 	.word	0x00000007
    8940:	00000020 	.word	0x00000020
    8944:	00000021 	.word	0x00000021
    8948:	00000022 	.word	0x00000022
    894c:	00000023 	.word	0x00000023
    8950:	00000024 	.word	0x00000024
    8954:	00000025 	.word	0x00000025
    8958:	00000026 	.word	0x00000026
    895c:	00000027 	.word	0x00000027
    8960:	00000008 	.word	0x00000008
    8964:	00000009 	.word	0x00000009
    8968:	0000000a 	.word	0x0000000a
    896c:	0000000b 	.word	0x0000000b

00008970 <__func__.11753>:
    8970:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

00008980 <__func__.11872>:
    8980:	6e627570 675f6275 00007465              pubnub_get..

0000898c <__func__.11757>:
    898c:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
    899c:	7463656e 00000000                       nect....

000089a4 <__func__.11868>:
    89a4:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
    89b4:	00000000 732f2e2e 502f6372 754e6275     ....../src/PubNu
    89c4:	00632e62 2d627028 6174733e 3d206574     b.c.(pb->state =
    89d4:	5350203d 4c44495f 7c202945 7028207c     = PS_IDLE) || (p
    89e4:	733e2d62 65746174 203d3d20 575f5350     b->state == PS_W
    89f4:	5f544941 29534e44 207c7c20 2d627028     AIT_DNS) || (pb-
    8a04:	6174733e 3d206574 5350203d 4941575f     >state == PS_WAI
    8a14:	4f435f54 43454e4e 00002954 6c696166     T_CONNECT)..fail
    8a24:	74206465 7263206f 65746165 50435420     ed to create TCP
    8a34:	696c6320 20746e65 6b636f73 65207465      client socket e
    8a44:	726f7272 00000d21 73627570 702e6275     rror!...pubsub.p
    8a54:	756e6275 6f632e62 0000006d 696c6176     ubnub.com...vali
    8a64:	74635f64 72705f78 62702874 00000029     d_ctx_prt(pb)...
    8a74:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
    8a84:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
    8a94:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
    8aa4:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
    8ab4:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
    8ac4:	00000a0d 6c646168 72745f65 61736e61     ....hadle_transa
    8ad4:	6f697463 77202e6e 20746961 76636572     ction. wait recv
    8ae4:	0000000d 65646e69 203c2078 4e425550     ....index < PUBN
    8af4:	435f4255 4d5f5854 00005841 5f6d326d     UB_CTX_MAX..m2m_
    8b04:	69666977 636f735f 5f74656b 6e6e6f63     wifi_socket_conn
    8b14:	20746365 6f63203a 63656e6e 75732074     ect : connect su
    8b24:	73656363 000d2173 5f6d326d 69666977     ccess!..m2m_wifi
    8b34:	636f735f 5f74656b 6e6e6f63 20746365     _socket_connect 
    8b44:	6f63203a 63656e6e 72652074 21726f72     : connect error!
    8b54:	0000000d 5f6d326d 69666977 636f735f     ....m2m_wifi_soc
    8b64:	5f74656b 646e6573 73203a20 20646e65     ket_send : send 
    8b74:	63637573 21737365 0000000d 5f6d326d     success!....m2m_
    8b84:	69666977 636f735f 5f74656b 76636572     wifi_socket_recv
    8b94:	72203a20 20766365 63637573 21737365      : recv success!
    8ba4:	0000000d 5f6d326d 69666977 636f735f     ....m2m_wifi_soc
    8bb4:	5f74656b 76636572 72203a20 20766365     ket_recv : recv 
    8bc4:	6f727265 000d2172 746e6f43 2d746e65     error!..Content-
    8bd4:	676e654c 203a6874 00000000 0000005b     Length: ....[...
    8be4:	70747468 7065725f 3d20796c 0d732520     http_reply = %s.
    8bf4:	0000000a 656d6974 656b6f74 203d206e     ....timetoken = 
    8c04:	0a0d7325 00000000 6275702f 6873696c     %s....../publish
    8c14:	2f73252f 302f7325 2f73252f 00002f30     /%s/%s/0/%s/0/..
    8c24:	64636261 68676665 6c6b6a69 706f6e6d     abcdefghijklmnop
    8c34:	74737271 78777675 42417a79 46454443     qrstuvwxyzABCDEF
    8c44:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
    8c54:	5a595857 33323130 37363534 5f2d3938     WXYZ0123456789-_
    8c64:	3d2c7e2e 5b403b3a 0000005d 33323130     .~,=:;@[]...0123
    8c74:	37363534 42413938 46454443 00000000     456789ABCDEF....
    8c84:	64697575 0000003d 68747561 0000003d     uuid=...auth=...
    8c94:	00000026 6275732f 69726373 252f6562     &.../subscribe/%
    8ca4:	73252f73 252f302f 73253f73 73257325     s/%s/0/%s?%s%s%s
    8cb4:	73257325 736e7026 573d6b64 31434e49     %s%s&pnsdk=WINC1
    8cc4:	25303035 32252573 00732546 00312e30     500%s%%2F%s.0.1.

00008cd4 <__func__.11851>:
    8cd4:	6e627570 695f6275 0074696e              pubnub_init.

00008ce0 <__func__.11857>:
    8ce0:	6e627570 705f6275 696c6275 00006873     pubnub_publish..
    8cf0:	00003038 00003038 00003068 00002fea     80..80..h0.../..
    8d00:	0000300e 0000301c 0000304e 0000304e     .0...0..N0..N0..
    8d10:	00003096 00002fda 000030f2 000030f2     .0.../...0...0..
    8d20:	000030f2 000030f2 0000302a              .0...0..*0..

00008d2c <crc7_syndrome_table>:
    8d2c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    8d3c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    8d4c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    8d5c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    8d6c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    8d7c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    8d8c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    8d9c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    8dac:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    8dbc:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    8dcc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    8ddc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    8dec:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    8dfc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    8e0c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    8e1c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00008e2c <_tcc_intflag>:
    8e2c:	00000001 00000002 00000004 00000008     ................
    8e3c:	00001000 00002000 00004000 00008000     ..... ...@......
    8e4c:	00010000 00020000 00040000 00080000     ................
    8e5c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    8e6c:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    8e7c:	000049f4 00004a50 00004a50 000049ee     .I..PJ..PJ...I..
    8e8c:	000049ee 00004a0a 000049fa 00004a10     .I...J...I...J..
    8e9c:	00004a3e 00004bc4 00004c24 00004c24     >J...K..$L..$L..
    8eac:	00004ba4 00004bb6 00004bd2 00004ba8     .K...K...K...K..
    8ebc:	00004be0 00004c14 74697845 20676e69     .K...L..Exiting 
    8ecc:	68746977 61747320 20737574 0a2e6425     with status %d..
    8edc:	00000000                                ....

00008ee0 <subkey>:
    8ee0:	2d627573 61322d63 31383337 642d6338     sub-c-2a73818c-d
    8ef0:	2d336432 33653131 3432392d 32302d34     2d3-11e3-9244-02
    8f00:	64326565 37626164 00006566              ee2ddab7fe..

00008f0c <r21_channel>:
    8f0c:	656d7441 75505f6c 62756e62 00000000     Atmel_Pubnub....
    8f1c:	74736f48 20504920 25207369 64252e64     Host IP is %d.%d
    8f2c:	2e64252e 0a0d6425 00000000 74736f48     .%d.%d......Host
    8f3c:	6d614e20 73692065 0d732520 0000000a      Name is %s.....
    8f4c:	69666977 2062635f 6425202f 00000a0d     wifi_cb / %d....
    8f5c:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
    8f6c:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
    8f7c:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
    8f8c:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
    8f9c:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    8fac:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
    8fbc:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
    8fcc:	4e4e4f43 45544345 00000d44 5f6d326d     CONNECTED...m2m_
    8fdc:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    8fec:	49464957 5145525f 4348445f 4f435f50     WIFI_REQ_DHCP_CO
    8ffc:	203a464e 69205049 75252073 2e75252e     NF: IP is %u.%u.
    900c:	252e7525 000a0d75 69666977 3a62635f     %u.%u...wifi_cb:
    901c:	4d324d20 4649575f 45525f49 505f5053      M2M_WIFI_RESP_P
    902c:	49564f52 4e4f4953 464e495f 000d2e4f     ROVISION_INFO...
    903c:	69666977 3a62635f 2c732520 2c732520     wifi_cb: %s, %s,
    904c:	0d642520 0000000a 69666977 3a62635f      %d.....wifi_cb:
    905c:	6f725020 69736976 66206e6f 656c6961      Provision faile
    906c:	000d2e64 69666977 3a62635f 4d324d20     d...wifi_cb: M2M
    907c:	4649575f 45525f49 435f5053 544e4e4f     _WIFI_RESP_CONNT
    908c:	5f4e4f49 54415453 44203a45 6f637369     ION_STATE: Disco
    909c:	63656e6e 2e646574 0000000d 69666977     nnected.....wifi
    90ac:	3a62635f 4d324d20 4649575f 45525f49     _cb: M2M_WIFI_RE
    90bc:	435f5053 544e4e4f 5f4e4f49 54415453     SP_CONNTION_STAT
    90cc:	43203a45 656e6e6f 64657463 00000d2e     E: Connected....
    90dc:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    90ec:	45525f49 435f5053 544e4e4f 5f4e4f49     I_RESP_CONNTION_
    90fc:	54415453 55203a45 6665646e 64656e69     STATE: Undefined
    910c:	00000d2e 57202d2d 31434e49 20303035     ....-- WINC1500 
    911c:	4e627550 65206275 706d6178 2d20656c     PubNub example -
    912c:	2d0a0d2d 4153202d 3132444d 4c50585f     -..-- SAMD21_XPL
    913c:	454e4941 52505f44 2d2d204f 2d2d0a0d     AINED_PRO --..--
    914c:	6d6f4320 656c6970 4d203a64 20207961      Compiled: May  
    915c:	30322037 31203531 30333a31 2038323a     7 2015 11:30:28 
    916c:	000d2d2d 6e69616d 326d203a 69775f6d     --..main: m2m_wi
    917c:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
    918c:	0d21726f 00000000 54534554 444f4d5f     or!.....TEST_MOD
    919c:	49575f45 554f4854 52505f54 5349564f     E_WITHOUT_PROVIS
    91ac:	204e4f49 7453202f 20747261 0d7e7e7e     ION / Start ~~~.
    91bc:	00000000 6e627570 322d6275 2d353130     ....pubnub-2015-
    91cc:	69727073 322d676e 00000000 69553753     spring-2....S7Ui
    91dc:	46366a4a 49793630 76613150 00000000     Jj6F06yIP1av....
    91ec:	49535367 73252044 4167202c 20485455     gSSID %s, gAUTH 
    91fc:	202c6425 4b535067 0d732520 0000000a     %d, gPSK %s.....
    920c:	6e627570 65446275 203a6f6d 65636552     pubnubDemo: Rece
    921c:	64657669 73656d20 65676173 7325203a     ived message: %s
    922c:	00000a0d 524d4153 44203132 3a617461     ....SAMR21 Data:
    923c:	00000000 6e627570 65446275 203a6f6d     ....pubnubDemo: 
    924c:	6c627570 20687369 6e657665 000d2e74     publish event...
    925c:	434e4957 67694c20 3a207468 00642520     WINC Light : %d.
    926c:	6e627570 65446275 203a6f6d 73627573     pubnubDemo: subs
    927c:	62697263 76652065 2e746e65 0000000d     cribe event.....
    928c:	6f63227b 6e6d756c 5b3a2273 6574225b     {"columns":[["te
    929c:	7265706d 72757461 202c2265 2e642522     mperature", "%d.
    92ac:	5d226425 00007d5d 434e4957 6d655420     %d"]]}..WINC Tem
    92bc:	61726570 65727574 25203a20 00462764     perature : %d'F.

000092cc <channel>:
    92cc:	656d7441 75505f6c 62756e62 00000000     Atmel_Pubnub....

000092dc <pubkey>:
    92dc:	2d627570 64362d63 62376562 362d6466     pub-c-6dbe7bfd-6
    92ec:	2d383034 61303334 6464612d 35382d34     408-430a-add4-85
    92fc:	65666463 62363538 00003734 000063d8     cdfe856b47...c..
    930c:	000065c6 000065c6 000063b8 000062a2     .e...e...c...b..
    931c:	000062a2 000063aa 000063b8 000062a2     .b...c...c...b..
    932c:	000063aa 000062a2 000063b8 000062a0     .c...b...c...b..
    933c:	000062a0 000062a0 000065ce 7566202c     .b...b...e.., fu
    934c:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
    935c:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
    936c:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
    937c:	73256425 000a7325 00000043              %d%s%s..C...

00009388 <_global_impure_ptr>:
    9388:	20000414 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    9398:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    93a8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    93b8:	64636261 00006665                                abcdef.

000093bf <_ctype_>:
    93bf:	20202000 20202020 28282020 20282828     .         ((((( 
    93cf:	20202020 20202020 20202020 20202020                     
    93df:	10108820 10101010 10101010 10101010      ...............
    93ef:	04040410 04040404 10040404 10101010     ................
    93ff:	41411010 41414141 01010101 01010101     ..AAAAAA........
    940f:	01010101 01010101 01010101 10101010     ................
    941f:	42421010 42424242 02020202 02020202     ..BBBBBB........
    942f:	02020202 02020202 02020202 10101010     ................
    943f:	00000020 00000000 00000000 00000000      ...............
	...

000094c0 <__sf_fake_stdin>:
	...

000094e0 <__sf_fake_stdout>:
	...

00009500 <__sf_fake_stderr>:
	...

00009520 <_init>:
    9520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9522:	46c0      	nop			; (mov r8, r8)
    9524:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9526:	bc08      	pop	{r3}
    9528:	469e      	mov	lr, r3
    952a:	4770      	bx	lr

0000952c <__init_array_start>:
    952c:	000000d9 	.word	0x000000d9

00009530 <_fini>:
    9530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9532:	46c0      	nop			; (mov r8, r8)
    9534:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9536:	bc08      	pop	{r3}
    9538:	469e      	mov	lr, r3
    953a:	4770      	bx	lr

0000953c <__fini_array_start>:
    953c:	000000b1 	.word	0x000000b1
