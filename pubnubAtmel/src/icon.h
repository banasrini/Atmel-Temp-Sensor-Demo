/**
 * \file
 *
 * \brief ICON definition.
 *
 * Copyright (c) 2014 Atmel Corporation. All rights reserved.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. The name of Atmel may not be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * 4. This software may only be redistributed and used in connection with an
 *    Atmel microcontroller product.
 *
 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \asf_license_stop
 *
 */

#ifndef ICON_H_INCLUDED
#define ICON_H_INCLUDED

#include "main.h"

#ifdef __cplusplus
extern "C" {
#endif

#define ICON_COLUMN_WIDTH                        32

typedef enum {
	ICON_OFF_IMAGE = 0,
	ICON_ON_IMAGE
} icon_type_e;

typedef enum {
	ICON_POSITION_TEMPERATURE = 0,
	ICON_POSITION_LIGHT,
	ICON_POSITION_ALERT,
	ICON_POSITION_LINK,
	ICON_POSITION_MAX
} icon_position_e;

typedef enum {
	ICON_HIDE,
	ICON_NORMAL,
	ICON_BLINK
} icon_status_e;

typedef uint32_t disp_time_t;
#define TIME_MAX_VALUE 0xffff0000

typedef struct{
	icon_type_e type;
	icon_status_e status;
	disp_time_t disp_time;
	bool is_shown;
	const uint8_t * icon_off_data;
	const uint8_t * icon_on_data;
} icon_t;

#define ICON_START_PAGE(POSITION)                (0)
#define ICON_START_COLUMN(POSITION)              (POSITION*ICON_COLUMN_WIDTH)

#define TIME_TICK_INTERVAL                       150 //Mili seconds
#define ICON_BLINK_ON_TIME                       600 //Mili seconds
#define ICON_BLINK_OFF_TIME                      300 //Mili seconds

const static uint8_t light_off [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80,
	0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0xFE, 0x87, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x87, 0xFE, 0x30, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x03, 0x0E, 0xB8, 0x80, 0x80,
	0x80, 0x80, 0xB8, 0x1E, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0A,
	0x0A, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t light_on [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
	0x00, 0x00, 0x18, 0x38, 0x80, 0x80, 0x80, 0x9C,
	0x9C, 0x80, 0x80, 0x80, 0x30, 0x18, 0x00, 0x00,
	0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x11,
	0x01, 0x10, 0xFE, 0x87, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x01, 0x87, 0xFE, 0x30, 0x01,
	0x11, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02,
	0x02, 0x00, 0x01, 0x03, 0x0E, 0xB8, 0x80, 0x80,
	0x80, 0x80, 0xB8, 0x1E, 0x03, 0x01, 0x00, 0x02,
	0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x0A,
	0x0A, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t temp_off [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xC0, 0xF0, 0x30, 0x10, 0x10, 0x10, 0x30,
	0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xFF, 0xFF, 0x00, 0xE0, 0xE0, 0xE0, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
	0x0C, 0xF3, 0xF9, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xF9, 0xF3, 0x0C, 0xF8, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x02, 0x04, 0x09, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
	0x09, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t temp_on [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xC0, 0xF0, 0x30, 0x90, 0x90, 0x90, 0x30,
	0xF0, 0xC0, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
	0xFF, 0xFF, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
	0x0C, 0xF3, 0xF9, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC,
	0xF9, 0xF3, 0x0C, 0xF8, 0x00, 0x03, 0x03, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x02, 0x04, 0x09, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
	0x09, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const static uint8_t alert_on [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0,
	0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xC0, 0xF0, 0x78, 0x1E, 0x07, 0xE1, 0xF0,
	0xF0, 0xE1, 0x07, 0x1E, 0x78, 0xF0, 0xC0, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0x78, 0x1E,
	0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF,
	0xEF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F,
	0x1E, 0x78, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0x0F, 0x0F, 0x0E, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0E, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00
};

const static uint8_t link_off [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x78, 0x3C, 0x1C,
	0x1C, 0x3C, 0x78, 0xF0, 0xE0, 0xC0, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04,
	0x07, 0x07, 0x03, 0x01, 0x00, 0xE0, 0xF0, 0x78,
	0x3C, 0x1E, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0xC0, 0xE0, 0xF0, 0x78, 0x3C, 0x1E,
	0x0F, 0x07, 0x03, 0x80, 0xC0, 0xE0, 0xF0, 0x70,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1E, 0x1C,
	0x1C, 0x1E, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const static uint8_t link_on [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x78, 0x38, 0x38,
	0x78, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x40, 0x88, 0xDE,
	0xEF, 0xF7, 0x7B, 0xBD, 0xDC, 0xE0, 0xF0, 0x78,
	0x3C, 0x1E, 0x0F, 0x07, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x60, 0xF0, 0xF8, 0xBC, 0x1E,
	0x0F, 0x07, 0x03, 0x8D, 0xCE, 0xEF, 0xF7, 0x7B,
	0x3D, 0x0C, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F,
	0x0E, 0x0E, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#ifdef __cplusplus
}
#endif

#endif /* ICON_H_INCLUDED */
